
target/aarch64-unknown-none-softfloat/debug/arm_rstiny2:     file format elf64-littleaarch64
target/aarch64-unknown-none-softfloat/debug/arm_rstiny2
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000040000000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000040000000 paddr 0x0000000040000000 align 2**16
         filesz 0x00000000000098f4 memsz 0x00000000000098f4 flags r-x
    LOAD off    0x00000000000198f8 vaddr 0x00000000400098f8 paddr 0x00000000400098f8 align 2**16
         filesz 0x0000000000002830 memsz 0x0000000000002830 flags r--
    LOAD off    0x000000000001c128 vaddr 0x000000004000c128 paddr 0x000000004000c128 align 2**16
         filesz 0x0000000000000000 memsz 0x0000000000000039 flags rw-
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         000098f4  0000000040000000  0000000040000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00002830  00000000400098f8  00000000400098f8  000198f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000039  000000004000c128  000000004000c128  0001c128  2**3
                  ALLOC
  3 .debug_abbrev 000049cb  0000000000000000  0000000000000000  0001c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0004a3e7  0000000000000000  0000000000000000  00020af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00003db0  0000000000000000  0000000000000000  0006aeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_ranges 0002a400  0000000000000000  0000000000000000  0006ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    0005a746  0000000000000000  0000000000000000  0009908a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00007ad0  0000000000000000  0000000000000000  000f37d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   0002a21b  0000000000000000  0000000000000000  000fb2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000003e6  0000000000000000  0000000000000000  001254bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 112066p874lxuj1cmy8tuon7n
0000000040000050 l     F .text	00000000000000b8 .hidden _ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E
0000000040000110 l     F .text	00000000000000b8 .hidden _ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE
00000000400001d0 l     F .text	0000000000000020 .hidden _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha54809ca68e04a8eE
00000000400001f0 l     F .text	0000000000000020 .hidden _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hceaafd482ed9975eE
0000000000000000 l    df *ABS*	0000000000000000 17lqcz1m3h39zylftdp835nt6
0000000040000210 l     F .text	0000000000000030 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h857b6d057da23e70E
0000000040000240 l     F .text	0000000000000024 .hidden _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hac3ca38dad9be622E
0000000040000270 l     F .text	0000000000000024 .hidden _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hd668e76718adaff2E
00000000400002a0 l     F .text	0000000000000048 .hidden _ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E
00000000400002f0 l     F .text	0000000000000048 .hidden _ZN4core3fmt9Arguments6new_v117h38439cbb1908ee1cE
0000000040000340 l     F .text	0000000000000044 .hidden _ZN4core3fmt9Arguments6new_v117h9ed57ca217822b21E
0000000000000000 l    df *ABS*	0000000000000000 1an1pyapurdawi3p64994y1tk
0000000040000390 l     F .text	0000000000000024 .hidden _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e403cd4a50fc3aeE
0000000000000000 l    df *ABS*	0000000000000000 1goz761wyg61r6eas14j813h3
00000000400003c0 l     F .text	00000000000000f4 _ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E
00000000400004c0 l     F .text	0000000000000040 .hidden _ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E
0000000040000500 l     F .text	000000000000003c .hidden _ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E
0000000040000540 l     F .text	000000000000010c .hidden _ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E
0000000040000650 l     F .text	0000000000000084 .hidden _ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h6512c481b2ea7bccE
0000000000000000 l    df *ABS*	0000000000000000 1m2dgm8u3v73irwfffpfkzb8s
00000000400006f0 l     F .text	0000000000000024 _ZN11arm_rstiny24uart4Uart10write_byte17hd7c0bd59c6e2cc27E
0000000040000720 l     F .text	0000000000000084 _ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E
00000000400006e0 l     F .text	0000000000000010 .hidden _ZN11arm_rstiny24uart4Uart4init17hc185fb65f8a637ddE
00000000400007b0 l     F .text	0000000000000030 .hidden _ZN60_$LT$arm_rstiny2..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17hfd5c9c9a94c7fd81E
00000000400007e0 l     F .text	000000000000007c .hidden _ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E
0000000040009bc8 l     O .rodata	0000000000000008 .hidden _ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E
0000000000000000 l    df *ABS*	0000000000000000 1voyfe9n1ww7bbrl4pq8m31at
0000000040000a30 l     F .text	0000000000000060 _ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb784842f11e8b92eE
0000000040000a90 l     F .text	0000000000000064 _ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hbb640cd70ffad33cE
0000000040000860 l     F .text	000000000000001c .hidden _ZN5alloc3vec12Vec$LT$T$GT$3new17h3dad46102c9e0ce0E
0000000040000880 l     F .text	000000000000001c .hidden _ZN5alloc3vec12Vec$LT$T$GT$3new17hfa7bae84f21f6bd9E
00000000400008a0 l     F .text	0000000000000014 .hidden _ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7b0e2f1ebe5c11c7E
00000000400008c0 l     F .text	00000000000000b0 .hidden _ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E
0000000040000970 l     F .text	00000000000000c0 .hidden _ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E
0000000040000b00 l     F .text	0000000000000040 .hidden _ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h7114c89257c9413fE
0000000040000b40 l     F .text	000000000000001c .hidden _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h17ec9a6e82161439E
0000000040000b60 l     F .text	000000000000001c .hidden _ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8b16e8458164c219E
0000000000000000 l    df *ABS*	0000000000000000 33dqcarv6olno20s8c8hutvim
0000000040000b80 l     F .text	000000000000002c .hidden _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE
0000000000000000 l    df *ABS*	0000000000000000 3lk4hwk9ibe73ufjk6kw3c3f0
0000000040000bb0 l     F .text	000000000000006c _ZN4core3fmt5Write10write_char17h9d2e2842b38ada48E
0000000040000c40 l     F .text	0000000000000150 _ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E
0000000040000c20 l     F .text	000000000000001c .hidden _ZN4core3fmt5Write9write_fmt17he22f1dfd5add76fbE
0000000000000000 l    df *ABS*	0000000000000000 3orw5lx1nb1an60rqukh5p9ek
0000000040000d90 l     F .text	000000000000003c .hidden _ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3052d79ce8b622eE
0000000000000000 l    df *ABS*	0000000000000000 3y1ox9pfcbfdwazypynbnwv7y
0000000040000dd0 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument11new_display17h155d492ec1f64f4eE
0000000040000e10 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument11new_display17h4e06f4f1166cd372E
0000000040000e50 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument11new_display17h621b8b9a52bf4e15E
0000000040000e90 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument11new_display17hf7c428fa25b9e26aE
0000000040000ed0 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument13new_lower_hex17h4b141567be405c84E
0000000040000f10 l     F .text	0000000000000034 .hidden _ZN4core3fmt2rt8Argument9new_debug17had42e92395b2adbfE
0000000000000000 l    df *ABS*	0000000000000000 4mizaj471gqyjqhobbsu7ev1y
0000000040000f50 l     F .text	0000000000000024 .hidden _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h46dbfb8a7b597c8cE
0000000000000000 l    df *ABS*	0000000000000000 4oag11883qjodfcnl93njtl7o
0000000040000f80 l     F .text	0000000000000118 .hidden _ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E
00000000400010a0 l     F .text	0000000000000318 .hidden _ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE
0000000000000000 l    df *ABS*	0000000000000000 5793c84bvs75bh81da5bjozvf
00000000400013c0 l     F .text	0000000000000040 .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_mul18precondition_check17h936c014545df854bE
0000000000000000 l    df *ABS*	0000000000000000 5e0juexoisyruf3h6fwhb0m67
0000000040001400 l     F .text	000000000000002c .hidden _ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E
0000000040001430 l     F .text	0000000000000014 .hidden _ZN4core4hint21unreachable_unchecked18precondition_check17h2852c9890cdbb746E
0000000000000000 l    df *ABS*	0000000000000000 5ofvub32mnoguouxkb53aqvvg
0000000040001600 l     F .text	00000000000000ac .hidden _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E
00000000400016b0 l     F .text	00000000000000ac .hidden _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E
0000000040001450 l     F .text	0000000000000028 .hidden _ZN4core4iter6traits8iterator8Iterator9enumerate17h033293092eb5dd02E
0000000040001480 l     F .text	0000000000000028 .hidden _ZN4core4iter6traits8iterator8Iterator9enumerate17ha19d225976dac883E
00000000400014b0 l     F .text	0000000000000050 .hidden _ZN4core5slice4iter13Iter$LT$T$GT$3new17ha607adfe346fe073E
0000000040001500 l     F .text	0000000000000050 .hidden _ZN4core5slice4iter13Iter$LT$T$GT$3new17hd99e62fc9f1ea855E
0000000040001550 l     F .text	00000000000000ac .hidden _ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE
0000000000000000 l    df *ABS*	0000000000000000 64nftgevai2sqf47lvx54exrq
0000000040001760 l     F .text	0000000000000188 .hidden _ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E
00000000400018f0 l     F .text	0000000000000188 .hidden _ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E
0000000000000000 l    df *ABS*	0000000000000000 6tagcizzlev8vj8y2yj60eg6y
0000000000000000 l    df *ABS*	0000000000000000 7936p9wdo6ih5b8s1sn9o0y7s
0000000040001a80 l     F .text	0000000000000020 .hidden _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h90dcb070c787e715E
0000000040001aa0 l     F .text	0000000000000020 .hidden _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb18b94471ecb9dc2E
0000000000000000 l    df *ABS*	0000000000000000 8fy4jjp7kwdre5vthh8mkw9tp
0000000040001ac0 l     F .text	0000000000000014 .hidden _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heae4db5223ccb96fE
0000000000000000 l    df *ABS*	0000000000000000 8ng8qh19kp67p6i6z3v8dkw58
0000000040001ae0 l     F .text	00000000000000e0 .hidden _ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E
0000000000000000 l    df *ABS*	0000000000000000 an63ufojhe6zlu0g5cn52vvar
0000000040001bc0 l     F .text	0000000000000084 .hidden _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E
0000000000000000 l    df *ABS*	0000000000000000 arm1y46osbco2zbmqut95t0u1
0000000040001c50 l     F .text	0000000000000018 .hidden _ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h1b1f9e2425562112E
0000000000000000 l    df *ABS*	0000000000000000 bedg8y5r3go2s9osds7z4k30g
0000000040001c70 l     F .text	00000000000000a0 .hidden _ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E
0000000040001d10 l     F .text	0000000000000140 .hidden _ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E
0000000000000000 l    df *ABS*	0000000000000000 bneh186qz0tpzuwicsk5ox89w
0000000040001e50 l     F .text	0000000000000118 .hidden _ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E
0000000040001f70 l     F .text	000000000000011c .hidden _ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E
0000000000000000 l    df *ABS*	0000000000000000 c52v93xobo8fab1l27ty84ten
0000000000000000 l    df *ABS*	0000000000000000 c5o9rvz9n9wgl2cuxeikg67fw
0000000040002090 l     F .text	00000000000001a4 _ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E
0000000040002470 l     F .text	0000000000000498 _ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E
0000000040002340 l     F .text	000000000000012c _ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E
00000000400022c0 l     F .text	000000000000007c .hidden _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hd2b1f42881a82e74E
0000000040002240 l     F .text	0000000000000080 .hidden _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hbab775207bcf49d0E
0000000000000000 l    df *ABS*	0000000000000000 ceinyx42q6tdav79e6krrjsof
0000000040002910 l     F .text	00000000000000ec _ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE
0000000040002a00 l     F .text	0000000000000028 .hidden _ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hd8716ec9e371a0e6E
0000000040002a30 l     F .text	000000000000001c .hidden _ZN4core4iter5range110_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$4next17h16ce1e5c3b932c0cE
0000000040002a50 l     F .text	0000000000000020 .hidden _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h86cd7991f84fb497E
0000000000000000 l    df *ABS*	0000000000000000 clx5ikmvk64omjxi93g3kdixz
0000000040002a70 l     F .text	0000000000000050 .hidden _ZN4core3ptr14write_volatile17h1b4d0e7a24267aecE
0000000000000000 l    df *ABS*	0000000000000000 coyrwod5032gssxqvhukjxnlv
0000000040002ac0 l     F .text	0000000000000070 .hidden _ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E
0000000000000000 l    df *ABS*	0000000000000000 cqd1hcxwqr74p9cz9980ac460
0000000040002b30 l     F .text	0000000000000004 .hidden _ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE
0000000000000000 l    df *ABS*	0000000000000000 cqf7rer8zk12q7qlcsfgq0taq
000000004000c128 l     O .bss	0000000000000038 _ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE
0000000040002dd0 l     F .text	0000000000000054 _ZN11arm_rstiny29allocator19alloc_error_handler17h49c90527103449b0E
0000000040002c80 l     F .text	0000000000000038 .hidden __rust_alloc
0000000040002cc0 l     F .text	0000000000000058 .hidden __rust_dealloc
0000000040002d20 l     F .text	0000000000000064 .hidden __rust_realloc
0000000040002d90 l     F .text	0000000000000038 .hidden __rust_alloc_zeroed
0000000040002b40 l     F .text	0000000000000138 .hidden _ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE
0000000040002e30 l     F .text	0000000000000018 .hidden __rg_oom
0000000000000000 l    df *ABS*	0000000000000000 d8pbq4sd2i4xmxb3n9tpvor4i
0000000040002e50 l     F .text	00000000000001f4 .hidden _ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE
0000000000000000 l    df *ABS*	0000000000000000 dp72o9l3yz8cjecc44n04rxg1
0000000040000014 l       .text	0000000000000000 clear_bss
0000000040000024 l       .text	0000000000000000 clear_bss_done
0000000040000028 l       .text	0000000000000000 halt
0000000040003680 l     F .text	000000000000005c .hidden rust_begin_unwind
0000000000000000 l    df *ABS*	0000000000000000 en91t4nszhxbvtlmr7hkw25k4
00000000400036e0 l     F .text	0000000000000074 _ZN5alloc5alloc12alloc_zeroed17he0314ca0a4131c26E
0000000040003760 l     F .text	0000000000000074 _ZN5alloc5alloc5alloc17hea53bbd6592674e4E
00000000400037e0 l     F .text	000000000000019c _ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE
0000000040003980 l     F .text	00000000000003fc _ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE
0000000040003dc0 l     F .text	0000000000000028 .hidden _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h180607faa2fbb0e4E
0000000040003d80 l     F .text	0000000000000034 .hidden _ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17he6dc343d6fb67034E
0000000000000000 l    df *ABS*	0000000000000000 ez1azezahk9anhk2mhcrhmyim
0000000040003df0 l     F .text	0000000000000088 .hidden _ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4df220a4e6aec91dE
0000000000000000 l    df *ABS*	0000000000000000 315i5a4aw3zbl20ui74dbtqyo
0000000000000000 l    df *ABS*	0000000000000000 linked_list_allocator.e4d78c010c9829e8-cgu.0
0000000040003f00 l     F .text	0000000000000044 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c2d5a2ccd7a56b9E
0000000040004120 l     F .text	0000000000000038 _ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h9ba2c95f72e1cff2E
0000000040004330 l     F .text	000000000000015c _ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE
00000000400045c0 l     F .text	000000000000002c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E
00000000400046b0 l     F .text	0000000000000068 _ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE
0000000040004720 l     F .text	000000000000003c _ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h1809f106a35da307E
00000000400047b0 l     F .text	0000000000000014 _ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E
00000000400047d0 l     F .text	000000000000001c _ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE
0000000040004ea0 l     F .text	0000000000000030 _ZN21linked_list_allocator4hole6Cursor4next28_$u7b$$u7b$closure$u7d$$u7d$17h8f09d6a52afa5c7cE
0000000040006990 l     F .text	0000000000000014 _ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h4b810b97a51d00a8E
0000000040004b70 l     F .text	000000000000003c _ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17ha9082298930d2036E
0000000040004e70 l     F .text	000000000000002c _ZN21linked_list_allocator4hole6Cursor4next17h79d83ad6cd44f065E
0000000040004ed0 l     F .text	000000000000001c _ZN21linked_list_allocator4hole6Cursor7current17h51338f4c72902c63E
0000000040004ef0 l     F .text	0000000000000018 _ZN21linked_list_allocator4hole6Cursor8previous17hfa2f1107d7fea9eeE
0000000040004f10 l     F .text	000000000000054c _ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE
0000000040005460 l     F .text	0000000000000160 _ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE
00000000400055c0 l     F .text	0000000000000164 _ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E
0000000040005e70 l     F .text	0000000000000100 _ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E
0000000040005730 l     F .text	00000000000000b4 _ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE
0000000040006540 l     F .text	0000000000000224 _ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E
0000000040005f70 l     F .text	00000000000001f4 _ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE
0000000040006170 l     F .text	0000000000000230 _ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E
00000000400063a0 l     F .text	0000000000000194 _ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE
0000000000000000 l    df *ABS*	0000000000000000 spinning_top.afbb63ddd738ca60-cgu.0
0000000040006bb0 l     F .text	00000000000000c8 _ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E
0000000040006c80 l     F .text	000000000000002c _ZN4core4sync6atomic10AtomicBool4load17hf6fa5b3dfb1f1fdfE
0000000040006cb0 l     F .text	0000000000000028 _ZN4core4sync6atomic10AtomicBool5store17hc8a377027172c982E
0000000040007530 l     F .text	000000000000004c _ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h278fa29e19dedc7fE
0000000000000000 l    df *ABS*	0000000000000000 alloc.63ecd53c9f7a66e3-cgu.0
0000000040007638 l     F .text	0000000000000034 _ZN5alloc7raw_vec17capacity_overflow17heba1af8f3d4c70dfE
0000000000000000 l    df *ABS*	0000000000000000 core.752cf5465a29d713-cgu.0
0000000040008d58 l     F .text	00000000000000e0 _ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E
000000004000916c l     F .text	00000000000000e8 _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE
00000000400093fc l     F .text	0000000000000154 _ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E
0000000040009654 l     F .text	000000000000001c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE
0000000040009670 l     F .text	0000000000000018 OUTLINED_FUNCTION_0
0000000040009550 l     F .text	0000000000000018 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd41afde49ccaa8bE
0000000040007fbc l     F .text	000000000000001c _ZN4core3fmt5Write9write_fmt17hd44058050f2fc637E
0000000040008514 l     F .text	0000000000000088 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E
0000000040009298 l     F .text	0000000000000148 _ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE
0000000040009568 l     F .text	00000000000000ec _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.144
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.149
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.161
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.000
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.192
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.203
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.005
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.204
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.211
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.214
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.223
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.225
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.012
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.304
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.007
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.312
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.316
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.321
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.322
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.332
0000000040009688 l     F .text	0000000000000150 .hidden memset
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.333
0000000000000000 l    df *ABS*	0000000000000000 compiler_builtins.a72da0e325526df8-cgu.344
00000000400097d8 l     F .text	000000000000011c .hidden memcpy
0000000040003050 g     F .text	0000000000000630 rust_main
0000000040008ee8 g     F .text	0000000000000034 _ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE
0000000040008918 g     F .text	0000000000000020 _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h90d72ec6263346ceE
0000000040009270 g     F .text	0000000000000028 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b2bf2790a30e268E
000000004000769c g     F .text	0000000000000078 _ZN68_$LT$core..ptr..alignment..Alignment$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c8f52b811827582E
0000000040008d2c g     F .text	000000000000002c _ZN4core5alloc6layout6Layout19is_size_align_valid17h02649c7e20481f71E
0000000040007918 g     F .text	000000000000003c _ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E
000000004000881c g     F .text	00000000000000fc _ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE
0000000040007ae4 g     F .text	000000000000005c _ZN4core6result13unwrap_failed17hd6f48f9c0600905bE
0000000040007ff4 g     F .text	000000000000020c _ZN4core3fmt5write17h732150d678a1cfffE
0000000040008804 g     F .text	0000000000000018 _ZN4core3fmt9Formatter9write_str17h38ea1b56a7d26f23E
000000004000906c g     F .text	0000000000000080 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17hf29c2d6715218cd0E
000000004000775c g     F .text	0000000000000124 _ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE
0000000040007880 g     F .text	0000000000000020 _ZN4core9panicking9panic_fmt17h98665796be963f83E
0000000040008f84 g     F .text	0000000000000034 _ZN4core9panicking11panic_const23panic_const_div_by_zero17h4c23f62e2c0638e8E
00000000400093e0 g     F .text	000000000000001c _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h90e794ae66b5c6e3E
00000000400090ec g     F .text	0000000000000080 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h09b001731eae0f50E
0000000040006920 g     F .text	0000000000000068 _ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb663306ab11275a8E
00000000400069b0 g     F .text	0000000000000070 _ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h420aa5dfb9add41cE
000000004000766c g     F .text	0000000000000018 _ZN5alloc7raw_vec12handle_error17h5e3ba97a9e19fb1cE
000000004000c168 g       .bss	0000000000000000 __heap_start
000000004100c168 g       .bss	0000000000000000 __heap_end
00000000400079a4 g     F .text	0000000000000038 _ZN4core9panicking30panic_null_pointer_dereference17h9acbe6818f596985E
0000000040003fb0 g     F .text	0000000000000034 _ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE
0000000040004030 g     F .text	0000000000000048 _ZN4core3fmt9Arguments6new_v117h645cec9f4d6a1ab0E
0000000040006910 g     F .text	0000000000000010 _ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6e9cf018ae81c0b0E
0000000040004e40 g     F .text	0000000000000028 _ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17hb66dd1c03746e1feE
0000000040004d80 g     F .text	000000000000001c _ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3026557fc2af9b6aE
0000000040006770 g     F .text	0000000000000064 _ZN21linked_list_allocator4Heap4init17h1d7f8382229cd8e6E
0000000040004160 g     F .text	000000000000001c _ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17h4c49ed86627f65aaE
0000000040008f1c g     F .text	0000000000000034 _ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E
0000000040008e38 g     F .text	00000000000000b0 _ZN4core4char7methods15encode_utf8_raw8do_panic7runtime17h0a2e29c13556ce17E
0000000040000000 g       .text	0000000000000000 _start
0000000040004080 g     F .text	0000000000000048 _ZN4core3fmt9Arguments6new_v117hd56b67e9706186faE
00000000400040d0 g     F .text	0000000000000048 _ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE
0000000040008f50 g     F .text	0000000000000034 _ZN4core9panicking11panic_const24panic_const_mul_overflow17h1f122e531ebb3929E
000000004110c168 g       .bss	0000000000000000 __stack_end
000000004000c128 g       .bss	0000000000000000 __bss_start
000000004000c161 g       .bss	0000000000000000 __bss_end
000000004000c160 g     O .bss	0000000000000001 __rust_no_alloc_shim_is_unstable
0000000040003e80 g     F .text	0000000000000004 __rust_alloc_error_handler
0000000040003e90 g     F .text	0000000000000018 _ZN145_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..option..Option$LT$core..convert..Infallible$GT$$GT$$GT$13from_residual17hd31e6d64db8e0193E
0000000040003eb0 g     F .text	0000000000000018 _ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h21c1842975e73179E
0000000040003ed0 g     F .text	0000000000000024 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h18bc689370717ddfE
0000000040004b10 g     F .text	0000000000000034 _ZN50_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94cd9c871d706815E
0000000040003f50 g     F .text	000000000000005c _ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E
0000000040004bf0 g     F .text	00000000000000bc _ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E
0000000040003ff0 g     F .text	0000000000000034 _ZN4core3fmt2rt8Argument9new_debug17h57844f5ebc65bce2E
0000000040004d60 g     F .text	0000000000000020 _ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h539b820ac468e84fE
0000000040004180 g     F .text	00000000000001ac _ZN4core3ptr12align_offset17h6ec6cf8b40178278E
0000000040007954 g     F .text	0000000000000050 _ZN4core9panicking18panic_bounds_check17h18a3fb35a960f8a9E
0000000040004490 g     F .text	00000000000000d0 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12align_offset17h7d32ec1bd5a83319E
0000000040004560 g     F .text	0000000000000030 _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h03c29f654dbe1ab0E
0000000040004590 g     F .text	0000000000000030 _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E
00000000400045f0 g     F .text	0000000000000050 _ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E
0000000040004640 g     F .text	0000000000000050 _ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E
0000000040004690 g     F .text	000000000000001c _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd636b4095ab66d23E
0000000040004da0 g     F .text	000000000000008c _ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE
0000000040004760 g     F .text	0000000000000050 _ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE
00000000400047f0 g     F .text	0000000000000074 _ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E
0000000040004870 g     F .text	0000000000000028 _ZN4core6option15Option$LT$T$GT$4take17h4cbffccbda50ffdeE
00000000400048a0 g     F .text	000000000000006c _ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE
0000000040004910 g     F .text	000000000000003c _ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E
0000000040004950 g     F .text	0000000000000040 _ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE
0000000040004990 g     F .text	0000000000000064 _ZN4core6option15Option$LT$T$GT$6expect17h8abef4a12cf226f6E
0000000040007714 g     F .text	0000000000000048 _ZN4core6option13expect_failed17hcf6d0b343a2b6b98E
0000000040004a00 g     F .text	0000000000000054 _ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE
0000000040004a60 g     F .text	0000000000000028 _ZN4core6option15Option$LT$T$GT$7replace17h6bcd1348183eef61E
0000000040004a90 g     F .text	000000000000004c _ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE
0000000040004adc g     F .text	0000000000000030 _ZN4core9panicking13assert_failed17hdc9e6bb73dba094bE
00000000400079f8 g     F .text	00000000000000ec _ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E
0000000040008938 g     F .text	00000000000000c4 _ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE
0000000040004b50 g     F .text	0000000000000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha38c34b891a7ea88E
0000000040004bb0 g     F .text	000000000000003c _ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E
0000000040004cb0 g     F .text	000000000000003c _ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E
0000000040004cf0 g     F .text	000000000000006c _ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E
00000000400075e0 g     F .text	000000000000002c _ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h6cb7bfec9042e4eeE
0000000040004e30 g     F .text	0000000000000010 _ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$20make_guard_unchecked17hbc1c7d510f74f299E
0000000040007580 g     F .text	0000000000000058 _ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE
0000000040006b60 g     F .text	0000000000000048 _ZN21linked_list_allocator8align_up17hd1c79338025b4907E
0000000040005e30 g     F .text	0000000000000034 _ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE
0000000040008fb8 g     F .text	0000000000000034 _ZN4core9panicking11panic_const23panic_const_rem_by_zero17h6ee5e17f2ceffb65E
00000000400079dc g     F .text	000000000000001c _ZN4core9panicking13assert_failed17h85c904e705525b01E
00000000400057f0 g     F .text	00000000000002a8 _ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E
00000000400078e4 g     F .text	0000000000000034 _ZN4core9panicking5panic17h63881a74b86b2753E
0000000040006a20 g     F .text	00000000000000d0 _ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E
0000000040005aa0 g     F .text	00000000000000c8 _ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE
0000000040006af0 g     F .text	000000000000006c _ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E
0000000040005b70 g     F .text	0000000000000234 _ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E
0000000040005db0 g     F .text	000000000000007c _ZN21linked_list_allocator4hole8HoleList10deallocate17h8ba191b999c8c650E
00000000400067e0 g     F .text	00000000000000b4 _ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E
00000000400068a0 g     F .text	0000000000000070 _ZN21linked_list_allocator4Heap10deallocate17h1810af9eb65d489aE
0000000040006f80 g     F .text	0000000000000588 _ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E
0000000040006ce0 g     F .text	0000000000000144 _ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E
0000000040006e30 g     F .text	000000000000014c _ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E
0000000040007510 g     F .text	000000000000001c _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h71dae9833ab3fe5cE
0000000040007610 g     F .text	0000000000000028 _ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17haade26255a4897c8E
0000000040007684 g     F .text	0000000000000018 _ZN5alloc5alloc18handle_alloc_error17hc207c5312f1cdc9bE
00000000400078a0 g     F .text	0000000000000044 _ZN4core9panicking18panic_nounwind_fmt17he9ad42e435c32f08E
000000004000859c g     F .text	0000000000000268 _ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E
0000000040008200 g     F .text	0000000000000314 _ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E
00000000400089fc g     F .text	0000000000000330 _ZN4core3str5count14do_count_chars17he54af375497cd56eE
0000000040007e14 g     F .text	00000000000001a8 _ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E
0000000040009254 g     F .text	000000000000001c _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hbceed844c93c45feE
00000000400093e0 g     F .text	000000000000001c _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E
000000004000906c g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17hd274927b8a819bfbE
0000000040007fd8 g     F .text	000000000000001c _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17he73f4a00f700a4dfE
0000000040007b40 g     F .text	0000000000000254 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E
0000000040007d94 g     F .text	0000000000000080 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$10write_char17he343687b709209fbE
0000000040008fec g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E
00000000400090ec g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hc92360be9e83b966E
0000000040008804 g     F .text	0000000000000018 _ZN57_$LT$core..fmt..Formatter$u20$as$u20$core..fmt..Write$GT$9write_str17h964bb0e12cada43dE
0000000040008fec g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hb89834027a6fac57E
000000004000906c g     F .text	0000000000000080 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hb3829345d57a3061E
00000000400090ec g     F .text	0000000000000080 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hf11c18306d9d44d1E
000000004000906c g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17h34a4d440271bbecfE
00000000400090ec g     F .text	0000000000000080 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17h02a806789eef25c4E
000000004100c168 g       .bss	0000000000000000 __stack_start



Disassembly of section .text:

0000000040000000 <_start>:
    40000000:	58000180 	ldr	x0, 40000030 <halt+0x8>
    40000004:	9100001f 	mov	sp, x0
    40000008:	58000180 	ldr	x0, 40000038 <halt+0x10>
    4000000c:	580001a1 	ldr	x1, 40000040 <halt+0x18>
    40000010:	d2800002 	mov	x2, #0x0                   	// #0

0000000040000014 <clear_bss>:
    40000014:	eb01001f 	cmp	x0, x1
    40000018:	5400006a 	b.ge	40000024 <clear_bss_done>  // b.tcont
    4000001c:	f8008402 	str	x2, [x0], #8
    40000020:	17fffffd 	b	40000014 <clear_bss>

0000000040000024 <clear_bss_done>:
    40000024:	94000c0b 	bl	40003050 <rust_main>

0000000040000028 <halt>:
    40000028:	d503205f 	wfe
    4000002c:	17ffffff 	b	40000028 <halt>
    40000030:	4110c168 	.word	0x4110c168
    40000034:	00000000 	.word	0x00000000
    40000038:	4000c128 	.word	0x4000c128
    4000003c:	00000000 	.word	0x00000000
    40000040:	4000c161 	.word	0x4000c161
	...

0000000040000050 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E>:
    /// # Panics
    ///
    /// Might panic if the index of the element overflows a `usize`.
    #[inline]
    #[rustc_inherit_overflow_checks]
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    40000050:	d10203ff 	sub	sp, sp, #0x80
    40000054:	f9003bfe 	str	x30, [sp, #112]
    40000058:	f90013e0 	str	x0, [sp, #32]
    4000005c:	f90027e0 	str	x0, [sp, #72]
        let a = self.iter.next()?;
    40000060:	94000568 	bl	40001600 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E>
    40000064:	f90023e0 	str	x0, [sp, #64]
        Some(output)
    }

    #[inline]
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
        match self {
    40000068:	f94023e8 	ldr	x8, [sp, #64]
    4000006c:	b4000288 	cbz	x8, 400000bc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0x6c>
    40000070:	14000001 	b	40000074 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0x24>
    40000074:	f94013e8 	ldr	x8, [sp, #32]
            Some(v) => ControlFlow::Continue(v),
    40000078:	f94023e9 	ldr	x9, [sp, #64]
    4000007c:	f9002fe9 	str	x9, [sp, #88]
    40000080:	f9001fe9 	str	x9, [sp, #56]
    40000084:	f9401fe9 	ldr	x9, [sp, #56]
    40000088:	aa0903ea 	mov	x10, x9
    4000008c:	f90007ea 	str	x10, [sp, #8]
    40000090:	f90033e9 	str	x9, [sp, #96]
        let i = self.count;
    40000094:	f9400909 	ldr	x9, [x8, #16]
    40000098:	aa0903ea 	mov	x10, x9
    4000009c:	f9000bea 	str	x10, [sp, #16]
    400000a0:	f90037e9 	str	x9, [sp, #104]
        self.count += 1;
    400000a4:	f9400908 	ldr	x8, [x8, #16]
    400000a8:	b1000509 	adds	x9, x8, #0x1
    400000ac:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    400000b0:	f9000fe9 	str	x9, [sp, #24]
    400000b4:	37000248 	tbnz	w8, #0, 400000fc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0xac>
    400000b8:	14000009 	b	400000dc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0x8c>
    400000bc:	aa1f03e8 	mov	x8, xzr
// https://github.com/rust-lang/rust/issues/99940
impl<T> ops::FromResidual<Option<convert::Infallible>> for Option<T> {
    #[inline]
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
        match residual {
            None => None,
    400000c0:	f9001be8 	str	x8, [sp, #48]
        Some((i, a))
    }
    400000c4:	14000001 	b	400000c8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0x78>
    400000c8:	f94017e0 	ldr	x0, [sp, #40]
    400000cc:	f9401be1 	ldr	x1, [sp, #48]
    400000d0:	f9403bfe 	ldr	x30, [sp, #112]
    400000d4:	910203ff 	add	sp, sp, #0x80
    400000d8:	d65f03c0 	ret
    400000dc:	f94007e8 	ldr	x8, [sp, #8]
    400000e0:	f9400be9 	ldr	x9, [sp, #16]
    400000e4:	f9400fea 	ldr	x10, [sp, #24]
    400000e8:	f94013eb 	ldr	x11, [sp, #32]
        self.count += 1;
    400000ec:	f900096a 	str	x10, [x11, #16]
        Some((i, a))
    400000f0:	f90017e9 	str	x9, [sp, #40]
    400000f4:	f9001be8 	str	x8, [sp, #48]
    }
    400000f8:	17fffff4 	b	400000c8 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E+0x78>
        self.count += 1;
    400000fc:	d503201f 	nop
    40000100:	1004c3c0 	adr	x0, 40009978 <memcpy+0x1a0>
    40000104:	94002379 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
	...

0000000040000110 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    40000110:	d10203ff 	sub	sp, sp, #0x80
    40000114:	f9003bfe 	str	x30, [sp, #112]
    40000118:	f90013e0 	str	x0, [sp, #32]
    4000011c:	f90027e0 	str	x0, [sp, #72]
        let a = self.iter.next()?;
    40000120:	94000564 	bl	400016b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E>
    40000124:	f90023e0 	str	x0, [sp, #64]
        match self {
    40000128:	f94023e8 	ldr	x8, [sp, #64]
    4000012c:	b4000288 	cbz	x8, 4000017c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0x6c>
    40000130:	14000001 	b	40000134 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0x24>
    40000134:	f94013e8 	ldr	x8, [sp, #32]
            Some(v) => ControlFlow::Continue(v),
    40000138:	f94023e9 	ldr	x9, [sp, #64]
    4000013c:	f9002fe9 	str	x9, [sp, #88]
    40000140:	f9001fe9 	str	x9, [sp, #56]
    40000144:	f9401fe9 	ldr	x9, [sp, #56]
    40000148:	aa0903ea 	mov	x10, x9
    4000014c:	f90007ea 	str	x10, [sp, #8]
    40000150:	f90033e9 	str	x9, [sp, #96]
        let i = self.count;
    40000154:	f9400909 	ldr	x9, [x8, #16]
    40000158:	aa0903ea 	mov	x10, x9
    4000015c:	f9000bea 	str	x10, [sp, #16]
    40000160:	f90037e9 	str	x9, [sp, #104]
        self.count += 1;
    40000164:	f9400908 	ldr	x8, [x8, #16]
    40000168:	b1000509 	adds	x9, x8, #0x1
    4000016c:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    40000170:	f9000fe9 	str	x9, [sp, #24]
    40000174:	37000248 	tbnz	w8, #0, 400001bc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0xac>
    40000178:	14000009 	b	4000019c <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0x8c>
    4000017c:	aa1f03e8 	mov	x8, xzr
            None => None,
    40000180:	f9001be8 	str	x8, [sp, #48]
    }
    40000184:	14000001 	b	40000188 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0x78>
    40000188:	f94017e0 	ldr	x0, [sp, #40]
    4000018c:	f9401be1 	ldr	x1, [sp, #48]
    40000190:	f9403bfe 	ldr	x30, [sp, #112]
    40000194:	910203ff 	add	sp, sp, #0x80
    40000198:	d65f03c0 	ret
    4000019c:	f94007e8 	ldr	x8, [sp, #8]
    400001a0:	f9400be9 	ldr	x9, [sp, #16]
    400001a4:	f9400fea 	ldr	x10, [sp, #24]
    400001a8:	f94013eb 	ldr	x11, [sp, #32]
        self.count += 1;
    400001ac:	f900096a 	str	x10, [x11, #16]
        Some((i, a))
    400001b0:	f90017e9 	str	x9, [sp, #40]
    400001b4:	f9001be8 	str	x8, [sp, #48]
    }
    400001b8:	17fffff4 	b	40000188 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE+0x78>
        self.count += 1;
    400001bc:	d503201f 	nop
    400001c0:	1004bdc0 	adr	x0, 40009978 <memcpy+0x1a0>
    400001c4:	94002349 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
	...

00000000400001d0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha54809ca68e04a8eE>:
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    #[inline]
    fn into_iter(self) -> I {
    400001d0:	aa0803e9 	mov	x9, x8
        self
    400001d4:	f9400008 	ldr	x8, [x0]
    400001d8:	f940040a 	ldr	x10, [x0, #8]
    400001dc:	f940080b 	ldr	x11, [x0, #16]
    400001e0:	f900092b 	str	x11, [x9, #16]
    400001e4:	f900052a 	str	x10, [x9, #8]
    400001e8:	f9000128 	str	x8, [x9]
    }
    400001ec:	d65f03c0 	ret

00000000400001f0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hceaafd482ed9975eE>:
    fn into_iter(self) -> I {
    400001f0:	aa0803e9 	mov	x9, x8
        self
    400001f4:	f9400008 	ldr	x8, [x0]
    400001f8:	f940040a 	ldr	x10, [x0, #8]
    400001fc:	f940080b 	ldr	x11, [x0, #16]
    40000200:	f900092b 	str	x11, [x9, #16]
    40000204:	f900052a 	str	x10, [x9, #8]
    40000208:	f9000128 	str	x8, [x9]
    }
    4000020c:	d65f03c0 	ret

0000000040000210 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h857b6d057da23e70E>:
macro_rules! fmt_refs {
    ($($tr:ident),*) => {
        $(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<T: ?Sized + $tr> $tr for &T {
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    40000210:	d10083ff 	sub	sp, sp, #0x20
    40000214:	f9000bfe 	str	x30, [sp, #16]
    40000218:	aa0103e2 	mov	x2, x1
    4000021c:	aa0003e8 	mov	x8, x0
    40000220:	f90003e8 	str	x8, [sp]
    40000224:	f90007e2 	str	x2, [sp, #8]
    40000228:	f9400100 	ldr	x0, [x8]
    4000022c:	f9400501 	ldr	x1, [x8, #8]
    40000230:	940021ba 	bl	40008918 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h90d72ec6263346ceE>
    40000234:	f9400bfe 	ldr	x30, [sp, #16]
    40000238:	910083ff 	add	sp, sp, #0x20
    4000023c:	d65f03c0 	ret

0000000040000240 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hac3ca38dad9be622E>:
    40000240:	d10083ff 	sub	sp, sp, #0x20
    40000244:	f9000bfe 	str	x30, [sp, #16]
    40000248:	f90003e0 	str	x0, [sp]
    4000024c:	f90007e1 	str	x1, [sp, #8]
    40000250:	f9400000 	ldr	x0, [x0]
    40000254:	94002407 	bl	40009270 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b2bf2790a30e268E>
    40000258:	f9400bfe 	ldr	x30, [sp, #16]
    4000025c:	910083ff 	add	sp, sp, #0x20
    40000260:	d65f03c0 	ret
	...

0000000040000270 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hd668e76718adaff2E>:
    40000270:	d10083ff 	sub	sp, sp, #0x20
    40000274:	f9000bfe 	str	x30, [sp, #16]
    40000278:	f90003e0 	str	x0, [sp]
    4000027c:	f90007e1 	str	x1, [sp, #8]
    40000280:	f9400000 	ldr	x0, [x0]
    40000284:	97ffffe3 	bl	40000210 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h857b6d057da23e70E>
    40000288:	f9400bfe 	ldr	x30, [sp, #16]
    4000028c:	910083ff 	add	sp, sp, #0x20
    40000290:	d65f03c0 	ret
	...

00000000400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>:
    pub const fn new_v1<const P: usize, const A: usize>(
    400002a0:	d10043ff 	sub	sp, sp, #0x10
    400002a4:	aa0803e9 	mov	x9, x8
    400002a8:	f90003e0 	str	x0, [sp]
    400002ac:	f90007e1 	str	x1, [sp, #8]
        Arguments { pieces, fmt: None, args }
    400002b0:	f9000120 	str	x0, [x9]
    400002b4:	52800028 	mov	w8, #0x1                   	// #1
    400002b8:	f9000528 	str	x8, [x9, #8]
    400002bc:	d503201f 	nop
    400002c0:	1004b888 	adr	x8, 400099d0 <memcpy+0x1f8>
    400002c4:	f940010a 	ldr	x10, [x8]
    400002c8:	f9400508 	ldr	x8, [x8, #8]
    400002cc:	f900112a 	str	x10, [x9, #32]
    400002d0:	f9001528 	str	x8, [x9, #40]
    400002d4:	f9000921 	str	x1, [x9, #16]
    400002d8:	aa1f03e8 	mov	x8, xzr
    400002dc:	f9000d28 	str	x8, [x9, #24]
    }
    400002e0:	910043ff 	add	sp, sp, #0x10
    400002e4:	d65f03c0 	ret
	...

00000000400002f0 <_ZN4core3fmt9Arguments6new_v117h38439cbb1908ee1cE>:
    pub const fn new_v1<const P: usize, const A: usize>(
    400002f0:	d10043ff 	sub	sp, sp, #0x10
    400002f4:	aa0803e9 	mov	x9, x8
    400002f8:	f90003e0 	str	x0, [sp]
    400002fc:	f90007e1 	str	x1, [sp, #8]
        Arguments { pieces, fmt: None, args }
    40000300:	f9000120 	str	x0, [x9]
    40000304:	52800068 	mov	w8, #0x3                   	// #3
    40000308:	f9000528 	str	x8, [x9, #8]
    4000030c:	d503201f 	nop
    40000310:	1004b608 	adr	x8, 400099d0 <memcpy+0x1f8>
    40000314:	f940010a 	ldr	x10, [x8]
    40000318:	f9400508 	ldr	x8, [x8, #8]
    4000031c:	f900112a 	str	x10, [x9, #32]
    40000320:	f9001528 	str	x8, [x9, #40]
    40000324:	f9000921 	str	x1, [x9, #16]
    40000328:	52800048 	mov	w8, #0x2                   	// #2
    4000032c:	f9000d28 	str	x8, [x9, #24]
    }
    40000330:	910043ff 	add	sp, sp, #0x10
    40000334:	d65f03c0 	ret
	...

0000000040000340 <_ZN4core3fmt9Arguments6new_v117h9ed57ca217822b21E>:
    pub const fn new_v1<const P: usize, const A: usize>(
    40000340:	d10043ff 	sub	sp, sp, #0x10
    40000344:	aa0803e9 	mov	x9, x8
    40000348:	f90003e0 	str	x0, [sp]
    4000034c:	f90007e1 	str	x1, [sp, #8]
        Arguments { pieces, fmt: None, args }
    40000350:	f9000120 	str	x0, [x9]
    40000354:	52800028 	mov	w8, #0x1                   	// #1
    40000358:	f9000528 	str	x8, [x9, #8]
    4000035c:	d503201f 	nop
    40000360:	1004b38a 	adr	x10, 400099d0 <memcpy+0x1f8>
    40000364:	f940014b 	ldr	x11, [x10]
    40000368:	f940054a 	ldr	x10, [x10, #8]
    4000036c:	f900112b 	str	x11, [x9, #32]
    40000370:	f900152a 	str	x10, [x9, #40]
    40000374:	f9000921 	str	x1, [x9, #16]
    40000378:	f9000d28 	str	x8, [x9, #24]
    }
    4000037c:	910043ff 	add	sp, sp, #0x10
    40000380:	d65f03c0 	ret
	...

0000000040000390 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e403cd4a50fc3aeE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    40000390:	d10083ff 	sub	sp, sp, #0x20
    40000394:	f9000bfe 	str	x30, [sp, #16]
    40000398:	f90003e0 	str	x0, [sp]
    4000039c:	f90007e1 	str	x1, [sp, #8]
    400003a0:	f9400000 	ldr	x0, [x0]
    400003a4:	94001cbe 	bl	4000769c <_ZN68_$LT$core..ptr..alignment..Alignment$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c8f52b811827582E>
    400003a8:	f9400bfe 	ldr	x30, [sp, #16]
    400003ac:	910083ff 	add	sp, sp, #0x20
    400003b0:	d65f03c0 	ret
	...

00000000400003c0 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E>:
    /// aligned.
    ///
    /// On arithmetic overflow, returns `LayoutError`.
    #[unstable(feature = "alloc_layout_extra", issue = "55724")]
    #[inline]
    pub const fn repeat_packed(&self, n: usize) -> Result<Self, LayoutError> {
    400003c0:	d10203ff 	sub	sp, sp, #0x80
    400003c4:	f9000be0 	str	x0, [sp, #16]
    400003c8:	f90027e0 	str	x0, [sp, #72]
    400003cc:	f9002be1 	str	x1, [sp, #80]
        if let Some(size) = self.size.checked_mul(n) {
    400003d0:	f9400408 	ldr	x8, [x0, #8]
    400003d4:	f9002fe8 	str	x8, [sp, #88]
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                          without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    400003d8:	9b017d09 	mul	x9, x8, x1
    400003dc:	9bc17d0a 	umulh	x10, x8, x1
    400003e0:	aa1f03e8 	mov	x8, xzr
    400003e4:	eb0a0108 	subs	x8, x8, x10
    400003e8:	1a9f07e8 	cset	w8, ne	// ne = any
    400003ec:	aa0903ea 	mov	x10, x9
    400003f0:	f9000fea 	str	x10, [sp, #24]
    400003f4:	39019fe8 	strb	w8, [sp, #103]
            (a as Self, b)
    400003f8:	f90037e9 	str	x9, [sp, #104]
/// This intrinsic does not have a stable counterpart.
#[unstable(feature = "core_intrinsics", issue = "none")]
#[rustc_nounwind]
#[inline(always)]
pub const fn unlikely(b: bool) -> bool {
    if b {
    400003fc:	370002c8 	tbnz	w8, #0, 40000454 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0x94>
    40000400:	14000001 	b	40000404 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0x44>
    40000404:	f9400be9 	ldr	x9, [sp, #16]
    40000408:	f9400fe8 	ldr	x8, [sp, #24]
            if intrinsics::unlikely(b) { None } else { Some(a) }
    4000040c:	f9001fe8 	str	x8, [sp, #56]
    40000410:	52800028 	mov	w8, #0x1                   	// #1
    40000414:	f9001be8 	str	x8, [sp, #48]
    40000418:	f9401fe8 	ldr	x8, [sp, #56]
    4000041c:	aa0803ea 	mov	x10, x8
    40000420:	f90003ea 	str	x10, [sp]
    40000424:	f9003be8 	str	x8, [sp, #112]
            // The safe constructor is called here to enforce the isize size limit.
            Layout::from_size_alignment(size, self.align)
    40000428:	f9400129 	ldr	x9, [x9]
    4000042c:	aa0903ea 	mov	x10, x9
    40000430:	f90007ea 	str	x10, [sp, #8]
    40000434:	f9003fe9 	str	x9, [sp, #120]

    /// Returns the alignment as a [`usize`].
    #[unstable(feature = "ptr_alignment_type", issue = "102070")]
    #[inline]
    pub const fn as_usize(self) -> usize {
        self.0 as usize
    40000438:	f90023e9 	str	x9, [sp, #64]
    4000043c:	f94023ea 	ldr	x10, [sp, #64]
    40000440:	d2f00009 	mov	x9, #0x8000000000000000    	// #-9223372036854775808
        unsafe { unchecked_sub(isize::MAX as usize + 1, align.as_usize()) }
    40000444:	eb0a0129 	subs	x9, x9, x10
        if size > Self::max_size_for_align(align) {
    40000448:	eb090108 	subs	x8, x8, x9
    4000044c:	540001c8 	b.hi	40000484 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xc4>  // b.pmore
    40000450:	14000008 	b	40000470 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xb0>
        } else {
            Err(LayoutError)
    40000454:	d503201f 	nop
    40000458:	1004abc8 	adr	x8, 400099d0 <memcpy+0x1f8>
    4000045c:	f9400109 	ldr	x9, [x8]
    40000460:	f9400508 	ldr	x8, [x8, #8]
    40000464:	f90013e9 	str	x9, [sp, #32]
    40000468:	f90017e8 	str	x8, [sp, #40]
        if let Some(size) = self.size.checked_mul(n) {
    4000046c:	1400000e 	b	400004a4 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xe4>
    40000470:	f94003e8 	ldr	x8, [sp]
    40000474:	f94007e9 	ldr	x9, [sp, #8]
        Ok(Layout { size, align })
    40000478:	f90013e9 	str	x9, [sp, #32]
    4000047c:	f90017e8 	str	x8, [sp, #40]
    }
    40000480:	14000008 	b	400004a0 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xe0>
            return Err(LayoutError);
    40000484:	d503201f 	nop
    40000488:	1004aa48 	adr	x8, 400099d0 <memcpy+0x1f8>
    4000048c:	f9400109 	ldr	x9, [x8]
    40000490:	f9400508 	ldr	x8, [x8, #8]
    40000494:	f90013e9 	str	x9, [sp, #32]
    40000498:	f90017e8 	str	x8, [sp, #40]
    }
    4000049c:	14000001 	b	400004a0 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xe0>
        if let Some(size) = self.size.checked_mul(n) {
    400004a0:	14000001 	b	400004a4 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E+0xe4>
        }
    }
    400004a4:	f94013e0 	ldr	x0, [sp, #32]
    400004a8:	f94017e1 	ldr	x1, [sp, #40]
    400004ac:	910203ff 	add	sp, sp, #0x80
    400004b0:	d65f03c0 	ret
	...

00000000400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
    400004c0:	d100c3ff 	sub	sp, sp, #0x30
    400004c4:	f90013fe 	str	x30, [sp, #32]
    400004c8:	f90003e1 	str	x1, [sp]
    400004cc:	f90007e0 	str	x0, [sp, #8]
    400004d0:	f9000be0 	str	x0, [sp, #16]
    400004d4:	f9000fe1 	str	x1, [sp, #24]
                        "\n\nThis indicates a bug in the program. \
                        This Undefined Behavior check is optional, and cannot be relied on for safety."));
                }
            }

            if ::core::ub_checks::$kind() {
    400004d8:	14000001 	b	400004dc <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E+0x1c>
    400004dc:	f94003e1 	ldr	x1, [sp]
    400004e0:	f94007e0 	ldr	x0, [sp, #8]
                precondition_check($($arg,)*);
    400004e4:	94000007 	bl	40000500 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E>
    400004e8:	14000001 	b	400004ec <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E+0x2c>
    400004ec:	f94007e1 	ldr	x1, [sp, #8]
    400004f0:	f94003e0 	ldr	x0, [sp]
    }
    400004f4:	f94013fe 	ldr	x30, [sp, #32]
    400004f8:	9100c3ff 	add	sp, sp, #0x30
    400004fc:	d65f03c0 	ret

0000000040000500 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E>:
            const fn precondition_check($($name:$ty),*) {
    40000500:	d10083ff 	sub	sp, sp, #0x20
    40000504:	f9000bfe 	str	x30, [sp, #16]
    40000508:	f90003e0 	str	x0, [sp]
    4000050c:	f90007e1 	str	x1, [sp, #8]
            ) => Layout::is_size_align_valid(size, align)
    40000510:	94002207 	bl	40008d2c <_ZN4core5alloc6layout6Layout19is_size_align_valid17h02649c7e20481f71E>
    40000514:	370000e0 	tbnz	w0, #0, 40000530 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E+0x30>
    40000518:	14000001 	b	4000051c <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E+0x1c>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    4000051c:	d503201f 	nop
    40000520:	1004a680 	adr	x0, 400099f0 <memcpy+0x218>
    40000524:	52802328 	mov	w8, #0x119                 	// #281
    40000528:	2a0803e1 	mov	w1, w8
    4000052c:	94001cfb 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40000530:	f9400bfe 	ldr	x30, [sp, #16]
    40000534:	910083ff 	add	sp, sp, #0x20
    40000538:	d65f03c0 	ret
    4000053c:	00000000 	udf	#0

0000000040000540 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E>:
    pub const fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {
    40000540:	d10303ff 	sub	sp, sp, #0xc0
    40000544:	f9005bfe 	str	x30, [sp, #176]
    40000548:	f90007e1 	str	x1, [sp, #8]
    4000054c:	f9000be8 	str	x8, [sp, #16]
    40000550:	f9003be0 	str	x0, [sp, #112]
    40000554:	f9003fe1 	str	x1, [sp, #120]
        let new_size = self.size_rounded_up_to_custom_align(self.align);
    40000558:	f9400008 	ldr	x8, [x0]
    4000055c:	f90043e8 	str	x8, [sp, #128]
    40000560:	f90033e8 	str	x8, [sp, #96]
    40000564:	f94033ea 	ldr	x10, [sp, #96]
            let size_rounded_up = unchecked_add(self.size, align_m1) & !align_m1;
    40000568:	f9400408 	ldr	x8, [x0, #8]
            let align_m1 = unchecked_sub(align.as_usize(), 1);
    4000056c:	8b080148 	add	x8, x10, x8
            let size_rounded_up = unchecked_add(self.size, align_m1) & !align_m1;
    40000570:	f1000508 	subs	x8, x8, #0x1
    40000574:	aa1f03e9 	mov	x9, xzr
    40000578:	eb0a0129 	subs	x9, x9, x10
    4000057c:	8a090108 	and	x8, x8, x9
    40000580:	aa0803e9 	mov	x9, x8
    40000584:	f9000fe9 	str	x9, [sp, #24]
    40000588:	f90047e8 	str	x8, [sp, #136]
        self.align.as_usize()
    4000058c:	f9400008 	ldr	x8, [x0]
    40000590:	f90037e8 	str	x8, [sp, #104]
    40000594:	f94037e8 	ldr	x8, [sp, #104]
    40000598:	aa0803e9 	mov	x9, x8
    4000059c:	f90013e9 	str	x9, [sp, #32]
    400005a0:	f9004be8 	str	x8, [sp, #144]
            if ::core::ub_checks::$kind() {
    400005a4:	14000001 	b	400005a8 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0x68>
    400005a8:	f94013e1 	ldr	x1, [sp, #32]
    400005ac:	f9400fe0 	ldr	x0, [sp, #24]
                precondition_check($($arg,)*);
    400005b0:	97ffffd4 	bl	40000500 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E>
    400005b4:	14000001 	b	400005b8 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0x78>
    400005b8:	f94007e1 	ldr	x1, [sp, #8]
    400005bc:	f94013e8 	ldr	x8, [sp, #32]
    400005c0:	f9400fe9 	ldr	x9, [sp, #24]
        unsafe { Layout { size, align: mem::transmute(align) } }
    400005c4:	f9001be9 	str	x9, [sp, #48]
    400005c8:	f90017e8 	str	x8, [sp, #40]
    400005cc:	9100a3e0 	add	x0, sp, #0x28
        if let Ok(repeated) = padded.repeat_packed(n) {
    400005d0:	97ffff7c 	bl	400003c0 <_ZN4core5alloc6layout6Layout13repeat_packed17h5cb7dc79281bce81E>
    400005d4:	f9001fe0 	str	x0, [sp, #56]
    400005d8:	f90023e1 	str	x1, [sp, #64]
    400005dc:	f9401fe8 	ldr	x8, [sp, #56]
    400005e0:	b50000c8 	cbnz	x8, 400005f8 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0xb8>
    400005e4:	14000001 	b	400005e8 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0xa8>
    400005e8:	f9400be9 	ldr	x9, [sp, #16]
    400005ec:	aa1f03e8 	mov	x8, xzr
            Err(LayoutError)
    400005f0:	f9000128 	str	x8, [x9]
        if let Ok(repeated) = padded.repeat_packed(n) {
    400005f4:	14000013 	b	40000640 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0x100>
    400005f8:	f9400be9 	ldr	x9, [sp, #16]
    400005fc:	f9400fe8 	ldr	x8, [sp, #24]
    40000600:	f9401feb 	ldr	x11, [sp, #56]
    40000604:	f94023ea 	ldr	x10, [sp, #64]
    40000608:	f9004feb 	str	x11, [sp, #152]
    4000060c:	f90053ea 	str	x10, [sp, #160]
    40000610:	9100a3ec 	add	x12, sp, #0x28
            Ok((repeated, padded.size()))
    40000614:	f90057ec 	str	x12, [sp, #168]
    40000618:	f90027eb 	str	x11, [sp, #72]
    4000061c:	f9002bea 	str	x10, [sp, #80]
    40000620:	f9002fe8 	str	x8, [sp, #88]
    40000624:	f94027e8 	ldr	x8, [sp, #72]
    40000628:	f9402bea 	ldr	x10, [sp, #80]
    4000062c:	f9402feb 	ldr	x11, [sp, #88]
    40000630:	f900092b 	str	x11, [x9, #16]
    40000634:	f900052a 	str	x10, [x9, #8]
    40000638:	f9000128 	str	x8, [x9]
        if let Ok(repeated) = padded.repeat_packed(n) {
    4000063c:	14000001 	b	40000640 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E+0x100>
    }
    40000640:	f9405bfe 	ldr	x30, [sp, #176]
    40000644:	910303ff 	add	sp, sp, #0xc0
    40000648:	d65f03c0 	ret
    4000064c:	00000000 	udf	#0

0000000040000650 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h6512c481b2ea7bccE>:
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
    40000650:	d10143ff 	sub	sp, sp, #0x50
    40000654:	f90023fe 	str	x30, [sp, #64]
    40000658:	f90013e1 	str	x1, [sp, #32]
    4000065c:	aa0003e8 	mov	x8, x0
    40000660:	f94013e0 	ldr	x0, [sp, #32]
    40000664:	f9001be8 	str	x8, [sp, #48]
    40000668:	f9001fe0 	str	x0, [sp, #56]
    size: usize,
    4000066c:	91002105 	add	x5, x8, #0x8
    align: Alignment,
    40000670:	f90017e8 	str	x8, [sp, #40]
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
    40000674:	d503201f 	nop
    40000678:	1004a5c8 	adr	x8, 40009b30 <memcpy+0x358>
    4000067c:	910003e9 	mov	x9, sp
    40000680:	f9000928 	str	x8, [x9, #16]
    40000684:	9100a3e8 	add	x8, sp, #0x28
    40000688:	f9000528 	str	x8, [x9, #8]
    4000068c:	528000a8 	mov	w8, #0x5                   	// #5
    40000690:	f9000128 	str	x8, [x9]
    40000694:	d503201f 	nop
    40000698:	1004a5c1 	adr	x1, 40009b50 <memcpy+0x378>
    4000069c:	d503201f 	nop
    400006a0:	5004a643 	adr	x3, 40009b6a <memcpy+0x392>
    400006a4:	d503201f 	nop
    400006a8:	1004a346 	adr	x6, 40009b10 <memcpy+0x338>
    400006ac:	d503201f 	nop
    400006b0:	5004a5e7 	adr	x7, 40009b6e <memcpy+0x396>
    400006b4:	528000c8 	mov	w8, #0x6                   	// #6
    400006b8:	2a0803e2 	mov	w2, w8
    400006bc:	52800088 	mov	w8, #0x4                   	// #4
    400006c0:	2a0803e4 	mov	w4, w8
    400006c4:	94002056 	bl	4000881c <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE>
    400006c8:	f94023fe 	ldr	x30, [sp, #64]
    400006cc:	910143ff 	add	sp, sp, #0x50
    400006d0:	d65f03c0 	ret
	...

00000000400006e0 <_ZN11arm_rstiny24uart4Uart4init17hc185fb65f8a637ddE>:
impl Uart {
    pub const fn new() -> Self {
        Self { base: UART_BASE }
    }

    pub fn init(&self) {
    400006e0:	d10043ff 	sub	sp, sp, #0x10
    400006e4:	f90007e0 	str	x0, [sp, #8]
        // UART 初始化 - 对于 QEMU virt 机器，通常不需要特殊初始化
        // 这里可以添加波特率设置等配置
    }
    400006e8:	910043ff 	add	sp, sp, #0x10
    400006ec:	d65f03c0 	ret

00000000400006f0 <_ZN11arm_rstiny24uart4Uart10write_byte17hd7c0bd59c6e2cc27E>:

    pub fn write_byte(&self, byte: u8) {
    400006f0:	d10083ff 	sub	sp, sp, #0x20
    400006f4:	f9000bfe 	str	x30, [sp, #16]
    400006f8:	f90003e0 	str	x0, [sp]
    400006fc:	39003fe1 	strb	w1, [sp, #15]
        unsafe {
            // 写入数据寄存器
            ptr::write_volatile(self.base as *mut u8, byte);
    40000700:	f9400000 	ldr	x0, [x0]
    40000704:	940008db 	bl	40002a70 <_ZN4core3ptr14write_volatile17h1b4d0e7a24267aecE>
        }
    }
    40000708:	f9400bfe 	ldr	x30, [sp, #16]
    4000070c:	910083ff 	add	sp, sp, #0x20
    40000710:	d65f03c0 	ret
	...

0000000040000720 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E>:

    pub fn uart_write_str(&self, s: &str) {
    40000720:	d10183ff 	sub	sp, sp, #0x60
    40000724:	f9002bfe 	str	x30, [sp, #80]
    40000728:	f90003e2 	str	x2, [sp]
    4000072c:	aa0103e8 	mov	x8, x1
    40000730:	f94003e1 	ldr	x1, [sp]
    40000734:	f90007e8 	str	x8, [sp, #8]
    40000738:	aa0003e8 	mov	x8, x0
    4000073c:	f94007e0 	ldr	x0, [sp, #8]
    40000740:	f9000be8 	str	x8, [sp, #16]
    40000744:	f9001be8 	str	x8, [sp, #48]
    40000748:	f9001fe0 	str	x0, [sp, #56]
    4000074c:	f90023e1 	str	x1, [sp, #64]
        for byte in s.bytes() {
    40000750:	94000540 	bl	40001c50 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h1b1f9e2425562112E>
    40000754:	940004db 	bl	40001ac0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heae4db5223ccb96fE>
    40000758:	f9000fe0 	str	x0, [sp, #24]
    4000075c:	f90013e1 	str	x1, [sp, #32]
    40000760:	14000001 	b	40000764 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E+0x44>
    40000764:	910063e0 	add	x0, sp, #0x18
    40000768:	940008d6 	bl	40002ac0 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E>
    4000076c:	12000008 	and	w8, w0, #0x1
    40000770:	3900bbe8 	strb	w8, [sp, #46]
    40000774:	3900bfe1 	strb	w1, [sp, #47]
    40000778:	3940bbe8 	ldrb	w8, [sp, #46]
    4000077c:	360000e8 	tbz	w8, #0, 40000798 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E+0x78>
    40000780:	14000001 	b	40000784 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E+0x64>
    40000784:	f9400be0 	ldr	x0, [sp, #16]
            self.write_byte(byte);
    40000788:	3940bfe1 	ldrb	w1, [sp, #47]
        for byte in s.bytes() {
    4000078c:	39013fe1 	strb	w1, [sp, #79]
            self.write_byte(byte);
    40000790:	97ffffd8 	bl	400006f0 <_ZN11arm_rstiny24uart4Uart10write_byte17hd7c0bd59c6e2cc27E>
    40000794:	17fffff4 	b	40000764 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E+0x44>
        }
    }
    40000798:	f9402bfe 	ldr	x30, [sp, #80]
    4000079c:	910183ff 	add	sp, sp, #0x60
    400007a0:	d65f03c0 	ret
	...

00000000400007b0 <_ZN60_$LT$arm_rstiny2..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17hfd5c9c9a94c7fd81E>:
}

impl fmt::Write for Uart {
    fn write_str(&mut self, s: &str) -> fmt::Result {
    400007b0:	d100c3ff 	sub	sp, sp, #0x30
    400007b4:	f90013fe 	str	x30, [sp, #32]
    400007b8:	f90007e0 	str	x0, [sp, #8]
    400007bc:	f9000be1 	str	x1, [sp, #16]
    400007c0:	f9000fe2 	str	x2, [sp, #24]
        self.uart_write_str(s);
    400007c4:	97ffffd7 	bl	40000720 <_ZN11arm_rstiny24uart4Uart14uart_write_str17hc2ee28ffb73baf26E>
    400007c8:	2a1f03e8 	mov	w8, wzr
        Ok(())
    400007cc:	39001fe8 	strb	w8, [sp, #7]
    }
    400007d0:	39401fe0 	ldrb	w0, [sp, #7]
    400007d4:	f94013fe 	ldr	x30, [sp, #32]
    400007d8:	9100c3ff 	add	sp, sp, #0x30
    400007dc:	d65f03c0 	ret

00000000400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>:
macro_rules! println {
    () => ($crate::print!("\n"));
    ($($arg:tt)*) => ($crate::print!("{}\n", format_args!($($arg)*)));
}

pub fn _print(args: fmt::Arguments) {
    400007e0:	d10183ff 	sub	sp, sp, #0x60
    400007e4:	f9002bfe 	str	x30, [sp, #80]
    400007e8:	aa0003e1 	mov	x1, x0
    400007ec:	52a12008 	mov	w8, #0x9000000             	// #150994944
    400007f0:	f90007e8 	str	x8, [sp, #8]
    use core::fmt::Write;
    let uart = unsafe { &mut *(UART_BASE as *mut Uart) };
    400007f4:	f9000be8 	str	x8, [sp, #16]
    400007f8:	52800608 	mov	w8, #0x30                  	// #48
    400007fc:	2a0803e2 	mov	w2, w8
    40000800:	910063e0 	add	x0, sp, #0x18
    40000804:	f90003e0 	str	x0, [sp]
    uart.write_fmt(args).unwrap();
    40000808:	940023f4 	bl	400097d8 <memcpy>
    4000080c:	f94003e1 	ldr	x1, [sp]
    40000810:	f94007e0 	ldr	x0, [sp, #8]
    40000814:	94000103 	bl	40000c20 <_ZN4core3fmt5Write9write_fmt17he22f1dfd5add76fbE>
    40000818:	39013be0 	strb	w0, [sp, #78]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T
    where
        E: fmt::Debug,
    {
        match self {
    4000081c:	39413be8 	ldrb	w8, [sp, #78]
    40000820:	36000188 	tbz	w8, #0, 40000850 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E+0x70>
    40000824:	14000001 	b	40000828 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E+0x48>
            Ok(t) => t,
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    40000828:	d503201f 	nop
    4000082c:	10049b60 	adr	x0, 40009b98 <memcpy+0x3c0>
    40000830:	d503201f 	nop
    40000834:	10049a23 	adr	x3, 40009b78 <memcpy+0x3a0>
    40000838:	d503201f 	nop
    4000083c:	10049d24 	adr	x4, 40009be0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x18>
    40000840:	52800568 	mov	w8, #0x2b                  	// #43
    40000844:	2a0803e1 	mov	w1, w8
    40000848:	91013fe2 	add	x2, sp, #0x4f
    4000084c:	94001ca6 	bl	40007ae4 <_ZN4core6result13unwrap_failed17hd6f48f9c0600905bE>
}
    40000850:	f9402bfe 	ldr	x30, [sp, #80]
    40000854:	910183ff 	add	sp, sp, #0x60
    40000858:	d65f03c0 	ret
    4000085c:	00000000 	udf	#0

0000000040000860 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h3dad46102c9e0ce0E>:
    #[inline]
    #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
    #[rustc_diagnostic_item = "vec_new"]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use]
    pub const fn new() -> Self {
    40000860:	aa0803e9 	mov	x9, x8
    40000864:	aa1f03e8 	mov	x8, xzr
        Vec { buf: RawVec::new(), len: 0 }
    40000868:	f9000128 	str	x8, [x9]
    4000086c:	5280010a 	mov	w10, #0x8                   	// #8
    40000870:	f900052a 	str	x10, [x9, #8]
    40000874:	f9000928 	str	x8, [x9, #16]
    }
    40000878:	d65f03c0 	ret
    4000087c:	00000000 	udf	#0

0000000040000880 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfa7bae84f21f6bd9E>:
    pub const fn new() -> Self {
    40000880:	aa0803e9 	mov	x9, x8
    40000884:	aa1f03e8 	mov	x8, xzr
        Vec { buf: RawVec::new(), len: 0 }
    40000888:	f9000128 	str	x8, [x9]
    4000088c:	5280008a 	mov	w10, #0x4                   	// #4
    40000890:	f900052a 	str	x10, [x9, #8]
    40000894:	f9000928 	str	x8, [x9, #16]
    }
    40000898:	d65f03c0 	ret
    4000089c:	00000000 	udf	#0

00000000400008a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7b0e2f1ebe5c11c7E>:
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_vec_string_slice", since = "CURRENT_RUSTC_VERSION")]
    #[rustc_confusables("length", "size")]
    pub const fn len(&self) -> usize {
    400008a0:	d10043ff 	sub	sp, sp, #0x10
    400008a4:	f90007e0 	str	x0, [sp, #8]
        let len = self.len;
    400008a8:	f9400800 	ldr	x0, [x0, #16]
        // be returned is `usize::checked_div(size_of::<T>()).unwrap_or(usize::MAX)`, which
        // matches the definition of `T::MAX_SLICE_LEN`.
        unsafe { intrinsics::assume(len <= T::MAX_SLICE_LEN) };

        len
    }
    400008ac:	910043ff 	add	sp, sp, #0x10
    400008b0:	d65f03c0 	ret
	...

00000000400008c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E>:
    pub fn push(&mut self, value: T) {
    400008c0:	d10203ff 	sub	sp, sp, #0x80
    400008c4:	f9003bfe 	str	x30, [sp, #112]
    400008c8:	f90003e2 	str	x2, [sp]
    400008cc:	b9000fe1 	str	w1, [sp, #12]
    400008d0:	f9000be0 	str	x0, [sp, #16]
    400008d4:	f90017e0 	str	x0, [sp, #40]
    400008d8:	b90037e1 	str	w1, [sp, #52]
        let len = self.len;
    400008dc:	f9400808 	ldr	x8, [x0, #16]
    400008e0:	aa0803e9 	mov	x9, x8
    400008e4:	f9000fe9 	str	x9, [sp, #24]
    400008e8:	f9001fe8 	str	x8, [sp, #56]
        if len == self.buf.capacity() {
    400008ec:	f90023e0 	str	x0, [sp, #64]
    /// Gets the capacity of the allocation.
    ///
    /// This will always be `usize::MAX` if `T` is zero-sized.
    #[inline]
    pub(crate) const fn capacity(&self) -> usize {
        self.inner.capacity(size_of::<T>())
    400008f0:	f90027e0 	str	x0, [sp, #72]
    400008f4:	52800088 	mov	w8, #0x4                   	// #4
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_mem_size_of", since = "1.24.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of")]
pub const fn size_of<T>() -> usize {
    intrinsics::size_of::<T>()
    400008f8:	f9002be8 	str	x8, [sp, #80]
        self.ptr.cast().as_non_null_ptr()
    }

    #[inline]
    const fn capacity(&self, elem_size: usize) -> usize {
        if elem_size == 0 { usize::MAX } else { self.cap.as_inner() }
    400008fc:	14000001 	b	40000900 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x40>
    40000900:	f9400be8 	ldr	x8, [sp, #16]
    40000904:	f9400108 	ldr	x8, [x8]
    40000908:	f9002fe8 	str	x8, [sp, #88]

            #[inline]
            pub const fn as_inner(self) -> $int {
                // SAFETY: This is a transparent wrapper, so unwrapping it is sound
                // (Not using `.0` due to MCP#807.)
                unsafe { crate::mem::transmute(self) }
    4000090c:	f90013e8 	str	x8, [sp, #32]
    40000910:	14000001 	b	40000914 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x54>
    40000914:	f9400fe8 	ldr	x8, [sp, #24]
    40000918:	f94013e9 	ldr	x9, [sp, #32]
    4000091c:	eb090108 	subs	x8, x8, x9
    40000920:	54000060 	b.eq	4000092c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x6c>  // b.none
    40000924:	14000001 	b	40000928 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x68>
    40000928:	14000005 	b	4000093c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x7c>
    4000092c:	f94003e1 	ldr	x1, [sp]
    40000930:	f9400be0 	ldr	x0, [sp, #16]
            self.buf.grow_one();
    40000934:	94000663 	bl	400022c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hd2b1f42881a82e74E>
        if len == self.buf.capacity() {
    40000938:	14000001 	b	4000093c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E+0x7c>
    4000093c:	f9400be9 	ldr	x9, [sp, #16]
    40000940:	f9400fe8 	ldr	x8, [sp, #24]
    40000944:	b9400fea 	ldr	w10, [sp, #12]
        self.ptr.cast().as_non_null_ptr()
    40000948:	f940052b 	ldr	x11, [x9, #8]
        // This is a transmute for the same reasons as `NonZero::get`.

        // SAFETY: `NonNull` is `transparent` over a `*const T`, and `*const T`
        // and `*mut T` have the same layout, so transitively we can transmute
        // our `NonNull` to a `*mut T` directly.
        unsafe { mem::transmute::<Self, *mut T>(self) }
    4000094c:	f90033eb 	str	x11, [sp, #96]
                size: usize = size_of::<T>(),
            ) => runtime_add_nowrap(this, count, size)
        );

        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { intrinsics::offset(self, count) }
    40000950:	8b08096c 	add	x12, x11, x8, lsl #2
    40000954:	f90037ec 	str	x12, [sp, #104]
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
        );
        intrinsics::write_via_move(dst, src)
    40000958:	b828796a 	str	w10, [x11, x8, lsl #2]
            self.len = len + 1;
    4000095c:	91000508 	add	x8, x8, #0x1
    40000960:	f9000928 	str	x8, [x9, #16]
    }
    40000964:	f9403bfe 	ldr	x30, [sp, #112]
    40000968:	910203ff 	add	sp, sp, #0x80
    4000096c:	d65f03c0 	ret

0000000040000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>:
    pub fn push(&mut self, value: T) {
    40000970:	d10243ff 	sub	sp, sp, #0x90
    40000974:	f90043fe 	str	x30, [sp, #128]
    40000978:	f90003e3 	str	x3, [sp]
    4000097c:	f90007e2 	str	x2, [sp, #8]
    40000980:	f9000be1 	str	x1, [sp, #16]
    40000984:	f9000fe0 	str	x0, [sp, #24]
    40000988:	f9001be0 	str	x0, [sp, #48]
    4000098c:	f9001fe1 	str	x1, [sp, #56]
    40000990:	f90023e2 	str	x2, [sp, #64]
        let len = self.len;
    40000994:	f9400808 	ldr	x8, [x0, #16]
    40000998:	aa0803e9 	mov	x9, x8
    4000099c:	f90013e9 	str	x9, [sp, #32]
    400009a0:	f90027e8 	str	x8, [sp, #72]
        if len == self.buf.capacity() {
    400009a4:	f9002be0 	str	x0, [sp, #80]
        self.inner.capacity(size_of::<T>())
    400009a8:	f9002fe0 	str	x0, [sp, #88]
    400009ac:	52800208 	mov	w8, #0x10                  	// #16
    400009b0:	f90033e8 	str	x8, [sp, #96]
        if elem_size == 0 { usize::MAX } else { self.cap.as_inner() }
    400009b4:	14000001 	b	400009b8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x48>
    400009b8:	f9400fe8 	ldr	x8, [sp, #24]
    400009bc:	f9400108 	ldr	x8, [x8]
    400009c0:	f90037e8 	str	x8, [sp, #104]
    400009c4:	f90017e8 	str	x8, [sp, #40]
    400009c8:	14000001 	b	400009cc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x5c>
    400009cc:	f94013e8 	ldr	x8, [sp, #32]
    400009d0:	f94017e9 	ldr	x9, [sp, #40]
    400009d4:	eb090108 	subs	x8, x8, x9
    400009d8:	54000060 	b.eq	400009e4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x74>  // b.none
    400009dc:	14000001 	b	400009e0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x70>
    400009e0:	14000005 	b	400009f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x84>
    400009e4:	f94003e1 	ldr	x1, [sp]
    400009e8:	f9400fe0 	ldr	x0, [sp, #24]
            self.buf.grow_one();
    400009ec:	94000615 	bl	40002240 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hbab775207bcf49d0E>
        if len == self.buf.capacity() {
    400009f0:	14000001 	b	400009f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E+0x84>
    400009f4:	f9400fe9 	ldr	x9, [sp, #24]
    400009f8:	f94013e8 	ldr	x8, [sp, #32]
    400009fc:	f94007ea 	ldr	x10, [sp, #8]
    40000a00:	f9400bec 	ldr	x12, [sp, #16]
        self.ptr.cast().as_non_null_ptr()
    40000a04:	f940052b 	ldr	x11, [x9, #8]
    40000a08:	f9003beb 	str	x11, [sp, #112]
    40000a0c:	8b08116b 	add	x11, x11, x8, lsl #4
    40000a10:	f9003feb 	str	x11, [sp, #120]
    40000a14:	f900016c 	str	x12, [x11]
    40000a18:	f900056a 	str	x10, [x11, #8]
            self.len = len + 1;
    40000a1c:	91000508 	add	x8, x8, #0x1
    40000a20:	f9000928 	str	x8, [x9, #16]
    }
    40000a24:	f94043fe 	ldr	x30, [sp, #128]
    40000a28:	910243ff 	add	sp, sp, #0x90
    40000a2c:	d65f03c0 	ret

0000000040000a30 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb784842f11e8b92eE>:
    pub const fn as_slice(&self) -> &[T] {
    40000a30:	d10103ff 	sub	sp, sp, #0x40
    40000a34:	f9001bfe 	str	x30, [sp, #48]
    40000a38:	f9000fe0 	str	x0, [sp, #24]
    40000a3c:	f9400408 	ldr	x8, [x0, #8]
    40000a40:	aa0803e1 	mov	x1, x8
    40000a44:	f90007e1 	str	x1, [sp, #8]
        self.buf.ptr()
    40000a48:	f90013e8 	str	x8, [sp, #32]
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    40000a4c:	f9400808 	ldr	x8, [x0, #16]
    40000a50:	aa0803e0 	mov	x0, x8
    40000a54:	f9000be0 	str	x0, [sp, #16]
    40000a58:	f90017e8 	str	x8, [sp, #40]
            if ::core::ub_checks::$kind() {
    40000a5c:	14000001 	b	40000a60 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb784842f11e8b92eE+0x30>
    40000a60:	f9400be3 	ldr	x3, [sp, #16]
    40000a64:	f94007e0 	ldr	x0, [sp, #8]
    40000a68:	52800088 	mov	w8, #0x4                   	// #4
    40000a6c:	2a0803e2 	mov	w2, w8
                precondition_check($($arg,)*);
    40000a70:	aa0203e1 	mov	x1, x2
    40000a74:	9400033b 	bl	40001760 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E>
            if ::core::ub_checks::$kind() {
    40000a78:	14000001 	b	40000a7c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb784842f11e8b92eE+0x4c>
    40000a7c:	f9400be1 	ldr	x1, [sp, #16]
    40000a80:	f94007e0 	ldr	x0, [sp, #8]
    }
    40000a84:	f9401bfe 	ldr	x30, [sp, #48]
    40000a88:	910103ff 	add	sp, sp, #0x40
    40000a8c:	d65f03c0 	ret

0000000040000a90 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hbb640cd70ffad33cE>:
    pub const fn as_slice(&self) -> &[T] {
    40000a90:	d10103ff 	sub	sp, sp, #0x40
    40000a94:	f9001bfe 	str	x30, [sp, #48]
    40000a98:	f9000fe0 	str	x0, [sp, #24]
    40000a9c:	f9400408 	ldr	x8, [x0, #8]
    40000aa0:	aa0803e1 	mov	x1, x8
    40000aa4:	f90007e1 	str	x1, [sp, #8]
        self.buf.ptr()
    40000aa8:	f90013e8 	str	x8, [sp, #32]
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    40000aac:	f9400808 	ldr	x8, [x0, #16]
    40000ab0:	aa0803e0 	mov	x0, x8
    40000ab4:	f9000be0 	str	x0, [sp, #16]
    40000ab8:	f90017e8 	str	x8, [sp, #40]
    40000abc:	14000001 	b	40000ac0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hbb640cd70ffad33cE+0x30>
    40000ac0:	f9400be3 	ldr	x3, [sp, #16]
    40000ac4:	f94007e0 	ldr	x0, [sp, #8]
    40000ac8:	52800208 	mov	w8, #0x10                  	// #16
    40000acc:	2a0803e1 	mov	w1, w8
    40000ad0:	52800108 	mov	w8, #0x8                   	// #8
    40000ad4:	2a0803e2 	mov	w2, w8
                precondition_check($($arg,)*);
    40000ad8:	94000322 	bl	40001760 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E>
            if ::core::ub_checks::$kind() {
    40000adc:	14000001 	b	40000ae0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hbb640cd70ffad33cE+0x50>
    40000ae0:	f9400be1 	ldr	x1, [sp, #16]
    40000ae4:	f94007e0 	ldr	x0, [sp, #8]
    }
    40000ae8:	f9401bfe 	ldr	x30, [sp, #48]
    40000aec:	910103ff 	add	sp, sp, #0x40
    40000af0:	d65f03c0 	ret
	...

0000000040000b00 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h7114c89257c9413fE>:
    pub const fn capacity(&self) -> usize {
    40000b00:	d10103ff 	sub	sp, sp, #0x40
    40000b04:	f90007e0 	str	x0, [sp, #8]
    40000b08:	f9000fe0 	str	x0, [sp, #24]
        self.buf.capacity()
    40000b0c:	f90013e0 	str	x0, [sp, #32]
        self.inner.capacity(size_of::<T>())
    40000b10:	f90017e0 	str	x0, [sp, #40]
    40000b14:	52800088 	mov	w8, #0x4                   	// #4
    40000b18:	f9001be8 	str	x8, [sp, #48]
        if elem_size == 0 { usize::MAX } else { self.cap.as_inner() }
    40000b1c:	14000001 	b	40000b20 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h7114c89257c9413fE+0x20>
    40000b20:	f94007e8 	ldr	x8, [sp, #8]
    40000b24:	f9400108 	ldr	x8, [x8]
    40000b28:	f9001fe8 	str	x8, [sp, #56]
    40000b2c:	f9000be8 	str	x8, [sp, #16]
    40000b30:	14000001 	b	40000b34 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h7114c89257c9413fE+0x34>
    }
    40000b34:	f9400be0 	ldr	x0, [sp, #16]
    40000b38:	910103ff 	add	sp, sp, #0x40
    40000b3c:	d65f03c0 	ret

0000000040000b40 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h17ec9a6e82161439E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<T, A: Allocator> ops::Deref for Vec<T, A> {
    type Target = [T];

    #[inline]
    fn deref(&self) -> &[T] {
    40000b40:	d10083ff 	sub	sp, sp, #0x20
    40000b44:	f9000bfe 	str	x30, [sp, #16]
    40000b48:	f90007e0 	str	x0, [sp, #8]
        self.as_slice()
    40000b4c:	97ffffd1 	bl	40000a90 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hbb640cd70ffad33cE>
    }
    40000b50:	f9400bfe 	ldr	x30, [sp, #16]
    40000b54:	910083ff 	add	sp, sp, #0x20
    40000b58:	d65f03c0 	ret
    40000b5c:	00000000 	udf	#0

0000000040000b60 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8b16e8458164c219E>:
    fn deref(&self) -> &[T] {
    40000b60:	d10083ff 	sub	sp, sp, #0x20
    40000b64:	f9000bfe 	str	x30, [sp, #16]
    40000b68:	f90007e0 	str	x0, [sp, #8]
        self.as_slice()
    40000b6c:	97ffffb1 	bl	40000a30 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8as_slice17hb784842f11e8b92eE>
    }
    40000b70:	f9400bfe 	ldr	x30, [sp, #16]
    40000b74:	910083ff 	add	sp, sp, #0x20
    40000b78:	d65f03c0 	ret
    40000b7c:	00000000 	udf	#0

0000000040000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>:
            const fn precondition_check($($name:$ty),*) {
    40000b80:	d10043ff 	sub	sp, sp, #0x10
    40000b84:	f90007e0 	str	x0, [sp, #8]
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
    40000b88:	b50000e0 	cbnz	x0, 40000ba4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE+0x24>
    40000b8c:	14000001 	b	40000b90 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE+0x10>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40000b90:	d503201f 	nop
    40000b94:	10048320 	adr	x0, 40009bf8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x30>
    40000b98:	52801a48 	mov	w8, #0xd2                  	// #210
    40000b9c:	2a0803e1 	mov	w1, w8
    40000ba0:	94001b5e 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40000ba4:	910043ff 	add	sp, sp, #0x10
    40000ba8:	d65f03c0 	ret
    40000bac:	00000000 	udf	#0

0000000040000bb0 <_ZN4core3fmt5Write10write_char17h9d2e2842b38ada48E>:
    fn write_char(&mut self, c: char) -> Result {
    40000bb0:	d10183ff 	sub	sp, sp, #0x60
    40000bb4:	f9002bfe 	str	x30, [sp, #80]
    40000bb8:	b90007e1 	str	w1, [sp, #4]
    40000bbc:	aa0003e8 	mov	x8, x0
    40000bc0:	b94007e0 	ldr	w0, [sp, #4]
    40000bc4:	f90007e8 	str	x8, [sp, #8]
    40000bc8:	f90013e8 	str	x8, [sp, #32]
    40000bcc:	b9002fe0 	str	w0, [sp, #44]
    40000bd0:	2a1f03e8 	mov	w8, wzr
        self.write_str(c.encode_utf8(&mut [0; MAX_LEN_UTF8]))
    40000bd4:	b9001fe8 	str	w8, [sp, #28]
    40000bd8:	910073e1 	add	x1, sp, #0x1c
    40000bdc:	f9001be1 	str	x1, [sp, #48]
    40000be0:	52800088 	mov	w8, #0x4                   	// #4
    40000be4:	2a0803e2 	mov	w2, w8
    40000be8:	f9001fe2 	str	x2, [sp, #56]
    #[stable(feature = "unicode_encode_char", since = "1.15.0")]
    #[rustc_const_stable(feature = "const_char_encode_utf8", since = "1.83.0")]
    #[inline]
    pub const fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
        // SAFETY: `char` is not a surrogate, so this is valid UTF-8.
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
    40000bec:	94000899 	bl	40002e50 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE>
    40000bf0:	aa0003e8 	mov	x8, x0
    40000bf4:	f94007e0 	ldr	x0, [sp, #8]
    40000bf8:	f9000be8 	str	x8, [sp, #16]
    40000bfc:	aa0103e2 	mov	x2, x1
    40000c00:	f9400be1 	ldr	x1, [sp, #16]
    40000c04:	f90023e1 	str	x1, [sp, #64]
    40000c08:	f90027e2 	str	x2, [sp, #72]
    40000c0c:	97fffee9 	bl	400007b0 <_ZN60_$LT$arm_rstiny2..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17hfd5c9c9a94c7fd81E>
    }
    40000c10:	f9402bfe 	ldr	x30, [sp, #80]
    40000c14:	910183ff 	add	sp, sp, #0x60
    40000c18:	d65f03c0 	ret
    40000c1c:	00000000 	udf	#0

0000000040000c20 <_ZN4core3fmt5Write9write_fmt17he22f1dfd5add76fbE>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
    40000c20:	d10083ff 	sub	sp, sp, #0x20
    40000c24:	f9000bfe 	str	x30, [sp, #16]
    40000c28:	f90007e0 	str	x0, [sp, #8]
        self.spec_write_fmt(args)
    40000c2c:	94000005 	bl	40000c40 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E>
    }
    40000c30:	f9400bfe 	ldr	x30, [sp, #16]
    40000c34:	910083ff 	add	sp, sp, #0x20
    40000c38:	d65f03c0 	ret
    40000c3c:	00000000 	udf	#0

0000000040000c40 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E>:
            fn spec_write_fmt(self, args: Arguments<'_>) -> Result {
    40000c40:	d10343ff 	sub	sp, sp, #0xd0
    40000c44:	f90063fe 	str	x30, [sp, #192]
    40000c48:	f90007e1 	str	x1, [sp, #8]
    40000c4c:	f9000be0 	str	x0, [sp, #16]
    40000c50:	f9002fe0 	str	x0, [sp, #88]
                if let Some(s) = args.as_statically_known_str() {
    40000c54:	f90033e1 	str	x1, [sp, #96]
        match (self.pieces, self.args) {
    40000c58:	f9400028 	ldr	x8, [x1]
    40000c5c:	f9000fe8 	str	x8, [sp, #24]
    40000c60:	f9400428 	ldr	x8, [x1, #8]
    40000c64:	aa0803e9 	mov	x9, x8
    40000c68:	f90013e9 	str	x9, [sp, #32]
    40000c6c:	f9400c29 	ldr	x9, [x1, #24]
    40000c70:	f90017e9 	str	x9, [sp, #40]
            ([], []) => Some(""),
    40000c74:	b50000a8 	cbnz	x8, 40000c88 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x48>
    40000c78:	14000001 	b	40000c7c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x3c>
    40000c7c:	f94017e8 	ldr	x8, [sp, #40]
    40000c80:	b40000c8 	cbz	x8, 40000c98 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x58>
    40000c84:	1400000a 	b	40000cac <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x6c>
    40000c88:	f94013e8 	ldr	x8, [sp, #32]
            ([s], []) => Some(s),
    40000c8c:	f1000508 	subs	x8, x8, #0x1
    40000c90:	540002a0 	b.eq	40000ce4 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xa4>  // b.none
    40000c94:	14000006 	b	40000cac <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x6c>
    40000c98:	52800028 	mov	w8, #0x1                   	// #1
            ([], []) => Some(""),
    40000c9c:	f90027e8 	str	x8, [sp, #72]
    40000ca0:	aa1f03e8 	mov	x8, xzr
    40000ca4:	f9002be8 	str	x8, [sp, #80]
    40000ca8:	14000008 	b	40000cc8 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x88>
            _ => None,
    40000cac:	d503201f 	nop
    40000cb0:	10046908 	adr	x8, 400099d0 <memcpy+0x1f8>
    40000cb4:	f9400109 	ldr	x9, [x8]
    40000cb8:	f9400508 	ldr	x8, [x8, #8]
    40000cbc:	f90027e9 	str	x9, [sp, #72]
    40000cc0:	f9002be8 	str	x8, [sp, #80]
    40000cc4:	14000001 	b	40000cc8 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x88>
    40000cc8:	910123e8 	add	x8, sp, #0x48
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
    40000ccc:	f9003be8 	str	x8, [sp, #112]
    40000cd0:	2a1f03e8 	mov	w8, wzr
    40000cd4:	3901ffe8 	strb	w8, [sp, #127]
    40000cd8:	3941ffe8 	ldrb	w8, [sp, #127]
    40000cdc:	370001a8 	tbnz	w8, #0, 40000d10 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xd0>
    40000ce0:	1400000b 	b	40000d0c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xcc>
    40000ce4:	f94017e8 	ldr	x8, [sp, #40]
            ([s], []) => Some(s),
    40000ce8:	b5fffe28 	cbnz	x8, 40000cac <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x6c>
    40000cec:	14000001 	b	40000cf0 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xb0>
    40000cf0:	f9400fe8 	ldr	x8, [sp, #24]
    40000cf4:	f90037e8 	str	x8, [sp, #104]
    40000cf8:	f9400109 	ldr	x9, [x8]
    40000cfc:	f9400508 	ldr	x8, [x8, #8]
    40000d00:	f90027e9 	str	x9, [sp, #72]
    40000d04:	f9002be8 	str	x8, [sp, #80]
    40000d08:	17fffff0 	b	40000cc8 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x88>
                if let Some(s) = args.as_statically_known_str() {
    40000d0c:	14000008 	b	40000d2c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xec>
        if core::intrinsics::is_val_statically_known(s.is_some()) { s } else { None }
    40000d10:	f94027e9 	ldr	x9, [sp, #72]
    40000d14:	f9402be8 	ldr	x8, [sp, #80]
    40000d18:	f9001fe9 	str	x9, [sp, #56]
    40000d1c:	f90023e8 	str	x8, [sp, #64]
                if let Some(s) = args.as_statically_known_str() {
    40000d20:	f9401fe8 	ldr	x8, [sp, #56]
    40000d24:	b50001e8 	cbnz	x8, 40000d60 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x120>
    40000d28:	14000001 	b	40000d2c <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0xec>
    40000d2c:	f94007e1 	ldr	x1, [sp, #8]
    40000d30:	52800608 	mov	w8, #0x30                  	// #48
    40000d34:	2a0803e2 	mov	w2, w8
    40000d38:	910243e0 	add	x0, sp, #0x90
    40000d3c:	f90003e0 	str	x0, [sp]
                    write(self, args)
    40000d40:	940022a6 	bl	400097d8 <memcpy>
    40000d44:	f94003e2 	ldr	x2, [sp]
    40000d48:	f9400be0 	ldr	x0, [sp, #16]
    40000d4c:	d503201f 	nop
    40000d50:	10047c01 	adr	x1, 40009cd0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x108>
    40000d54:	94001ca8 	bl	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>
    40000d58:	3900dfe0 	strb	w0, [sp, #55]
                if let Some(s) = args.as_statically_known_str() {
    40000d5c:	14000009 	b	40000d80 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x140>
    40000d60:	f9400be0 	ldr	x0, [sp, #16]
    40000d64:	f9401fe1 	ldr	x1, [sp, #56]
    40000d68:	f94023e2 	ldr	x2, [sp, #64]
    40000d6c:	f90043e1 	str	x1, [sp, #128]
    40000d70:	f90047e2 	str	x2, [sp, #136]
                    self.write_str(s)
    40000d74:	97fffe8f 	bl	400007b0 <_ZN60_$LT$arm_rstiny2..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17hfd5c9c9a94c7fd81E>
    40000d78:	3900dfe0 	strb	w0, [sp, #55]
    40000d7c:	14000001 	b	40000d80 <_ZN75_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write..write_fmt..SpecWriteFmt$GT$14spec_write_fmt17h8d3ce2fd42072ac8E+0x140>
            }
    40000d80:	3940dfe0 	ldrb	w0, [sp, #55]
    40000d84:	f94063fe 	ldr	x30, [sp, #192]
    40000d88:	910343ff 	add	sp, sp, #0xd0
    40000d8c:	d65f03c0 	ret

0000000040000d90 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17hd3052d79ce8b622eE>:
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    40000d90:	d100c3ff 	sub	sp, sp, #0x30
    40000d94:	f90013fe 	str	x30, [sp, #32]
    40000d98:	f90007e1 	str	x1, [sp, #8]
    40000d9c:	aa0003e8 	mov	x8, x0
    40000da0:	f94007e0 	ldr	x0, [sp, #8]
    40000da4:	f9000be8 	str	x8, [sp, #16]
    40000da8:	f9000fe0 	str	x0, [sp, #24]
    40000dac:	d503201f 	nop
    40000db0:	10047a81 	adr	x1, 40009d00 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x138>
    40000db4:	528000a8 	mov	w8, #0x5                   	// #5
    40000db8:	2a0803e2 	mov	w2, w8
    40000dbc:	94001e92 	bl	40008804 <_ZN4core3fmt9Formatter9write_str17h38ea1b56a7d26f23E>
    40000dc0:	f94013fe 	ldr	x30, [sp, #32]
    40000dc4:	9100c3ff 	add	sp, sp, #0x30
    40000dc8:	d65f03c0 	ret
    40000dcc:	00000000 	udf	#0

0000000040000dd0 <_ZN4core3fmt2rt8Argument11new_display17h155d492ec1f64f4eE>:
            },
        }
    }

    #[inline]
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    40000dd0:	d10083ff 	sub	sp, sp, #0x20
    40000dd4:	aa0803e9 	mov	x9, x8
    40000dd8:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000ddc:	f90007e0 	str	x0, [sp, #8]
    40000de0:	d503201f 	nop
    40000de4:	10042468 	adr	x8, 40009270 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b2bf2790a30e268E>
    40000de8:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000dec:	f94007e8 	ldr	x8, [sp, #8]
    40000df0:	f9400bea 	ldr	x10, [sp, #16]
    40000df4:	f900052a 	str	x10, [x9, #8]
    40000df8:	f9000128 	str	x8, [x9]
        Self::new(x, Display::fmt)
    }
    40000dfc:	910083ff 	add	sp, sp, #0x20
    40000e00:	d65f03c0 	ret
	...

0000000040000e10 <_ZN4core3fmt2rt8Argument11new_display17h4e06f4f1166cd372E>:
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    40000e10:	d10083ff 	sub	sp, sp, #0x20
    40000e14:	aa0803e9 	mov	x9, x8
    40000e18:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000e1c:	f90007e0 	str	x0, [sp, #8]
    40000e20:	d503201f 	nop
    40000e24:	10ffa0e8 	adr	x8, 40000240 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hac3ca38dad9be622E>
    40000e28:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000e2c:	f94007e8 	ldr	x8, [sp, #8]
    40000e30:	f9400bea 	ldr	x10, [sp, #16]
    40000e34:	f900052a 	str	x10, [x9, #8]
    40000e38:	f9000128 	str	x8, [x9]
    }
    40000e3c:	910083ff 	add	sp, sp, #0x20
    40000e40:	d65f03c0 	ret
	...

0000000040000e50 <_ZN4core3fmt2rt8Argument11new_display17h621b8b9a52bf4e15E>:
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    40000e50:	d10083ff 	sub	sp, sp, #0x20
    40000e54:	aa0803e9 	mov	x9, x8
    40000e58:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000e5c:	f90007e0 	str	x0, [sp, #8]
    40000e60:	d503201f 	nop
    40000e64:	10ffa068 	adr	x8, 40000270 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hd668e76718adaff2E>
    40000e68:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000e6c:	f94007e8 	ldr	x8, [sp, #8]
    40000e70:	f9400bea 	ldr	x10, [sp, #16]
    40000e74:	f900052a 	str	x10, [x9, #8]
    40000e78:	f9000128 	str	x8, [x9]
    }
    40000e7c:	910083ff 	add	sp, sp, #0x20
    40000e80:	d65f03c0 	ret
	...

0000000040000e90 <_ZN4core3fmt2rt8Argument11new_display17hf7c428fa25b9e26aE>:
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    40000e90:	d10083ff 	sub	sp, sp, #0x20
    40000e94:	aa0803e9 	mov	x9, x8
    40000e98:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000e9c:	f90007e0 	str	x0, [sp, #8]
    40000ea0:	d503201f 	nop
    40000ea4:	10000568 	adr	x8, 40000f50 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h46dbfb8a7b597c8cE>
    40000ea8:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000eac:	f94007e8 	ldr	x8, [sp, #8]
    40000eb0:	f9400bea 	ldr	x10, [sp, #16]
    40000eb4:	f900052a 	str	x10, [x9, #8]
    40000eb8:	f9000128 	str	x8, [x9]
    }
    40000ebc:	910083ff 	add	sp, sp, #0x20
    40000ec0:	d65f03c0 	ret
	...

0000000040000ed0 <_ZN4core3fmt2rt8Argument13new_lower_hex17h4b141567be405c84E>:
    #[inline]
    pub fn new_octal<T: Octal>(x: &T) -> Argument<'_> {
        Self::new(x, Octal::fmt)
    }
    #[inline]
    pub fn new_lower_hex<T: LowerHex>(x: &T) -> Argument<'_> {
    40000ed0:	d10083ff 	sub	sp, sp, #0x20
    40000ed4:	aa0803e9 	mov	x9, x8
    40000ed8:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000edc:	f90007e0 	str	x0, [sp, #8]
    40000ee0:	d503201f 	nop
    40000ee4:	10040c48 	adr	x8, 4000906c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17hd274927b8a819bfbE>
    40000ee8:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000eec:	f94007e8 	ldr	x8, [sp, #8]
    40000ef0:	f9400bea 	ldr	x10, [sp, #16]
    40000ef4:	f900052a 	str	x10, [x9, #8]
    40000ef8:	f9000128 	str	x8, [x9]
        Self::new(x, LowerHex::fmt)
    }
    40000efc:	910083ff 	add	sp, sp, #0x20
    40000f00:	d65f03c0 	ret
	...

0000000040000f10 <_ZN4core3fmt2rt8Argument9new_debug17had42e92395b2adbfE>:
    pub fn new_debug<T: Debug>(x: &T) -> Argument<'_> {
    40000f10:	d10083ff 	sub	sp, sp, #0x20
    40000f14:	aa0803e9 	mov	x9, x8
    40000f18:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40000f1c:	f90007e0 	str	x0, [sp, #8]
    40000f20:	d503201f 	nop
    40000f24:	10ffb968 	adr	x8, 40000650 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h6512c481b2ea7bccE>
    40000f28:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40000f2c:	f94007e8 	ldr	x8, [sp, #8]
    40000f30:	f9400bea 	ldr	x10, [sp, #16]
    40000f34:	f900052a 	str	x10, [x9, #8]
    40000f38:	f9000128 	str	x8, [x9]
    }
    40000f3c:	910083ff 	add	sp, sp, #0x20
    40000f40:	d65f03c0 	ret
	...

0000000040000f50 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h46dbfb8a7b597c8cE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    40000f50:	d10083ff 	sub	sp, sp, #0x20
    40000f54:	f9000bfe 	str	x30, [sp, #16]
    40000f58:	f90003e0 	str	x0, [sp]
    40000f5c:	f90007e1 	str	x1, [sp, #8]
    40000f60:	f9400000 	ldr	x0, [x0]
    40000f64:	940019fe 	bl	4000775c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE>
    40000f68:	f9400bfe 	ldr	x30, [sp, #16]
    40000f6c:	910083ff 	add	sp, sp, #0x20
    40000f70:	d65f03c0 	ret
	...

0000000040000f80 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E>:
            const fn precondition_check($($name:$ty),*) {
    40000f80:	d10203ff 	sub	sp, sp, #0x80
    40000f84:	f9000be1 	str	x1, [sp, #16]
    40000f88:	f9000fe0 	str	x0, [sp, #24]
    40000f8c:	2a0203e8 	mov	w8, w2
    40000f90:	b90027e8 	str	w8, [sp, #36]
    40000f94:	f9002fe0 	str	x0, [sp, #88]
    40000f98:	f90033e1 	str	x1, [sp, #96]
    40000f9c:	3901bfe2 	strb	w2, [sp, #111]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40000fa0:	d503201f 	nop
    40000fa4:	10046c68 	adr	x8, 40009d30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x168>
    40000fa8:	f9003be8 	str	x8, [sp, #112]
            return intrinsics::ctpop(self);
    40000fac:	d341fc28 	lsr	x8, x1, #1
    40000fb0:	9200f108 	and	x8, x8, #0x5555555555555555
    40000fb4:	eb080029 	subs	x9, x1, x8
    40000fb8:	9200e528 	and	x8, x9, #0x3333333333333333
    40000fbc:	d342fd29 	lsr	x9, x9, #2
    40000fc0:	9200e529 	and	x9, x9, #0x3333333333333333
    40000fc4:	8b090108 	add	x8, x8, x9
    40000fc8:	8b481108 	add	x8, x8, x8, lsr #4
    40000fcc:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40000fd0:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40000fd4:	9b097d08 	mul	x8, x8, x9
    40000fd8:	d378fd08 	lsr	x8, x8, #56
    40000fdc:	b9007fe8 	str	w8, [sp, #124]
    40000fe0:	b9407fe8 	ldr	w8, [sp, #124]
    /// ```
    #[must_use]
    #[inline]
    #[unstable(feature = "pointer_is_aligned_to", issue = "96284")]
    pub fn is_aligned_to(self, align: usize) -> bool {
        if !align.is_power_of_two() {
    40000fe4:	71000508 	subs	w8, w8, #0x1
    40000fe8:	54000141 	b.ne	40001010 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0x90>  // b.any
    40000fec:	14000001 	b	40000ff0 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0x70>
    40000ff0:	f9400fe8 	ldr	x8, [sp, #24]
    40000ff4:	f9400be9 	ldr	x9, [sp, #16]
        unsafe { mem::transmute(self.cast::<()>()) }
    40000ff8:	aa0803ea 	mov	x10, x8
    40000ffc:	f90007ea 	str	x10, [sp, #8]
            panic!("is_aligned_to: align is not a power-of-two");
        }

        self.addr() & (align - 1) == 0
    40001000:	f1000529 	subs	x9, x9, #0x1
    40001004:	8a090108 	and	x8, x8, x9
    const_eval_select!(
        @capture { ptr: *const (), align: usize, is_zst: bool } -> bool:
        if const {
            is_zst || !ptr.is_null()
        } else {
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    40001008:	b40002a8 	cbz	x8, 4000105c <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xdc>
    4000100c:	14000017 	b	40001068 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xe8>
        Arguments { pieces, fmt: None, args: &[] }
    40001010:	d503201f 	nop
    40001014:	100468e8 	adr	x8, 40009d30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x168>
    40001018:	f90017e8 	str	x8, [sp, #40]
    4000101c:	52800028 	mov	w8, #0x1                   	// #1
    40001020:	f9001be8 	str	x8, [sp, #48]
    40001024:	d503201f 	nop
    40001028:	10044d48 	adr	x8, 400099d0 <memcpy+0x1f8>
    4000102c:	f9400109 	ldr	x9, [x8]
    40001030:	f9400508 	ldr	x8, [x8, #8]
    40001034:	f90027e9 	str	x9, [sp, #72]
    40001038:	f9002be8 	str	x8, [sp, #80]
    4000103c:	52800108 	mov	w8, #0x8                   	// #8
    40001040:	f9001fe8 	str	x8, [sp, #56]
    40001044:	aa1f03e8 	mov	x8, xzr
    40001048:	f90023e8 	str	x8, [sp, #64]
            panic!("is_aligned_to: align is not a power-of-two");
    4000104c:	d503201f 	nop
    40001050:	10047281 	adr	x1, 40009ea0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2d8>
    40001054:	9100a3e0 	add	x0, sp, #0x28
    40001058:	94001a0a 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    4000105c:	b94027e8 	ldr	w8, [sp, #36]
    40001060:	370000c8 	tbnz	w8, #0, 40001078 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xf8>
    40001064:	14000002 	b	4000106c <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xec>
            "ptr::write_bytes requires that the destination pointer is aligned and non-null",
            (
                addr: *const () = dst as *const (),
                align: usize = align_of::<T>(),
                zero_size: bool = T::IS_ZST || count == 0,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, zero_size)
    40001068:	14000005 	b	4000107c <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xfc>
    4000106c:	f94007e8 	ldr	x8, [sp, #8]
    40001070:	b5000108 	cbnz	x8, 40001090 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0x110>
    40001074:	14000002 	b	4000107c <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0xfc>
    40001078:	14000006 	b	40001090 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E+0x110>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    4000107c:	d503201f 	nop
    40001080:	10046600 	adr	x0, 40009d40 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x178>
    40001084:	52801c88 	mov	w8, #0xe4                  	// #228
    40001088:	2a0803e1 	mov	w1, w8
    4000108c:	94001a23 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40001090:	910203ff 	add	sp, sp, #0x80
    40001094:	d65f03c0 	ret
	...

00000000400010a0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE>:
            const fn precondition_check($($name:$ty),*) {
    400010a0:	d104c3ff 	sub	sp, sp, #0x130
    400010a4:	a9127bfd 	stp	x29, x30, [sp, #288]
    400010a8:	9102a3e9 	add	x9, sp, #0xa8
    400010ac:	f9000be9 	str	x9, [sp, #16]
    400010b0:	f9000fe4 	str	x4, [sp, #24]
    400010b4:	f90013e3 	str	x3, [sp, #32]
    400010b8:	f90017e2 	str	x2, [sp, #40]
    400010bc:	f9001be1 	str	x1, [sp, #48]
    400010c0:	f9001fe0 	str	x0, [sp, #56]
    400010c4:	f9001920 	str	x0, [x9, #48]
    400010c8:	f9001d21 	str	x1, [x9, #56]
    400010cc:	f9002122 	str	x2, [x9, #64]
    400010d0:	f9002523 	str	x3, [x9, #72]
    400010d4:	f9002924 	str	x4, [x9, #80]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    400010d8:	d503201f 	nop
    400010dc:	100462a8 	adr	x8, 40009d30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x168>
    400010e0:	f9002d28 	str	x8, [x9, #88]
    400010e4:	f9003128 	str	x8, [x9, #96]
            let zero_size = count == 0 || size == 0;
    400010e8:	b5000324 	cbnz	x4, 4000114c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0xac>
    400010ec:	14000001 	b	400010f0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x50>
    400010f0:	f94013e8 	ldr	x8, [sp, #32]
    400010f4:	52800029 	mov	w9, #0x1                   	// #1
    400010f8:	39011fe9 	strb	w9, [sp, #71]
            ub_checks::maybe_is_aligned_and_not_null(src, align, zero_size)
    400010fc:	f90027e8 	str	x8, [sp, #72]
    40001100:	39411fe9 	ldrb	w9, [sp, #71]
    40001104:	39015fe9 	strb	w9, [sp, #87]
    40001108:	d341fd09 	lsr	x9, x8, #1
    4000110c:	9200f129 	and	x9, x9, #0x5555555555555555
    40001110:	eb090109 	subs	x9, x8, x9
    40001114:	9200e528 	and	x8, x9, #0x3333333333333333
    40001118:	d342fd29 	lsr	x9, x9, #2
    4000111c:	9200e529 	and	x9, x9, #0x3333333333333333
    40001120:	8b090108 	add	x8, x8, x9
    40001124:	8b481108 	add	x8, x8, x8, lsr #4
    40001128:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    4000112c:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40001130:	9b097d08 	mul	x8, x8, x9
    40001134:	d378fd08 	lsr	x8, x8, #56
    40001138:	b900a7e8 	str	w8, [sp, #164]
        if !align.is_power_of_two() {
    4000113c:	b940a7e8 	ldr	w8, [sp, #164]
    40001140:	71000508 	subs	w8, w8, #0x1
    40001144:	54000360 	b.eq	400011b0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x110>  // b.none
    40001148:	14000026 	b	400011e0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x140>
    4000114c:	f94013e8 	ldr	x8, [sp, #32]
    40001150:	f94017e9 	ldr	x9, [sp, #40]
            let zero_size = count == 0 || size == 0;
    40001154:	f1000129 	subs	x9, x9, #0x0
    40001158:	1a9f17e9 	cset	w9, eq	// eq = none
    4000115c:	39011fe9 	strb	w9, [sp, #71]
            ub_checks::maybe_is_aligned_and_not_null(src, align, zero_size)
    40001160:	f90027e8 	str	x8, [sp, #72]
    40001164:	39411fe9 	ldrb	w9, [sp, #71]
    40001168:	39015fe9 	strb	w9, [sp, #87]
    4000116c:	d341fd09 	lsr	x9, x8, #1
    40001170:	9200f129 	and	x9, x9, #0x5555555555555555
    40001174:	eb090109 	subs	x9, x8, x9
    40001178:	9200e528 	and	x8, x9, #0x3333333333333333
    4000117c:	d342fd29 	lsr	x9, x9, #2
    40001180:	9200e529 	and	x9, x9, #0x3333333333333333
    40001184:	8b090108 	add	x8, x8, x9
    40001188:	8b481108 	add	x8, x8, x8, lsr #4
    4000118c:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40001190:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40001194:	9b097d08 	mul	x8, x8, x9
    40001198:	d378fd08 	lsr	x8, x8, #56
    4000119c:	b900a7e8 	str	w8, [sp, #164]
    400011a0:	b940a7e8 	ldr	w8, [sp, #164]
    400011a4:	71000508 	subs	w8, w8, #0x1
    400011a8:	54000480 	b.eq	40001238 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x198>  // b.none
    400011ac:	1400000d 	b	400011e0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x140>
    400011b0:	f94013e8 	ldr	x8, [sp, #32]
    400011b4:	f9401fe9 	ldr	x9, [sp, #56]
        unsafe { mem::transmute(self.cast::<()>()) }
    400011b8:	f9004be9 	str	x9, [sp, #144]
        self.addr() & (align - 1) == 0
    400011bc:	f1000508 	subs	x8, x8, #0x1
    400011c0:	f9004fe8 	str	x8, [sp, #152]
    400011c4:	f9404be8 	ldr	x8, [sp, #144]
    400011c8:	f9404fe9 	ldr	x9, [sp, #152]
    400011cc:	8a090108 	and	x8, x8, x9
    400011d0:	f90047e8 	str	x8, [sp, #136]
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    400011d4:	f94047e8 	ldr	x8, [sp, #136]
    400011d8:	b40002a8 	cbz	x8, 4000122c <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x18c>
    400011dc:	14000015 	b	40001230 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x190>
        Arguments { pieces, fmt: None, args: &[] }
    400011e0:	d503201f 	nop
    400011e4:	10045a68 	adr	x8, 40009d30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x168>
    400011e8:	f9002fe8 	str	x8, [sp, #88]
    400011ec:	52800028 	mov	w8, #0x1                   	// #1
    400011f0:	f90033e8 	str	x8, [sp, #96]
    400011f4:	d503201f 	nop
    400011f8:	10043ec8 	adr	x8, 400099d0 <memcpy+0x1f8>
    400011fc:	f9400109 	ldr	x9, [x8]
    40001200:	f9400508 	ldr	x8, [x8, #8]
    40001204:	f9003fe9 	str	x9, [sp, #120]
    40001208:	f90043e8 	str	x8, [sp, #128]
    4000120c:	52800108 	mov	w8, #0x8                   	// #8
    40001210:	f90037e8 	str	x8, [sp, #104]
    40001214:	aa1f03e8 	mov	x8, xzr
    40001218:	f9003be8 	str	x8, [sp, #112]
            panic!("is_aligned_to: align is not a power-of-two");
    4000121c:	d503201f 	nop
    40001220:	10046401 	adr	x1, 40009ea0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2d8>
    40001224:	910163e0 	add	x0, sp, #0x58
    40001228:	94001996 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    4000122c:	14000002 	b	40001234 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x194>
    40001230:	14000014 	b	40001280 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1e0>
    40001234:	14000014 	b	40001284 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1e4>
    40001238:	f94013e8 	ldr	x8, [sp, #32]
    4000123c:	f9401fe9 	ldr	x9, [sp, #56]
        unsafe { mem::transmute(self.cast::<()>()) }
    40001240:	f9004be9 	str	x9, [sp, #144]
        self.addr() & (align - 1) == 0
    40001244:	f1000508 	subs	x8, x8, #0x1
    40001248:	f9004fe8 	str	x8, [sp, #152]
    4000124c:	f9404be8 	ldr	x8, [sp, #144]
    40001250:	f9404fe9 	ldr	x9, [sp, #152]
    40001254:	8a090108 	and	x8, x8, x9
    40001258:	f90047e8 	str	x8, [sp, #136]
    4000125c:	f94047e8 	ldr	x8, [sp, #136]
    40001260:	b5fffe88 	cbnz	x8, 40001230 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x190>
    40001264:	14000001 	b	40001268 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1c8>
    40001268:	39415fe8 	ldrb	w8, [sp, #87]
    4000126c:	3707fe48 	tbnz	w8, #0, 40001234 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x194>
    40001270:	14000001 	b	40001274 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1d4>
                ptr.addr() == 0
    40001274:	f9404be8 	ldr	x8, [sp, #144]
    40001278:	b5000068 	cbnz	x8, 40001284 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1e4>
    4000127c:	14000001 	b	40001280 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x1e0>
    40001280:	1400004d 	b	400013b4 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x314>
    40001284:	f9400be8 	ldr	x8, [sp, #16]
    40001288:	f94013e9 	ldr	x9, [sp, #32]
    4000128c:	f9401bea 	ldr	x10, [sp, #48]
                && ub_checks::maybe_is_aligned_and_not_null(dst, align, zero_size)
    40001290:	f900350a 	str	x10, [x8, #104]
    40001294:	39411fea 	ldrb	w10, [sp, #71]
    40001298:	2a0a03eb 	mov	w11, w10
    4000129c:	b9000feb 	str	w11, [sp, #12]
    400012a0:	39046fea 	strb	w10, [sp, #283]
    400012a4:	d341fd2a 	lsr	x10, x9, #1
    400012a8:	9200f14a 	and	x10, x10, #0x5555555555555555
    400012ac:	eb0a012a 	subs	x10, x9, x10
    400012b0:	9200e549 	and	x9, x10, #0x3333333333333333
    400012b4:	d342fd4a 	lsr	x10, x10, #2
    400012b8:	9200e54a 	and	x10, x10, #0x3333333333333333
    400012bc:	8b0a0129 	add	x9, x9, x10
    400012c0:	8b491129 	add	x9, x9, x9, lsr #4
    400012c4:	9200cd29 	and	x9, x9, #0xf0f0f0f0f0f0f0f
    400012c8:	b200c3ea 	mov	x10, #0x101010101010101     	// #72340172838076673
    400012cc:	9b0a7d29 	mul	x9, x9, x10
    400012d0:	d378fd29 	lsr	x9, x9, #56
    400012d4:	b9007509 	str	w9, [x8, #116]
    400012d8:	b9407508 	ldr	w8, [x8, #116]
        if !align.is_power_of_two() {
    400012dc:	71000508 	subs	w8, w8, #0x1
    400012e0:	54000121 	b.ne	40001304 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x264>  // b.any
    400012e4:	14000001 	b	400012e8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x248>
    400012e8:	f9401be8 	ldr	x8, [sp, #48]
        unsafe { mem::transmute(self.cast::<()>()) }
    400012ec:	aa0803e9 	mov	x9, x8
    400012f0:	f90003e9 	str	x9, [sp]
        self.addr() & (align - 1) == 0
    400012f4:	f9404fe9 	ldr	x9, [sp, #152]
    400012f8:	8a090108 	and	x8, x8, x9
    400012fc:	b40002c8 	cbz	x8, 40001354 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2b4>
    40001300:	14000018 	b	40001360 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2c0>
    40001304:	f9400be9 	ldr	x9, [sp, #16]
    40001308:	d503201f 	nop
    4000130c:	10045128 	adr	x8, 40009d30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x168>
    40001310:	f90057e8 	str	x8, [sp, #168]
    40001314:	52800028 	mov	w8, #0x1                   	// #1
    40001318:	f9005be8 	str	x8, [sp, #176]
    4000131c:	d503201f 	nop
    40001320:	10043588 	adr	x8, 400099d0 <memcpy+0x1f8>
    40001324:	f940010a 	ldr	x10, [x8]
    40001328:	f9400508 	ldr	x8, [x8, #8]
    4000132c:	f900112a 	str	x10, [x9, #32]
    40001330:	f9001528 	str	x8, [x9, #40]
    40001334:	52800108 	mov	w8, #0x8                   	// #8
    40001338:	f9005fe8 	str	x8, [sp, #184]
    4000133c:	aa1f03e8 	mov	x8, xzr
    40001340:	f90063e8 	str	x8, [sp, #192]
            panic!("is_aligned_to: align is not a power-of-two");
    40001344:	d503201f 	nop
    40001348:	10045ac1 	adr	x1, 40009ea0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2d8>
    4000134c:	9102a3e0 	add	x0, sp, #0xa8
    40001350:	9400194c 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40001354:	b9400fe8 	ldr	w8, [sp, #12]
    40001358:	370000c8 	tbnz	w8, #0, 40001370 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2d0>
    4000135c:	14000002 	b	40001364 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2c4>
    40001360:	14000005 	b	40001374 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2d4>
    40001364:	f94003e8 	ldr	x8, [sp]
    40001368:	b5000088 	cbnz	x8, 40001378 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2d8>
    4000136c:	14000002 	b	40001374 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2d4>
    40001370:	14000002 	b	40001378 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2d8>
    40001374:	14000010 	b	400013b4 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x314>
    40001378:	f9400fe3 	ldr	x3, [sp, #24]
    4000137c:	f94017e2 	ldr	x2, [sp, #40]
    40001380:	f9401be1 	ldr	x1, [sp, #48]
    40001384:	f9401fe0 	ldr	x0, [sp, #56]
        const_eval_select(($($val,)*), compiletime, runtime)
    40001388:	940001d6 	bl	40001ae0 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E>
        ) => {
    4000138c:	370000e0 	tbnz	w0, #0, 400013a8 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x308>
    40001390:	14000001 	b	40001394 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2f4>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40001394:	d503201f 	nop
    40001398:	10045900 	adr	x0, 40009eb8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2f0>
    4000139c:	52802368 	mov	w8, #0x11b                 	// #283
    400013a0:	2a0803e1 	mov	w1, w8
    400013a4:	9400195d 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    400013a8:	a9527bfd 	ldp	x29, x30, [sp, #288]
    400013ac:	9104c3ff 	add	sp, sp, #0x130
    400013b0:	d65f03c0 	ret
    400013b4:	17fffff8 	b	40001394 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE+0x2f4>
	...

00000000400013c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_mul18precondition_check17h936c014545df854bE>:
            const fn precondition_check($($name:$ty),*) {
    400013c0:	d10043ff 	sub	sp, sp, #0x10
    400013c4:	f90003e0 	str	x0, [sp]
    400013c8:	f90007e1 	str	x1, [sp, #8]
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    400013cc:	9bc17c09 	umulh	x9, x0, x1
    400013d0:	aa1f03e8 	mov	x8, xzr
    400013d4:	eb090108 	subs	x8, x8, x9
    400013d8:	1a9f07e8 	cset	w8, ne	// ne = any
                ) => !lhs.overflowing_mul(rhs).1,
    400013dc:	37000088 	tbnz	w8, #0, 400013ec <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_mul18precondition_check17h936c014545df854bE+0x2c>
    400013e0:	14000001 	b	400013e4 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_mul18precondition_check17h936c014545df854bE+0x24>
            }
    400013e4:	910043ff 	add	sp, sp, #0x10
    400013e8:	d65f03c0 	ret
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    400013ec:	d503201f 	nop
    400013f0:	70045f00 	adr	x0, 40009fd3 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x40b>
    400013f4:	52801748 	mov	w8, #0xba                  	// #186
    400013f8:	2a0803e1 	mov	w1, w8
    400013fc:	94001947 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>

0000000040001400 <_ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E>:
            const fn precondition_check($($name:$ty),*) {
    40001400:	d10043ff 	sub	sp, sp, #0x10
    40001404:	39003fe0 	strb	w0, [sp, #15]
    // SAFETY: The caller promised `cond` is true.
    unsafe {
        ub_checks::assert_unsafe_precondition!(
            check_language_ub,
            "hint::assert_unchecked must never be called when the condition is false",
            (cond: bool = cond) => cond,
    40001408:	370000e0 	tbnz	w0, #0, 40001424 <_ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E+0x24>
    4000140c:	14000001 	b	40001410 <_ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E+0x10>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40001410:	d503201f 	nop
    40001414:	300463c0 	adr	x0, 4000a08d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x4c5>
    40001418:	52801ba8 	mov	w8, #0xdd                  	// #221
    4000141c:	2a0803e1 	mov	w1, w8
    40001420:	9400193e 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40001424:	910043ff 	add	sp, sp, #0x10
    40001428:	d65f03c0 	ret
    4000142c:	00000000 	udf	#0

0000000040001430 <_ZN4core4hint21unreachable_unchecked18precondition_check17h2852c9890cdbb746E>:
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40001430:	d503201f 	nop
    40001434:	500469a0 	adr	x0, 4000a16a <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x5a2>
    40001438:	528018e8 	mov	w8, #0xc7                  	// #199
    4000143c:	2a0803e1 	mov	w1, w8
    40001440:	94001936 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
	...

0000000040001450 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h033293092eb5dd02E>:
    /// assert_eq!(iter.next(), None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg_attr(not(test), rustc_diagnostic_item = "enumerate_method")]
    fn enumerate(self) -> Enumerate<Self>
    40001450:	d10043ff 	sub	sp, sp, #0x10
    40001454:	aa0803e9 	mov	x9, x8
    40001458:	f90003e0 	str	x0, [sp]
    4000145c:	f90007e1 	str	x1, [sp, #8]
        Enumerate { iter, count: 0 }
    40001460:	f9000120 	str	x0, [x9]
    40001464:	f9000521 	str	x1, [x9, #8]
    40001468:	aa1f03e8 	mov	x8, xzr
    4000146c:	f9000928 	str	x8, [x9, #16]
    where
        Self: Sized,
    {
        Enumerate::new(self)
    }
    40001470:	910043ff 	add	sp, sp, #0x10
    40001474:	d65f03c0 	ret
	...

0000000040001480 <_ZN4core4iter6traits8iterator8Iterator9enumerate17ha19d225976dac883E>:
    fn enumerate(self) -> Enumerate<Self>
    40001480:	d10043ff 	sub	sp, sp, #0x10
    40001484:	aa0803e9 	mov	x9, x8
    40001488:	f90003e0 	str	x0, [sp]
    4000148c:	f90007e1 	str	x1, [sp, #8]
    40001490:	f9000120 	str	x0, [x9]
    40001494:	f9000521 	str	x1, [x9, #8]
    40001498:	aa1f03e8 	mov	x8, xzr
    4000149c:	f9000928 	str	x8, [x9, #16]
    }
    400014a0:	910043ff 	add	sp, sp, #0x10
    400014a4:	d65f03c0 	ret
	...

00000000400014b0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha607adfe346fe073E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
    400014b0:	d10143ff 	sub	sp, sp, #0x50
    400014b4:	f90003e1 	str	x1, [sp]
    400014b8:	f90007e0 	str	x0, [sp, #8]
    400014bc:	f9000fe0 	str	x0, [sp, #24]
    400014c0:	f90013e1 	str	x1, [sp, #32]
        let len = slice.len();
    400014c4:	f90017e1 	str	x1, [sp, #40]
        unsafe { NonNull { pointer: r as *const T } }
    400014c8:	f9001be0 	str	x0, [sp, #48]
    400014cc:	f9001fe1 	str	x1, [sp, #56]
    #[must_use = "this returns the result of the operation, \
                  without modifying the original"]
    #[inline]
    pub const fn cast<U>(self) -> NonNull<U> {
        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    400014d0:	f90023e0 	str	x0, [sp, #64]
        let ptr: NonNull<T> = NonNull::from(slice).cast();
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            let end_or_len =
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
    400014d4:	14000001 	b	400014d8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha607adfe346fe073E+0x28>
    400014d8:	f94007e8 	ldr	x8, [sp, #8]
    400014dc:	f94003e9 	ldr	x9, [sp]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    400014e0:	f90027e8 	str	x8, [sp, #72]
    400014e4:	8b090908 	add	x8, x8, x9, lsl #2
    400014e8:	f9000be8 	str	x8, [sp, #16]
    400014ec:	14000001 	b	400014f0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha607adfe346fe073E+0x40>
    400014f0:	f94007e0 	ldr	x0, [sp, #8]

            Self { ptr, end_or_len, _marker: PhantomData }
    400014f4:	f9400be1 	ldr	x1, [sp, #16]
        }
    }
    400014f8:	910143ff 	add	sp, sp, #0x50
    400014fc:	d65f03c0 	ret

0000000040001500 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd99e62fc9f1ea855E>:
    pub(super) fn new(slice: &'a [T]) -> Self {
    40001500:	d10143ff 	sub	sp, sp, #0x50
    40001504:	f90003e1 	str	x1, [sp]
    40001508:	f90007e0 	str	x0, [sp, #8]
    4000150c:	f9000fe0 	str	x0, [sp, #24]
    40001510:	f90013e1 	str	x1, [sp, #32]
        let len = slice.len();
    40001514:	f90017e1 	str	x1, [sp, #40]
        unsafe { NonNull { pointer: r as *const T } }
    40001518:	f9001be0 	str	x0, [sp, #48]
    4000151c:	f9001fe1 	str	x1, [sp, #56]
        unsafe { NonNull { pointer: self.as_ptr() as *mut U } }
    40001520:	f90023e0 	str	x0, [sp, #64]
                if T::IS_ZST { without_provenance(len) } else { ptr.as_ptr().add(len) };
    40001524:	14000001 	b	40001528 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd99e62fc9f1ea855E+0x28>
    40001528:	f94007e8 	ldr	x8, [sp, #8]
    4000152c:	f94003e9 	ldr	x9, [sp]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    40001530:	f90027e8 	str	x8, [sp, #72]
    40001534:	8b091108 	add	x8, x8, x9, lsl #4
    40001538:	f9000be8 	str	x8, [sp, #16]
    4000153c:	14000001 	b	40001540 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd99e62fc9f1ea855E+0x40>
    40001540:	f94007e0 	ldr	x0, [sp, #8]
            Self { ptr, end_or_len, _marker: PhantomData }
    40001544:	f9400be1 	ldr	x1, [sp, #16]
    }
    40001548:	910143ff 	add	sp, sp, #0x50
    4000154c:	d65f03c0 	ret

0000000040001550 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
    40001550:	d101c3ff 	sub	sp, sp, #0x70
    40001554:	f90007e0 	str	x0, [sp, #8]
    40001558:	f9001fe0 	str	x0, [sp, #56]
    4000155c:	52800028 	mov	w8, #0x1                   	// #1
        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    40001560:	f90023e8 	str	x8, [sp, #64]
    #[inline(always)]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[stable(feature = "non_null_convenience", since = "1.80.0")]
    #[rustc_const_stable(feature = "non_null_convenience", since = "1.80.0")]
    pub const unsafe fn add(self, count: usize) -> Self
    40001564:	f90027e8 	str	x8, [sp, #72]
                // intentionally not using the helpers because this is
                // one of the most mono'd things in the library.

                let ptr = self.ptr;
    40001568:	f9400008 	ldr	x8, [x0]
    4000156c:	f90013e8 	str	x8, [sp, #32]
                let end_or_len = self.end_or_len;
    40001570:	f9400408 	ldr	x8, [x0, #8]
    40001574:	aa0803e9 	mov	x9, x8
    40001578:	f9000be9 	str	x9, [sp, #16]
    4000157c:	f9002be8 	str	x8, [sp, #80]
                // SAFETY: See inner comments. (For some reason having multiple
                // block breaks inlining this -- if you can fix that please do!)
                unsafe {
                    if T::IS_ZST {
    40001580:	14000001 	b	40001584 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x34>
    40001584:	f9400be8 	ldr	x8, [sp, #16]
    40001588:	910083e9 	add	x9, sp, #0x20
                        self.end_or_len = without_provenance_mut(len.unchecked_sub(1));
                    } else {
                        // SAFETY: by type invariant, the `end_or_len` field is always
                        // non-null for a non-ZST pointee.  (This transmute ensures we
                        // get `!nonnull` metadata on the load of the field.)
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    4000158c:	f9002fe9 	str	x9, [sp, #88]
    40001590:	f90017e8 	str	x8, [sp, #40]
    40001594:	9100a3e8 	add	x8, sp, #0x28
    40001598:	f90033e8 	str	x8, [sp, #96]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    4000159c:	f94013e8 	ldr	x8, [sp, #32]
    400015a0:	f94017e9 	ldr	x9, [sp, #40]
    400015a4:	eb090108 	subs	x8, x8, x9
    400015a8:	540000e0 	b.eq	400015c4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x74>  // b.none
    400015ac:	14000001 	b	400015b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x60>
    400015b0:	f94007e9 	ldr	x9, [sp, #8]
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // Additionally safety contract of `offset` guarantees that the resulting pointer is
        // pointing to an allocation, there can't be an allocation at null, thus it's safe to
        // construct `NonNull`.
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    400015b4:	f94013e8 	ldr	x8, [sp, #32]
    400015b8:	91000508 	add	x8, x8, #0x1
                            return None;
                        }
                        // SAFETY: since it's not empty, per the check above, moving
                        // forward one keeps us inside the slice, and this is valid.
                        self.ptr = ptr.add(1);
    400015bc:	f9000128 	str	x8, [x9]
                    if T::IS_ZST {
    400015c0:	14000004 	b	400015d0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x80>
    400015c4:	aa1f03e8 	mov	x8, xzr
                            return None;
    400015c8:	f9000fe8 	str	x8, [sp, #24]
    400015cc:	1400000b 	b	400015f8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0xa8>
                    }
                    // SAFETY: Now that we know it wasn't empty and we've moved past
                    // the first one (to avoid giving a duplicate `&mut` next time),
                    // we can give out a reference to it.
                    Some({ptr}.$into_ref())
    400015d0:	f94013e8 	ldr	x8, [sp, #32]
    400015d4:	f9001be8 	str	x8, [sp, #48]
    400015d8:	9100c3e8 	add	x8, sp, #0x30
    400015dc:	f90037e8 	str	x8, [sp, #104]
        self as _
    400015e0:	f94013e8 	ldr	x8, [sp, #32]
    400015e4:	f9000fe8 	str	x8, [sp, #24]
                }
            }
    400015e8:	14000001 	b	400015ec <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x9c>
    400015ec:	f9400fe0 	ldr	x0, [sp, #24]
    400015f0:	9101c3ff 	add	sp, sp, #0x70
    400015f4:	d65f03c0 	ret
    400015f8:	17fffffd 	b	400015ec <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE+0x9c>
    400015fc:	00000000 	udf	#0

0000000040001600 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E>:
            fn next(&mut self) -> Option<$elem> {
    40001600:	d101c3ff 	sub	sp, sp, #0x70
    40001604:	f90007e0 	str	x0, [sp, #8]
    40001608:	f9001fe0 	str	x0, [sp, #56]
    4000160c:	52800028 	mov	w8, #0x1                   	// #1
    40001610:	f90023e8 	str	x8, [sp, #64]
    pub const unsafe fn add(self, count: usize) -> Self
    40001614:	f90027e8 	str	x8, [sp, #72]
                let ptr = self.ptr;
    40001618:	f9400008 	ldr	x8, [x0]
    4000161c:	f90013e8 	str	x8, [sp, #32]
                let end_or_len = self.end_or_len;
    40001620:	f9400408 	ldr	x8, [x0, #8]
    40001624:	aa0803e9 	mov	x9, x8
    40001628:	f9000be9 	str	x9, [sp, #16]
    4000162c:	f9002be8 	str	x8, [sp, #80]
                    if T::IS_ZST {
    40001630:	14000001 	b	40001634 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x34>
    40001634:	f9400be8 	ldr	x8, [sp, #16]
    40001638:	910083e9 	add	x9, sp, #0x20
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    4000163c:	f9002fe9 	str	x9, [sp, #88]
    40001640:	f90017e8 	str	x8, [sp, #40]
    40001644:	9100a3e8 	add	x8, sp, #0x28
    40001648:	f90033e8 	str	x8, [sp, #96]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    4000164c:	f94013e8 	ldr	x8, [sp, #32]
    40001650:	f94017e9 	ldr	x9, [sp, #40]
    40001654:	eb090108 	subs	x8, x8, x9
    40001658:	540000e0 	b.eq	40001674 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x74>  // b.none
    4000165c:	14000001 	b	40001660 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x60>
    40001660:	f94007e9 	ldr	x9, [sp, #8]
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    40001664:	f94013e8 	ldr	x8, [sp, #32]
    40001668:	91004108 	add	x8, x8, #0x10
                        self.ptr = ptr.add(1);
    4000166c:	f9000128 	str	x8, [x9]
                    if T::IS_ZST {
    40001670:	14000004 	b	40001680 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x80>
    40001674:	aa1f03e8 	mov	x8, xzr
                            return None;
    40001678:	f9000fe8 	str	x8, [sp, #24]
    4000167c:	1400000b 	b	400016a8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0xa8>
                    Some({ptr}.$into_ref())
    40001680:	f94013e8 	ldr	x8, [sp, #32]
    40001684:	f9001be8 	str	x8, [sp, #48]
    40001688:	9100c3e8 	add	x8, sp, #0x30
    4000168c:	f90037e8 	str	x8, [sp, #104]
    40001690:	f94013e8 	ldr	x8, [sp, #32]
    40001694:	f9000fe8 	str	x8, [sp, #24]
            }
    40001698:	14000001 	b	4000169c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x9c>
    4000169c:	f9400fe0 	ldr	x0, [sp, #24]
    400016a0:	9101c3ff 	add	sp, sp, #0x70
    400016a4:	d65f03c0 	ret
    400016a8:	17fffffd 	b	4000169c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93db2ea290e750d2E+0x9c>
    400016ac:	00000000 	udf	#0

00000000400016b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E>:
            fn next(&mut self) -> Option<$elem> {
    400016b0:	d101c3ff 	sub	sp, sp, #0x70
    400016b4:	f90007e0 	str	x0, [sp, #8]
    400016b8:	f9001fe0 	str	x0, [sp, #56]
    400016bc:	52800028 	mov	w8, #0x1                   	// #1
    400016c0:	f90023e8 	str	x8, [sp, #64]
    pub const unsafe fn add(self, count: usize) -> Self
    400016c4:	f90027e8 	str	x8, [sp, #72]
                let ptr = self.ptr;
    400016c8:	f9400008 	ldr	x8, [x0]
    400016cc:	f90013e8 	str	x8, [sp, #32]
                let end_or_len = self.end_or_len;
    400016d0:	f9400408 	ldr	x8, [x0, #8]
    400016d4:	aa0803e9 	mov	x9, x8
    400016d8:	f9000be9 	str	x9, [sp, #16]
    400016dc:	f9002be8 	str	x8, [sp, #80]
                    if T::IS_ZST {
    400016e0:	14000001 	b	400016e4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x34>
    400016e4:	f9400be8 	ldr	x8, [sp, #16]
    400016e8:	910083e9 	add	x9, sp, #0x20
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
    400016ec:	f9002fe9 	str	x9, [sp, #88]
    400016f0:	f90017e8 	str	x8, [sp, #40]
    400016f4:	9100a3e8 	add	x8, sp, #0x28
    400016f8:	f90033e8 	str	x8, [sp, #96]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    400016fc:	f94013e8 	ldr	x8, [sp, #32]
    40001700:	f94017e9 	ldr	x9, [sp, #40]
    40001704:	eb090108 	subs	x8, x8, x9
    40001708:	540000e0 	b.eq	40001724 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x74>  // b.none
    4000170c:	14000001 	b	40001710 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x60>
    40001710:	f94007e9 	ldr	x9, [sp, #8]
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
    40001714:	f94013e8 	ldr	x8, [sp, #32]
    40001718:	91001108 	add	x8, x8, #0x4
                        self.ptr = ptr.add(1);
    4000171c:	f9000128 	str	x8, [x9]
                    if T::IS_ZST {
    40001720:	14000004 	b	40001730 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x80>
    40001724:	aa1f03e8 	mov	x8, xzr
                            return None;
    40001728:	f9000fe8 	str	x8, [sp, #24]
    4000172c:	1400000b 	b	40001758 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0xa8>
                    Some({ptr}.$into_ref())
    40001730:	f94013e8 	ldr	x8, [sp, #32]
    40001734:	f9001be8 	str	x8, [sp, #48]
    40001738:	9100c3e8 	add	x8, sp, #0x30
    4000173c:	f90037e8 	str	x8, [sp, #104]
    40001740:	f94013e8 	ldr	x8, [sp, #32]
    40001744:	f9000fe8 	str	x8, [sp, #24]
            }
    40001748:	14000001 	b	4000174c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x9c>
    4000174c:	f9400fe0 	ldr	x0, [sp, #24]
    40001750:	9101c3ff 	add	sp, sp, #0x70
    40001754:	d65f03c0 	ret
    40001758:	17fffffd 	b	4000174c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdb97d5adcf1cf930E+0x9c>
    4000175c:	00000000 	udf	#0

0000000040001760 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E>:
            const fn precondition_check($($name:$ty),*) {
    40001760:	d102c3ff 	sub	sp, sp, #0xb0
    40001764:	f9000fe3 	str	x3, [sp, #24]
    40001768:	f90013e2 	str	x2, [sp, #32]
    4000176c:	f90017e1 	str	x1, [sp, #40]
    40001770:	f9001be0 	str	x0, [sp, #48]
    40001774:	f9003be0 	str	x0, [sp, #112]
    40001778:	f9003fe1 	str	x1, [sp, #120]
    4000177c:	f90043e2 	str	x2, [sp, #128]
    40001780:	f90047e3 	str	x3, [sp, #136]
    40001784:	2a1f03e8 	mov	w8, wzr
    is_zst: bool,
    40001788:	39025be8 	strb	w8, [sp, #150]
        fn runtime$(<$($binders)*>)?($($arg: $ty),*) $( -> $ret )? {
    4000178c:	39025fe8 	strb	w8, [sp, #151]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40001790:	d503201f 	nop
    40001794:	10045668 	adr	x8, 4000a260 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x698>
    40001798:	f9004fe8 	str	x8, [sp, #152]
                data: *mut () = data as *mut (),
                size: usize = size_of::<T>(),
                align: usize = align_of::<T>(),
                len: usize = len,
            ) =>
            ub_checks::maybe_is_aligned_and_not_null(data, align, false)
    4000179c:	f90053e0 	str	x0, [sp, #160]
            return intrinsics::ctpop(self);
    400017a0:	d341fc48 	lsr	x8, x2, #1
    400017a4:	9200f108 	and	x8, x8, #0x5555555555555555
    400017a8:	eb080049 	subs	x9, x2, x8
    400017ac:	9200e528 	and	x8, x9, #0x3333333333333333
    400017b0:	d342fd29 	lsr	x9, x9, #2
    400017b4:	9200e529 	and	x9, x9, #0x3333333333333333
    400017b8:	8b090108 	add	x8, x8, x9
    400017bc:	8b481108 	add	x8, x8, x8, lsr #4
    400017c0:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    400017c4:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    400017c8:	9b097d08 	mul	x8, x8, x9
    400017cc:	d378fd08 	lsr	x8, x8, #56
    400017d0:	b900afe8 	str	w8, [sp, #172]
    400017d4:	b940afe8 	ldr	w8, [sp, #172]
        if !align.is_power_of_two() {
    400017d8:	71000508 	subs	w8, w8, #0x1
    400017dc:	54000141 	b.ne	40001804 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0xa4>  // b.any
    400017e0:	14000001 	b	400017e4 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x84>
    400017e4:	f9401be8 	ldr	x8, [sp, #48]
    400017e8:	f94013e9 	ldr	x9, [sp, #32]
        unsafe { mem::transmute(self.cast::<()>()) }
    400017ec:	aa0803ea 	mov	x10, x8
    400017f0:	f9000bea 	str	x10, [sp, #16]
        self.addr() & (align - 1) == 0
    400017f4:	f1000529 	subs	x9, x9, #0x1
    400017f8:	8a090108 	and	x8, x8, x9
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    400017fc:	b40002a8 	cbz	x8, 40001850 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0xf0>
    40001800:	14000017 	b	4000185c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0xfc>
        Arguments { pieces, fmt: None, args: &[] }
    40001804:	d503201f 	nop
    40001808:	100452c8 	adr	x8, 4000a260 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x698>
    4000180c:	f9001fe8 	str	x8, [sp, #56]
    40001810:	52800028 	mov	w8, #0x1                   	// #1
    40001814:	f90023e8 	str	x8, [sp, #64]
    40001818:	d503201f 	nop
    4000181c:	10040da8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40001820:	f9400109 	ldr	x9, [x8]
    40001824:	f9400508 	ldr	x8, [x8, #8]
    40001828:	f9002fe9 	str	x9, [sp, #88]
    4000182c:	f90033e8 	str	x8, [sp, #96]
    40001830:	52800108 	mov	w8, #0x8                   	// #8
    40001834:	f90027e8 	str	x8, [sp, #72]
    40001838:	aa1f03e8 	mov	x8, xzr
    4000183c:	f9002be8 	str	x8, [sp, #80]
            panic!("is_aligned_to: align is not a power-of-two");
    40001840:	d503201f 	nop
    40001844:	10046261 	adr	x1, 4000a490 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x8c8>
    40001848:	9100e3e0 	add	x0, sp, #0x38
    4000184c:	9400180d 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40001850:	f9400be8 	ldr	x8, [sp, #16]
    40001854:	b5000088 	cbnz	x8, 40001864 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x104>
    40001858:	14000002 	b	40001860 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x100>
    4000185c:	14000001 	b	40001860 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x100>
    40001860:	1400001d 	b	400018d4 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x174>
    40001864:	f94017e8 	ldr	x8, [sp, #40]
    )
}

#[inline]
pub(crate) const fn is_valid_allocation_size(size: usize, len: usize) -> bool {
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    40001868:	f1000109 	subs	x9, x8, #0x0
    4000186c:	1a9f17e9 	cset	w9, eq	// eq = none
    40001870:	b9000fe9 	str	w9, [sp, #12]
    40001874:	b50000a8 	cbnz	x8, 40001888 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x128>
    40001878:	14000001 	b	4000187c <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x11c>
    4000187c:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
    40001880:	f90037e8 	str	x8, [sp, #104]
    40001884:	14000004 	b	40001894 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x134>
    40001888:	b9400fe8 	ldr	w8, [sp, #12]
    4000188c:	37000188 	tbnz	w8, #0, 400018bc <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x15c>
    40001890:	14000006 	b	400018a8 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x148>
    40001894:	f9400fe8 	ldr	x8, [sp, #24]
    len <= max_len
    40001898:	f94037e9 	ldr	x9, [sp, #104]
                && ub_checks::is_valid_allocation_size(size, len)
    4000189c:	eb090108 	subs	x8, x8, x9
    400018a0:	54000169 	b.ls	400018cc <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x16c>  // b.plast
    400018a4:	14000009 	b	400018c8 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x168>
    400018a8:	f94017e9 	ldr	x9, [sp, #40]
    400018ac:	92f00008 	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    400018b0:	9ac90908 	udiv	x8, x8, x9
    400018b4:	f90037e8 	str	x8, [sp, #104]
    400018b8:	17fffff7 	b	40001894 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x134>
    400018bc:	d503201f 	nop
    400018c0:	10045140 	adr	x0, 4000a2e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x720>
    400018c4:	94001db0 	bl	40008f84 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17h4c23f62e2c0638e8E>
    400018c8:	14000003 	b	400018d4 <_ZN4core5slice3raw14from_raw_parts18precondition_check17hff58a87c8c9b9d64E+0x174>
            }
    400018cc:	9102c3ff 	add	sp, sp, #0xb0
    400018d0:	d65f03c0 	ret
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    400018d4:	d503201f 	nop
    400018d8:	10045140 	adr	x0, 4000a300 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x738>
    400018dc:	528022e8 	mov	w8, #0x117                 	// #279
    400018e0:	2a0803e1 	mov	w1, w8
    400018e4:	9400180d 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
	...

00000000400018f0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E>:
            const fn precondition_check($($name:$ty),*) {
    400018f0:	d102c3ff 	sub	sp, sp, #0xb0
    400018f4:	f9000fe3 	str	x3, [sp, #24]
    400018f8:	f90013e2 	str	x2, [sp, #32]
    400018fc:	f90017e1 	str	x1, [sp, #40]
    40001900:	f9001be0 	str	x0, [sp, #48]
    40001904:	f9003be0 	str	x0, [sp, #112]
    40001908:	f9003fe1 	str	x1, [sp, #120]
    4000190c:	f90043e2 	str	x2, [sp, #128]
    40001910:	f90047e3 	str	x3, [sp, #136]
    40001914:	2a1f03e8 	mov	w8, wzr
    is_zst: bool,
    40001918:	39025be8 	strb	w8, [sp, #150]
    4000191c:	39025fe8 	strb	w8, [sp, #151]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40001920:	d503201f 	nop
    40001924:	100449e8 	adr	x8, 4000a260 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x698>
    40001928:	f9004fe8 	str	x8, [sp, #152]
                data: *mut () = data as *mut (),
                size: usize = size_of::<T>(),
                align: usize = align_of::<T>(),
                len: usize = len,
            ) =>
            ub_checks::maybe_is_aligned_and_not_null(data, align, false)
    4000192c:	f90053e0 	str	x0, [sp, #160]
    40001930:	d341fc48 	lsr	x8, x2, #1
    40001934:	9200f108 	and	x8, x8, #0x5555555555555555
    40001938:	eb080049 	subs	x9, x2, x8
    4000193c:	9200e528 	and	x8, x9, #0x3333333333333333
    40001940:	d342fd29 	lsr	x9, x9, #2
    40001944:	9200e529 	and	x9, x9, #0x3333333333333333
    40001948:	8b090108 	add	x8, x8, x9
    4000194c:	8b481108 	add	x8, x8, x8, lsr #4
    40001950:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40001954:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40001958:	9b097d08 	mul	x8, x8, x9
    4000195c:	d378fd08 	lsr	x8, x8, #56
    40001960:	b900afe8 	str	w8, [sp, #172]
    40001964:	b940afe8 	ldr	w8, [sp, #172]
        if !align.is_power_of_two() {
    40001968:	71000508 	subs	w8, w8, #0x1
    4000196c:	54000141 	b.ne	40001994 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0xa4>  // b.any
    40001970:	14000001 	b	40001974 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x84>
    40001974:	f9401be8 	ldr	x8, [sp, #48]
    40001978:	f94013e9 	ldr	x9, [sp, #32]
        unsafe { mem::transmute(self.cast::<()>()) }
    4000197c:	aa0803ea 	mov	x10, x8
    40001980:	f9000bea 	str	x10, [sp, #16]
        self.addr() & (align - 1) == 0
    40001984:	f1000529 	subs	x9, x9, #0x1
    40001988:	8a090108 	and	x8, x8, x9
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    4000198c:	b40002a8 	cbz	x8, 400019e0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0xf0>
    40001990:	14000017 	b	400019ec <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0xfc>
        Arguments { pieces, fmt: None, args: &[] }
    40001994:	d503201f 	nop
    40001998:	10044648 	adr	x8, 4000a260 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x698>
    4000199c:	f9001fe8 	str	x8, [sp, #56]
    400019a0:	52800028 	mov	w8, #0x1                   	// #1
    400019a4:	f90023e8 	str	x8, [sp, #64]
    400019a8:	d503201f 	nop
    400019ac:	10040128 	adr	x8, 400099d0 <memcpy+0x1f8>
    400019b0:	f9400109 	ldr	x9, [x8]
    400019b4:	f9400508 	ldr	x8, [x8, #8]
    400019b8:	f9002fe9 	str	x9, [sp, #88]
    400019bc:	f90033e8 	str	x8, [sp, #96]
    400019c0:	52800108 	mov	w8, #0x8                   	// #8
    400019c4:	f90027e8 	str	x8, [sp, #72]
    400019c8:	aa1f03e8 	mov	x8, xzr
    400019cc:	f9002be8 	str	x8, [sp, #80]
            panic!("is_aligned_to: align is not a power-of-two");
    400019d0:	d503201f 	nop
    400019d4:	100455e1 	adr	x1, 4000a490 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x8c8>
    400019d8:	9100e3e0 	add	x0, sp, #0x38
    400019dc:	940017a9 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    400019e0:	f9400be8 	ldr	x8, [sp, #16]
    400019e4:	b5000088 	cbnz	x8, 400019f4 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x104>
    400019e8:	14000002 	b	400019f0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x100>
    400019ec:	14000001 	b	400019f0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x100>
    400019f0:	1400001d 	b	40001a64 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x174>
    400019f4:	f94017e8 	ldr	x8, [sp, #40]
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    400019f8:	f1000109 	subs	x9, x8, #0x0
    400019fc:	1a9f17e9 	cset	w9, eq	// eq = none
    40001a00:	b9000fe9 	str	w9, [sp, #12]
    40001a04:	b50000a8 	cbnz	x8, 40001a18 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x128>
    40001a08:	14000001 	b	40001a0c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x11c>
    40001a0c:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
    40001a10:	f90037e8 	str	x8, [sp, #104]
    40001a14:	14000004 	b	40001a24 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x134>
    40001a18:	b9400fe8 	ldr	w8, [sp, #12]
    40001a1c:	37000188 	tbnz	w8, #0, 40001a4c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x15c>
    40001a20:	14000006 	b	40001a38 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x148>
    40001a24:	f9400fe8 	ldr	x8, [sp, #24]
    len <= max_len
    40001a28:	f94037e9 	ldr	x9, [sp, #104]
                && ub_checks::is_valid_allocation_size(size, len)
    40001a2c:	eb090108 	subs	x8, x8, x9
    40001a30:	54000169 	b.ls	40001a5c <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x16c>  // b.plast
    40001a34:	14000009 	b	40001a58 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x168>
    40001a38:	f94017e9 	ldr	x9, [sp, #40]
    40001a3c:	92f00008 	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    let max_len = if size == 0 { usize::MAX } else { isize::MAX as usize / size };
    40001a40:	9ac90908 	udiv	x8, x8, x9
    40001a44:	f90037e8 	str	x8, [sp, #104]
    40001a48:	17fffff7 	b	40001a24 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x134>
    40001a4c:	d503201f 	nop
    40001a50:	100444c0 	adr	x0, 4000a2e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x720>
    40001a54:	94001d4c 	bl	40008f84 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17h4c23f62e2c0638e8E>
    40001a58:	14000003 	b	40001a64 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E+0x174>
            }
    40001a5c:	9102c3ff 	add	sp, sp, #0xb0
    40001a60:	d65f03c0 	ret
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40001a64:	d503201f 	nop
    40001a68:	10045200 	adr	x0, 4000a4a8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x8e0>
    40001a6c:	52802368 	mov	w8, #0x11b                 	// #283
    40001a70:	2a0803e1 	mov	w1, w8
    40001a74:	940017a9 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
	...

0000000040001a80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h90dcb070c787e715E>:
    /// assert_eq!(iterator.next(), None);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    #[cfg_attr(not(test), rustc_diagnostic_item = "slice_iter")]
    pub fn iter(&self) -> Iter<'_, T> {
    40001a80:	d10083ff 	sub	sp, sp, #0x20
    40001a84:	f9000bfe 	str	x30, [sp, #16]
    40001a88:	f90003e0 	str	x0, [sp]
    40001a8c:	f90007e1 	str	x1, [sp, #8]
        Iter::new(self)
    40001a90:	97fffe9c 	bl	40001500 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17hd99e62fc9f1ea855E>
    }
    40001a94:	f9400bfe 	ldr	x30, [sp, #16]
    40001a98:	910083ff 	add	sp, sp, #0x20
    40001a9c:	d65f03c0 	ret

0000000040001aa0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb18b94471ecb9dc2E>:
    pub fn iter(&self) -> Iter<'_, T> {
    40001aa0:	d10083ff 	sub	sp, sp, #0x20
    40001aa4:	f9000bfe 	str	x30, [sp, #16]
    40001aa8:	f90003e0 	str	x0, [sp]
    40001aac:	f90007e1 	str	x1, [sp, #8]
        Iter::new(self)
    40001ab0:	97fffe80 	bl	400014b0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17ha607adfe346fe073E>
    }
    40001ab4:	f9400bfe 	ldr	x30, [sp, #16]
    40001ab8:	910083ff 	add	sp, sp, #0x20
    40001abc:	d65f03c0 	ret

0000000040001ac0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17heae4db5223ccb96fE>:
    fn into_iter(self) -> I {
    40001ac0:	d10043ff 	sub	sp, sp, #0x10
    40001ac4:	f90003e0 	str	x0, [sp]
    40001ac8:	f90007e1 	str	x1, [sp, #8]
    }
    40001acc:	910043ff 	add	sp, sp, #0x10
    40001ad0:	d65f03c0 	ret
	...

0000000040001ae0 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E>:
    40001ae0:	d10203ff 	sub	sp, sp, #0x80
    40001ae4:	f9001fe0 	str	x0, [sp, #56]
    40001ae8:	f90023e1 	str	x1, [sp, #64]
    40001aec:	f90027e2 	str	x2, [sp, #72]
    40001af0:	f9002be3 	str	x3, [sp, #80]
        unsafe { mem::transmute(self.cast::<()>()) }
    40001af4:	aa0003e8 	mov	x8, x0
    40001af8:	f90007e8 	str	x8, [sp, #8]
    40001afc:	f9002fe0 	str	x0, [sp, #88]
    40001b00:	aa0103e8 	mov	x8, x1
    40001b04:	f9000be8 	str	x8, [sp, #16]
    40001b08:	f90033e1 	str	x1, [sp, #96]
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    40001b0c:	9b037c49 	mul	x9, x2, x3
    40001b10:	9bc37c4a 	umulh	x10, x2, x3
    40001b14:	aa1f03e8 	mov	x8, xzr
    40001b18:	eb0a0108 	subs	x8, x8, x10
    40001b1c:	1a9f07e8 	cset	w8, ne	// ne = any
    40001b20:	aa0903ea 	mov	x10, x9
    40001b24:	f9000fea 	str	x10, [sp, #24]
    40001b28:	3901bfe8 	strb	w8, [sp, #111]
            (a as Self, b)
    40001b2c:	f9003be9 	str	x9, [sp, #112]
    if b {
    40001b30:	370001e8 	tbnz	w8, #0, 40001b6c <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0x8c>
    40001b34:	14000001 	b	40001b38 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0x58>
    40001b38:	f94007e8 	ldr	x8, [sp, #8]
    40001b3c:	f9400be9 	ldr	x9, [sp, #16]
    40001b40:	f9400fea 	ldr	x10, [sp, #24]
            if intrinsics::unlikely(b) { None } else { Some(a) }
    40001b44:	f90017ea 	str	x10, [sp, #40]
    40001b48:	5280002a 	mov	w10, #0x1                   	// #1
    40001b4c:	f90013ea 	str	x10, [sp, #32]
        if const {
            true
        } else {
            let src_usize = src.addr();
            let dst_usize = dst.addr();
            let Some(size) = size.checked_mul(count) else {
    40001b50:	f94017ea 	ldr	x10, [sp, #40]
    40001b54:	aa0a03eb 	mov	x11, x10
    40001b58:	f90003eb 	str	x11, [sp]
    40001b5c:	f9003fea 	str	x10, [sp, #120]
                if self < other {
    40001b60:	eb090108 	subs	x8, x8, x9
    40001b64:	54000183 	b.cc	40001b94 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0xb4>  // b.lo, b.ul, b.last
    40001b68:	14000006 	b	40001b80 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0xa0>
                crate::panicking::panic_nounwind(
    40001b6c:	d503201f 	nop
    40001b70:	70045280 	adr	x0, 4000a5c3 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x9fb>
    40001b74:	528007a8 	mov	w8, #0x3d                  	// #61
    40001b78:	2a0803e1 	mov	w1, w8
    40001b7c:	94001767 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
    40001b80:	f94007e8 	ldr	x8, [sp, #8]
    40001b84:	f9400be9 	ldr	x9, [sp, #16]
                    self - other
    40001b88:	eb090108 	subs	x8, x8, x9
    40001b8c:	f9001be8 	str	x8, [sp, #48]
                if self < other {
    40001b90:	14000006 	b	40001ba8 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0xc8>
    40001b94:	f9400be8 	ldr	x8, [sp, #16]
    40001b98:	f94007e9 	ldr	x9, [sp, #8]
                    other - self
    40001b9c:	eb090108 	subs	x8, x8, x9
    40001ba0:	f9001be8 	str	x8, [sp, #48]
                if self < other {
    40001ba4:	14000001 	b	40001ba8 <_ZN4core9ub_checks23maybe_is_nonoverlapping7runtime17haceb715c1c256a17E+0xc8>
    40001ba8:	f94003e9 	ldr	x9, [sp]
                )
            };
            let diff = src_usize.abs_diff(dst_usize);
            // If the absolute distance between the ptrs is at least as big as the size of the buffer,
            // they do not overlap.
            diff >= size
    40001bac:	f9401be8 	ldr	x8, [sp, #48]
    40001bb0:	eb090108 	subs	x8, x8, x9
    40001bb4:	1a9f37e0 	cset	w0, cs	// cs = hs, nlast
        }
    40001bb8:	910203ff 	add	sp, sp, #0x80
    40001bbc:	d65f03c0 	ret

0000000040001bc0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E>:
    ($($T:ident)*) => {
        $(
            #[stable(feature = "rust1", since = "1.0.0")]
            impl fmt::Debug for $T {
                #[inline]
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    40001bc0:	d10103ff 	sub	sp, sp, #0x40
    40001bc4:	f9001bfe 	str	x30, [sp, #48]
    40001bc8:	f90007e1 	str	x1, [sp, #8]
    40001bcc:	f9000be0 	str	x0, [sp, #16]
    40001bd0:	f90013e0 	str	x0, [sp, #32]
    40001bd4:	f90017e1 	str	x1, [sp, #40]
                    if f.debug_lower_hex() {
    40001bd8:	39409028 	ldrb	w8, [x1, #36]
    40001bdc:	372000c8 	tbnz	w8, #4, 40001bf4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x34>
    40001be0:	14000001 	b	40001be4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x24>
    40001be4:	f94007e8 	ldr	x8, [sp, #8]
                        fmt::LowerHex::fmt(self, f)
                    } else if f.debug_upper_hex() {
    40001be8:	39409108 	ldrb	w8, [x8, #36]
    40001bec:	362800e8 	tbz	w8, #5, 40001c08 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x48>
    40001bf0:	1400000b 	b	40001c1c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x5c>
    40001bf4:	f94007e1 	ldr	x1, [sp, #8]
    40001bf8:	f9400be0 	ldr	x0, [sp, #16]
                        fmt::LowerHex::fmt(self, f)
    40001bfc:	94001d1c 	bl	4000906c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17hd274927b8a819bfbE>
    40001c00:	39007fe0 	strb	w0, [sp, #31]
    40001c04:	1400000c 	b	40001c34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x74>
    40001c08:	f94007e1 	ldr	x1, [sp, #8]
    40001c0c:	f9400be0 	ldr	x0, [sp, #16]
                        fmt::UpperHex::fmt(self, f)
                    } else {
                        fmt::Display::fmt(self, f)
    40001c10:	94001df4 	bl	400093e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E>
    40001c14:	39007fe0 	strb	w0, [sp, #31]
    40001c18:	14000006 	b	40001c30 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x70>
    40001c1c:	f94007e1 	ldr	x1, [sp, #8]
    40001c20:	f9400be0 	ldr	x0, [sp, #16]
                        fmt::UpperHex::fmt(self, f)
    40001c24:	94001d32 	bl	400090ec <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hc92360be9e83b966E>
    40001c28:	39007fe0 	strb	w0, [sp, #31]
    40001c2c:	14000001 	b	40001c30 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x70>
                    if f.debug_lower_hex() {
    40001c30:	14000001 	b	40001c34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h7729a96f55bf2908E+0x74>
                    }
                }
    40001c34:	39407fe0 	ldrb	w0, [sp, #31]
    40001c38:	f9401bfe 	ldr	x30, [sp, #48]
    40001c3c:	910103ff 	add	sp, sp, #0x40
    40001c40:	d65f03c0 	ret
	...

0000000040001c50 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h1b1f9e2425562112E>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
    40001c50:	d10043ff 	sub	sp, sp, #0x10
    40001c54:	f90003e0 	str	x0, [sp]
    40001c58:	f90007e1 	str	x1, [sp, #8]
        unsafe { intrinsics::offset(self, count) }
    40001c5c:	8b010001 	add	x1, x0, x1
        Bytes(self.as_bytes().iter().copied())
    }
    40001c60:	910043ff 	add	sp, sp, #0x10
    40001c64:	d65f03c0 	ret
	...

0000000040001c70 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
    40001c70:	d10183ff 	sub	sp, sp, #0x60
    40001c74:	f9002bfe 	str	x30, [sp, #80]
    40001c78:	f9000fe1 	str	x1, [sp, #24]
    40001c7c:	f90013e2 	str	x2, [sp, #32]
    40001c80:	f90017e0 	str	x0, [sp, #40]
    40001c84:	2a1f03e8 	mov	w8, wzr
pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    40001c88:	3900dfe8 	strb	w8, [sp, #55]
    40001c8c:	910063e8 	add	x8, sp, #0x18
        let size = layout.size();
    40001c90:	f9001fe8 	str	x8, [sp, #56]
        self.size
    40001c94:	f94013e8 	ldr	x8, [sp, #32]
    40001c98:	aa0803e9 	mov	x9, x8
    40001c9c:	f90007e9 	str	x9, [sp, #8]
    40001ca0:	f90023e8 	str	x8, [sp, #64]
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
    40001ca4:	f9400fe1 	ldr	x1, [sp, #24]
    40001ca8:	f94013e2 	ldr	x2, [sp, #32]
    40001cac:	9400131d 	bl	40006920 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb663306ab11275a8E>
    40001cb0:	aa0003e1 	mov	x1, x0
    40001cb4:	f9000be1 	str	x1, [sp, #16]
    40001cb8:	f90027e0 	str	x0, [sp, #72]
        if !ptr.is_null() {
    40001cbc:	b5000060 	cbnz	x0, 40001cc8 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x58>
    40001cc0:	14000001 	b	40001cc4 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x54>
    40001cc4:	14000002 	b	40001ccc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x5c>
            if ::core::ub_checks::$kind() {
    40001cc8:	14000005 	b	40001cdc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x6c>
    40001ccc:	f9400be0 	ldr	x0, [sp, #16]
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
        }
        ptr
    }
    40001cd0:	f9402bfe 	ldr	x30, [sp, #80]
    40001cd4:	910183ff 	add	sp, sp, #0x60
    40001cd8:	d65f03c0 	ret
    40001cdc:	f9400be0 	ldr	x0, [sp, #16]
    40001ce0:	f94007e8 	ldr	x8, [sp, #8]
                zero_size: bool = T::IS_ZST || count == 0,
    40001ce4:	f1000108 	subs	x8, x8, #0x0
    40001ce8:	1a9f17e2 	cset	w2, eq	// eq = none
    40001cec:	52800028 	mov	w8, #0x1                   	// #1
    40001cf0:	2a0803e1 	mov	w1, w8
                precondition_check($($arg,)*);
    40001cf4:	97fffca3 	bl	40000f80 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E>
            if ::core::ub_checks::$kind() {
    40001cf8:	14000001 	b	40001cfc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x8c>
    40001cfc:	f94007e2 	ldr	x2, [sp, #8]
    40001d00:	f9400be0 	ldr	x0, [sp, #16]
    40001d04:	2a1f03e1 	mov	w1, wzr
        );
        write_bytes(dst, val, count)
    40001d08:	94001e60 	bl	40009688 <memset>
        if !ptr.is_null() {
    40001d0c:	17fffff0 	b	40001ccc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E+0x5c>

0000000040001d10 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
    40001d10:	d10343ff 	sub	sp, sp, #0xd0
    40001d14:	f90063fe 	str	x30, [sp, #192]
    40001d18:	f9000be4 	str	x4, [sp, #16]
    40001d1c:	f9000fe1 	str	x1, [sp, #24]
    40001d20:	f90013e0 	str	x0, [sp, #32]
    40001d24:	f9001be2 	str	x2, [sp, #48]
    40001d28:	f9001fe3 	str	x3, [sp, #56]
    40001d2c:	f90033e0 	str	x0, [sp, #96]
    40001d30:	f90037e1 	str	x1, [sp, #104]
    40001d34:	f9003be4 	str	x4, [sp, #112]
    40001d38:	9100c3e8 	add	x8, sp, #0x30
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
    40001d3c:	f9003fe8 	str	x8, [sp, #120]
        self.align.as_usize()
    40001d40:	f9401be8 	ldr	x8, [sp, #48]
    40001d44:	f9002fe8 	str	x8, [sp, #88]
    40001d48:	f9402fe8 	ldr	x8, [sp, #88]
    40001d4c:	aa0803e9 	mov	x9, x8
    40001d50:	f90017e9 	str	x9, [sp, #40]
    40001d54:	f90043e8 	str	x8, [sp, #128]
    40001d58:	14000001 	b	40001d5c <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0x4c>
    40001d5c:	f94017e1 	ldr	x1, [sp, #40]
    40001d60:	f9400be0 	ldr	x0, [sp, #16]
                precondition_check($($arg,)*);
    40001d64:	97fff9e7 	bl	40000500 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E>
    40001d68:	14000001 	b	40001d6c <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0x5c>
    40001d6c:	f9400be2 	ldr	x2, [sp, #16]
    40001d70:	f94017e1 	ldr	x1, [sp, #40]
    40001d74:	f94013e0 	ldr	x0, [sp, #32]
        unsafe { Layout { size, align: mem::transmute(align) } }
    40001d78:	f90047e1 	str	x1, [sp, #136]
    40001d7c:	f9004be2 	str	x2, [sp, #144]
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
    40001d80:	940012e8 	bl	40006920 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb663306ab11275a8E>
    40001d84:	aa0003e1 	mov	x1, x0
    40001d88:	f90007e1 	str	x1, [sp, #8]
    40001d8c:	f9004fe0 	str	x0, [sp, #152]
        if !new_ptr.is_null() {
    40001d90:	b5000060 	cbnz	x0, 40001d9c <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0x8c>
    40001d94:	14000001 	b	40001d98 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0x88>
    40001d98:	14000011 	b	40001ddc <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xcc>
    40001d9c:	f9400be8 	ldr	x8, [sp, #16]
    40001da0:	f9400fe9 	ldr	x9, [sp, #24]
            // SAFETY: the previously allocated block cannot overlap the newly allocated block.
            // The safety contract for `dealloc` must be upheld by the caller.
            unsafe {
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
    40001da4:	f90053e9 	str	x9, [sp, #160]
    40001da8:	9100c3e9 	add	x9, sp, #0x30
    40001dac:	f90057e9 	str	x9, [sp, #168]
        self.size
    40001db0:	f9401fe9 	ldr	x9, [sp, #56]
    40001db4:	f90027e9 	str	x9, [sp, #72]
    40001db8:	f9002be8 	str	x8, [sp, #80]
    40001dbc:	910143e9 	add	x9, sp, #0x50
    #[rustc_diagnostic_item = "cmp_ord_min"]
    fn min(self, other: Self) -> Self
    where
        Self: Sized,
    {
        if other < self { other } else { self }
    40001dc0:	f9005be9 	str	x9, [sp, #176]
    40001dc4:	910123e9 	add	x9, sp, #0x48
    40001dc8:	f9005fe9 	str	x9, [sp, #184]
                #[inline]
                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
                    Some(crate::intrinsics::three_way_compare(*self, *other))
                }
                #[inline(always)]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    40001dcc:	f94027e9 	ldr	x9, [sp, #72]
        if other < self { other } else { self }
    40001dd0:	eb090108 	subs	x8, x8, x9
    40001dd4:	54000123 	b.cc	40001df8 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xe8>  // b.lo, b.ul, b.last
    40001dd8:	14000005 	b	40001dec <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xdc>
    40001ddc:	f94007e0 	ldr	x0, [sp, #8]
                self.dealloc(ptr, layout);
            }
        }
        new_ptr
    }
    40001de0:	f94063fe 	ldr	x30, [sp, #192]
    40001de4:	910343ff 	add	sp, sp, #0xd0
    40001de8:	d65f03c0 	ret
    40001dec:	f94027e8 	ldr	x8, [sp, #72]
    40001df0:	f90023e8 	str	x8, [sp, #64]
    }
    40001df4:	14000004 	b	40001e04 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xf4>
    40001df8:	f9400be8 	ldr	x8, [sp, #16]
        if other < self { other } else { self }
    40001dfc:	f90023e8 	str	x8, [sp, #64]
    }
    40001e00:	14000001 	b	40001e04 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xf4>
            if ::core::ub_checks::$kind() {
    40001e04:	14000001 	b	40001e08 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xf8>
    40001e08:	f94007e1 	ldr	x1, [sp, #8]
    40001e0c:	f9400fe0 	ldr	x0, [sp, #24]
                precondition_check($($arg,)*);
    40001e10:	f94023e4 	ldr	x4, [sp, #64]
    40001e14:	52800028 	mov	w8, #0x1                   	// #1
    40001e18:	2a0803e3 	mov	w3, w8
    40001e1c:	aa0303e2 	mov	x2, x3
    40001e20:	97fffca0 	bl	400010a0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE>
            if ::core::ub_checks::$kind() {
    40001e24:	14000001 	b	40001e28 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0x118>
    40001e28:	f9400fe1 	ldr	x1, [sp, #24]
    40001e2c:	f94007e0 	ldr	x0, [sp, #8]
    unsafe { copy_nonoverlapping(src, dst, count) }
    40001e30:	f94023e2 	ldr	x2, [sp, #64]
    40001e34:	94001e69 	bl	400097d8 <memcpy>
    40001e38:	f9400fe1 	ldr	x1, [sp, #24]
    40001e3c:	f94013e0 	ldr	x0, [sp, #32]
                self.dealloc(ptr, layout);
    40001e40:	f9401be2 	ldr	x2, [sp, #48]
    40001e44:	f9401fe3 	ldr	x3, [sp, #56]
    40001e48:	940012da 	bl	400069b0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h420aa5dfb9add41cE>
    40001e4c:	17ffffe4 	b	40001ddc <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E+0xcc>

0000000040001e50 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E>:
            const fn precondition_check($($name:$ty),*) {
    40001e50:	d10203ff 	sub	sp, sp, #0x80
    40001e54:	f9000be1 	str	x1, [sp, #16]
    40001e58:	f9000fe0 	str	x0, [sp, #24]
    40001e5c:	2a0203e8 	mov	w8, w2
    40001e60:	b90027e8 	str	w8, [sp, #36]
    40001e64:	f9002fe0 	str	x0, [sp, #88]
    40001e68:	f90033e1 	str	x1, [sp, #96]
    40001e6c:	3901bfe2 	strb	w2, [sp, #111]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40001e70:	d503201f 	nop
    40001e74:	10043de8 	adr	x8, 4000a630 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xa68>
    40001e78:	f9003be8 	str	x8, [sp, #112]
            return intrinsics::ctpop(self);
    40001e7c:	d341fc28 	lsr	x8, x1, #1
    40001e80:	9200f108 	and	x8, x8, #0x5555555555555555
    40001e84:	eb080029 	subs	x9, x1, x8
    40001e88:	9200e528 	and	x8, x9, #0x3333333333333333
    40001e8c:	d342fd29 	lsr	x9, x9, #2
    40001e90:	9200e529 	and	x9, x9, #0x3333333333333333
    40001e94:	8b090108 	add	x8, x8, x9
    40001e98:	8b481108 	add	x8, x8, x8, lsr #4
    40001e9c:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40001ea0:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40001ea4:	9b097d08 	mul	x8, x8, x9
    40001ea8:	d378fd08 	lsr	x8, x8, #56
    40001eac:	b9007fe8 	str	w8, [sp, #124]
    40001eb0:	b9407fe8 	ldr	w8, [sp, #124]
        if !align.is_power_of_two() {
    40001eb4:	71000508 	subs	w8, w8, #0x1
    40001eb8:	54000141 	b.ne	40001ee0 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0x90>  // b.any
    40001ebc:	14000001 	b	40001ec0 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0x70>
    40001ec0:	f9400fe8 	ldr	x8, [sp, #24]
    40001ec4:	f9400be9 	ldr	x9, [sp, #16]
        unsafe { mem::transmute(self.cast::<()>()) }
    40001ec8:	aa0803ea 	mov	x10, x8
    40001ecc:	f90007ea 	str	x10, [sp, #8]
        self.addr() & (align - 1) == 0
    40001ed0:	f1000529 	subs	x9, x9, #0x1
    40001ed4:	8a090108 	and	x8, x8, x9
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    40001ed8:	b40002a8 	cbz	x8, 40001f2c <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xdc>
    40001edc:	14000017 	b	40001f38 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xe8>
        Arguments { pieces, fmt: None, args: &[] }
    40001ee0:	d503201f 	nop
    40001ee4:	10043a68 	adr	x8, 4000a630 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xa68>
    40001ee8:	f90017e8 	str	x8, [sp, #40]
    40001eec:	52800028 	mov	w8, #0x1                   	// #1
    40001ef0:	f9001be8 	str	x8, [sp, #48]
    40001ef4:	d503201f 	nop
    40001ef8:	1003d6c8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40001efc:	f9400109 	ldr	x9, [x8]
    40001f00:	f9400508 	ldr	x8, [x8, #8]
    40001f04:	f90027e9 	str	x9, [sp, #72]
    40001f08:	f9002be8 	str	x8, [sp, #80]
    40001f0c:	52800108 	mov	w8, #0x8                   	// #8
    40001f10:	f9001fe8 	str	x8, [sp, #56]
    40001f14:	aa1f03e8 	mov	x8, xzr
    40001f18:	f90023e8 	str	x8, [sp, #64]
            panic!("is_aligned_to: align is not a power-of-two");
    40001f1c:	d503201f 	nop
    40001f20:	10044401 	adr	x1, 4000a7a0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xbd8>
    40001f24:	9100a3e0 	add	x0, sp, #0x28
    40001f28:	94001656 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40001f2c:	b94027e8 	ldr	w8, [sp, #36]
    40001f30:	370000c8 	tbnz	w8, #0, 40001f48 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xf8>
    40001f34:	14000002 	b	40001f3c <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xec>
            "ptr::read_volatile requires that the pointer argument is aligned and non-null",
            (
                addr: *const () = src as *const (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    40001f38:	14000005 	b	40001f4c <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xfc>
    40001f3c:	f94007e8 	ldr	x8, [sp, #8]
    40001f40:	b5000108 	cbnz	x8, 40001f60 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0x110>
    40001f44:	14000002 	b	40001f4c <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0xfc>
    40001f48:	14000006 	b	40001f60 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E+0x110>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40001f4c:	d503201f 	nop
    40001f50:	10043780 	adr	x0, 4000a640 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xa78>
    40001f54:	52801c68 	mov	w8, #0xe3                  	// #227
    40001f58:	2a0803e1 	mov	w1, w8
    40001f5c:	9400166f 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40001f60:	910203ff 	add	sp, sp, #0x80
    40001f64:	d65f03c0 	ret
	...

0000000040001f70 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E>:
            const fn precondition_check($($name:$ty),*) {
    40001f70:	d10203ff 	sub	sp, sp, #0x80
    40001f74:	f90007e1 	str	x1, [sp, #8]
    40001f78:	f9000be0 	str	x0, [sp, #16]
    40001f7c:	2a0203e8 	mov	w8, w2
    40001f80:	b9001fe8 	str	w8, [sp, #28]
    40001f84:	f9002be0 	str	x0, [sp, #80]
    40001f88:	f9002fe1 	str	x1, [sp, #88]
    40001f8c:	39019fe2 	strb	w2, [sp, #103]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40001f90:	d503201f 	nop
    40001f94:	100434e8 	adr	x8, 4000a630 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xa68>
    40001f98:	f90037e8 	str	x8, [sp, #104]
            "ptr::write_volatile requires that the pointer argument is aligned and non-null",
            (
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
    40001f9c:	f9003be0 	str	x0, [sp, #112]
    40001fa0:	d341fc28 	lsr	x8, x1, #1
    40001fa4:	9200f108 	and	x8, x8, #0x5555555555555555
    40001fa8:	eb080029 	subs	x9, x1, x8
    40001fac:	9200e528 	and	x8, x9, #0x3333333333333333
    40001fb0:	d342fd29 	lsr	x9, x9, #2
    40001fb4:	9200e529 	and	x9, x9, #0x3333333333333333
    40001fb8:	8b090108 	add	x8, x8, x9
    40001fbc:	8b481108 	add	x8, x8, x8, lsr #4
    40001fc0:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40001fc4:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40001fc8:	9b097d08 	mul	x8, x8, x9
    40001fcc:	d378fd08 	lsr	x8, x8, #56
    40001fd0:	b9007fe8 	str	w8, [sp, #124]
    40001fd4:	b9407fe8 	ldr	w8, [sp, #124]
        if !align.is_power_of_two() {
    40001fd8:	71000508 	subs	w8, w8, #0x1
    40001fdc:	54000141 	b.ne	40002004 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x94>  // b.any
    40001fe0:	14000001 	b	40001fe4 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x74>
    40001fe4:	f9400be8 	ldr	x8, [sp, #16]
    40001fe8:	f94007e9 	ldr	x9, [sp, #8]
        unsafe { mem::transmute(self.cast::<()>()) }
    40001fec:	aa0803ea 	mov	x10, x8
    40001ff0:	f90003ea 	str	x10, [sp]
        self.addr() & (align - 1) == 0
    40001ff4:	f1000529 	subs	x9, x9, #0x1
    40001ff8:	8a090108 	and	x8, x8, x9
            ptr.is_aligned_to(align) && (is_zst || !ptr.is_null())
    40001ffc:	b40002a8 	cbz	x8, 40002050 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0xe0>
    40002000:	14000017 	b	4000205c <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0xec>
        Arguments { pieces, fmt: None, args: &[] }
    40002004:	d503201f 	nop
    40002008:	10043148 	adr	x8, 4000a630 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xa68>
    4000200c:	f90013e8 	str	x8, [sp, #32]
    40002010:	52800028 	mov	w8, #0x1                   	// #1
    40002014:	f90017e8 	str	x8, [sp, #40]
    40002018:	d503201f 	nop
    4000201c:	1003cda8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40002020:	f9400109 	ldr	x9, [x8]
    40002024:	f9400508 	ldr	x8, [x8, #8]
    40002028:	f90023e9 	str	x9, [sp, #64]
    4000202c:	f90027e8 	str	x8, [sp, #72]
    40002030:	52800108 	mov	w8, #0x8                   	// #8
    40002034:	f9001be8 	str	x8, [sp, #48]
    40002038:	aa1f03e8 	mov	x8, xzr
    4000203c:	f9001fe8 	str	x8, [sp, #56]
            panic!("is_aligned_to: align is not a power-of-two");
    40002040:	d503201f 	nop
    40002044:	10043ae1 	adr	x1, 4000a7a0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xbd8>
    40002048:	910083e0 	add	x0, sp, #0x20
    4000204c:	9400160d 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40002050:	b9401fe8 	ldr	w8, [sp, #28]
    40002054:	370000c8 	tbnz	w8, #0, 4000206c <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0xfc>
    40002058:	14000002 	b	40002060 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0xf0>
    4000205c:	14000005 	b	40002070 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x100>
    40002060:	f94003e8 	ldr	x8, [sp]
    40002064:	b5000108 	cbnz	x8, 40002084 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x114>
    40002068:	14000002 	b	40002070 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x100>
    4000206c:	14000006 	b	40002084 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E+0x114>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40002070:	d503201f 	nop
    40002074:	10043a20 	adr	x0, 4000a7b8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xbf0>
    40002078:	52801c88 	mov	w8, #0xe4                  	// #228
    4000207c:	2a0803e1 	mov	w1, w8
    40002080:	94001626 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40002084:	910203ff 	add	sp, sp, #0x80
    40002088:	d65f03c0 	ret
    4000208c:	00000000 	udf	#0

0000000040002090 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E>:
}

// not marked inline(never) since we want optimizers to be able to observe the specifics of this
// function, see tests/codegen/vec-reserve-extend.rs.
#[cold]
fn finish_grow<A>(
    40002090:	d10483ff 	sub	sp, sp, #0x120
    40002094:	a9117bfd 	stp	x29, x30, [sp, #272]
    40002098:	f9000be3 	str	x3, [sp, #16]
    4000209c:	f9000fe2 	str	x2, [sp, #24]
    400020a0:	f90013e8 	str	x8, [sp, #32]
    400020a4:	d503201f 	nop
    400020a8:	1003c7c8 	adr	x8, 400099a0 <memcpy+0x1c8>
    400020ac:	f9400109 	ldr	x9, [x8]
    400020b0:	f9400508 	ldr	x8, [x8, #8]
    400020b4:	f90017e0 	str	x0, [sp, #40]
    400020b8:	f9001be1 	str	x1, [sp, #48]
    400020bc:	f90047e3 	str	x3, [sp, #136]
    400020c0:	2a1f03ea 	mov	w10, wzr
    A: Allocator,
{
    alloc_guard(new_layout.size())?;

    let memory = if let Some((ptr, old_layout)) = current_memory {
        debug_assert_eq!(old_layout.align(), new_layout.align());
    400020c4:	39025fea 	strb	w10, [sp, #151]
    fn from_output(output: Self::Output) -> Self {
        Ok(output)
    }

    #[inline]
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
    400020c8:	f9004fe9 	str	x9, [sp, #152]
    400020cc:	f90053e8 	str	x8, [sp, #160]
        match self {
            Ok(v) => ControlFlow::Continue(v),
            Err(e) => ControlFlow::Break(Err(e)),
    400020d0:	f9005be9 	str	x9, [sp, #176]
    400020d4:	f9005fe8 	str	x8, [sp, #184]
    400020d8:	9100a3e8 	add	x8, sp, #0x28
    alloc_guard(new_layout.size())?;
    400020dc:	f90067e8 	str	x8, [sp, #200]
    400020e0:	f9401be8 	ldr	x8, [sp, #48]
    400020e4:	f9006be8 	str	x8, [sp, #208]
    let memory = if let Some((ptr, old_layout)) = current_memory {
    400020e8:	f9400448 	ldr	x8, [x2, #8]
    400020ec:	b4000368 	cbz	x8, 40002158 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0xc8>
    400020f0:	14000001 	b	400020f4 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x64>
    400020f4:	f9400fe8 	ldr	x8, [sp, #24]
    400020f8:	f9400109 	ldr	x9, [x8]
    400020fc:	aa0903e0 	mov	x0, x9
    40002100:	f90003e0 	str	x0, [sp]
    40002104:	f9006fe9 	str	x9, [sp, #216]
    40002108:	f9400509 	ldr	x9, [x8, #8]
    4000210c:	f9400908 	ldr	x8, [x8, #16]
    40002110:	f90027e9 	str	x9, [sp, #72]
    40002114:	f9002be8 	str	x8, [sp, #80]
    40002118:	910123e8 	add	x8, sp, #0x48
        unsafe {
            // The allocator checks for alignment equality
            hint::assert_unchecked(old_layout.align() == new_layout.align());
    4000211c:	f90073e8 	str	x8, [sp, #224]
        self.align.as_usize()
    40002120:	f94027e8 	ldr	x8, [sp, #72]
    40002124:	f90037e8 	str	x8, [sp, #104]
    40002128:	f94037e8 	ldr	x8, [sp, #104]
    4000212c:	9100a3e9 	add	x9, sp, #0x28
    40002130:	f90077e9 	str	x9, [sp, #232]
    40002134:	f94017e9 	ldr	x9, [sp, #40]
    40002138:	f9003be9 	str	x9, [sp, #112]
    4000213c:	f9403be9 	ldr	x9, [sp, #112]
    40002140:	eb090108 	subs	x8, x8, x9
    40002144:	1a9f17e8 	cset	w8, eq	// eq = none
    40002148:	2a0803e9 	mov	w9, w8
    4000214c:	b9000fe9 	str	w9, [sp, #12]
    40002150:	3903dfe8 	strb	w8, [sp, #247]
            if ::core::ub_checks::$kind() {
    40002154:	14000008 	b	40002174 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0xe4>
    40002158:	f9400be0 	ldr	x0, [sp, #16]
            alloc.grow(ptr, old_layout, new_layout)
        }
    } else {
        alloc.allocate(new_layout)
    4000215c:	f94017e1 	ldr	x1, [sp, #40]
    40002160:	f9401be2 	ldr	x2, [sp, #48]
    40002164:	94000717 	bl	40003dc0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h180607faa2fbb0e4E>
    40002168:	f9001fe0 	str	x0, [sp, #56]
    4000216c:	f90023e1 	str	x1, [sp, #64]
    let memory = if let Some((ptr, old_layout)) = current_memory {
    40002170:	1400000f 	b	400021ac <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x11c>
    40002174:	b9400fe8 	ldr	w8, [sp, #12]
                precondition_check($($arg,)*);
    40002178:	12000100 	and	w0, w8, #0x1
    4000217c:	97fffca1 	bl	40001400 <_ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E>
    40002180:	14000001 	b	40002184 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0xf4>
    40002184:	f94003e1 	ldr	x1, [sp]
    40002188:	f9400be0 	ldr	x0, [sp, #16]
            alloc.grow(ptr, old_layout, new_layout)
    4000218c:	f94027e2 	ldr	x2, [sp, #72]
    40002190:	f9402be3 	ldr	x3, [sp, #80]
    40002194:	f94017e4 	ldr	x4, [sp, #40]
    40002198:	f9401be5 	ldr	x5, [sp, #48]
    4000219c:	940006f9 	bl	40003d80 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17he6dc343d6fb67034E>
    400021a0:	f9001fe0 	str	x0, [sp, #56]
    400021a4:	f90023e1 	str	x1, [sp, #64]
    let memory = if let Some((ptr, old_layout)) = current_memory {
    400021a8:	14000001 	b	400021ac <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x11c>
    };

    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
    400021ac:	f9401fe9 	ldr	x9, [sp, #56]
    400021b0:	f94023e8 	ldr	x8, [sp, #64]
    400021b4:	f9002fe9 	str	x9, [sp, #88]
    400021b8:	f90033e8 	str	x8, [sp, #96]
    400021bc:	9100a3e8 	add	x8, sp, #0x28
    400021c0:	f9007fe8 	str	x8, [sp, #248]
        match self {
    400021c4:	f9402fe8 	ldr	x8, [sp, #88]
    400021c8:	b50001c8 	cbnz	x8, 40002200 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x170>
    400021cc:	14000001 	b	400021d0 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x140>
    400021d0:	f94013e9 	ldr	x9, [sp, #32]
    400021d4:	f94017ea 	ldr	x10, [sp, #40]
    400021d8:	f9401be8 	ldr	x8, [sp, #48]
    400021dc:	f9003fea 	str	x10, [sp, #120]
    400021e0:	f90043e8 	str	x8, [sp, #128]
)]
#[cfg(not(test))]
impl From<TryReserveErrorKind> for TryReserveError {
    #[inline]
    fn from(kind: TryReserveErrorKind) -> Self {
        Self { kind }
    400021e4:	f9403fea 	ldr	x10, [sp, #120]
    400021e8:	f94043e8 	ldr	x8, [sp, #128]
            Err(e) => Err(op(e)),
    400021ec:	f900052a 	str	x10, [x9, #8]
    400021f0:	f9000928 	str	x8, [x9, #16]
    400021f4:	52800028 	mov	w8, #0x1                   	// #1
    400021f8:	f9000128 	str	x8, [x9]
    400021fc:	1400000b 	b	40002228 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x198>
    40002200:	f94013e9 	ldr	x9, [sp, #32]
            Ok(t) => Ok(t),
    40002204:	f9402fea 	ldr	x10, [sp, #88]
    40002208:	f94033e8 	ldr	x8, [sp, #96]
    4000220c:	f90083ea 	str	x10, [sp, #256]
    40002210:	f90087e8 	str	x8, [sp, #264]
    40002214:	f900052a 	str	x10, [x9, #8]
    40002218:	f9000928 	str	x8, [x9, #16]
    4000221c:	aa1f03e8 	mov	x8, xzr
    40002220:	f9000128 	str	x8, [x9]
    }
    40002224:	14000001 	b	40002228 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E+0x198>
}
    40002228:	a9517bfd 	ldp	x29, x30, [sp, #272]
    4000222c:	910483ff 	add	sp, sp, #0x120
    40002230:	d65f03c0 	ret
	...

0000000040002240 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hbab775207bcf49d0E>:
    pub(crate) fn grow_one(&mut self) {
    40002240:	d10183ff 	sub	sp, sp, #0x60
    40002244:	f9002bfe 	str	x30, [sp, #80]
    40002248:	f90003e1 	str	x1, [sp]
    4000224c:	f9000fe0 	str	x0, [sp, #24]
    40002250:	52800108 	mov	w8, #0x8                   	// #8
    40002254:	2a0803e3 	mov	w3, w8
    fn grow_one(&mut self, elem_layout: Layout) {
    40002258:	f90013e3 	str	x3, [sp, #32]
    4000225c:	52800208 	mov	w8, #0x10                  	// #16
    40002260:	2a0803e4 	mov	w4, w8
    40002264:	f90017e4 	str	x4, [sp, #40]
        self.inner.grow_one(T::LAYOUT)
    40002268:	f9001be0 	str	x0, [sp, #48]
        if let Err(err) = self.grow_amortized(self.cap.as_inner(), 1, elem_layout) {
    4000226c:	f9400001 	ldr	x1, [x0]
    40002270:	f9001fe1 	str	x1, [sp, #56]
    40002274:	52800028 	mov	w8, #0x1                   	// #1
    40002278:	2a0803e2 	mov	w2, w8
    4000227c:	9400007d 	bl	40002470 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E>
    40002280:	f90007e0 	str	x0, [sp, #8]
    40002284:	f9000be1 	str	x1, [sp, #16]
    40002288:	f94007e8 	ldr	x8, [sp, #8]
    4000228c:	b24107e9 	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    40002290:	eb090108 	subs	x8, x8, x9
    40002294:	54000100 	b.eq	400022b4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hbab775207bcf49d0E+0x74>  // b.none
    40002298:	14000001 	b	4000229c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hbab775207bcf49d0E+0x5c>
    4000229c:	f94003e2 	ldr	x2, [sp]
    400022a0:	f94007e0 	ldr	x0, [sp, #8]
    400022a4:	f9400be1 	ldr	x1, [sp, #16]
    400022a8:	f90023e0 	str	x0, [sp, #64]
    400022ac:	f90027e1 	str	x1, [sp, #72]
            handle_error(err);
    400022b0:	940014ef 	bl	4000766c <_ZN5alloc7raw_vec12handle_error17h5e3ba97a9e19fb1cE>
    }
    400022b4:	f9402bfe 	ldr	x30, [sp, #80]
    400022b8:	910183ff 	add	sp, sp, #0x60
    400022bc:	d65f03c0 	ret

00000000400022c0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hd2b1f42881a82e74E>:
    pub(crate) fn grow_one(&mut self) {
    400022c0:	d10183ff 	sub	sp, sp, #0x60
    400022c4:	f9002bfe 	str	x30, [sp, #80]
    400022c8:	f90003e1 	str	x1, [sp]
    400022cc:	f9000fe0 	str	x0, [sp, #24]
    400022d0:	52800088 	mov	w8, #0x4                   	// #4
    400022d4:	2a0803e4 	mov	w4, w8
    fn grow_one(&mut self, elem_layout: Layout) {
    400022d8:	f90013e4 	str	x4, [sp, #32]
    400022dc:	f90017e4 	str	x4, [sp, #40]
        self.inner.grow_one(T::LAYOUT)
    400022e0:	f9001be0 	str	x0, [sp, #48]
        if let Err(err) = self.grow_amortized(self.cap.as_inner(), 1, elem_layout) {
    400022e4:	f9400001 	ldr	x1, [x0]
    400022e8:	f9001fe1 	str	x1, [sp, #56]
    400022ec:	52800028 	mov	w8, #0x1                   	// #1
    400022f0:	2a0803e2 	mov	w2, w8
    400022f4:	aa0403e3 	mov	x3, x4
    400022f8:	9400005e 	bl	40002470 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E>
    400022fc:	f90007e0 	str	x0, [sp, #8]
    40002300:	f9000be1 	str	x1, [sp, #16]
    40002304:	f94007e8 	ldr	x8, [sp, #8]
    40002308:	b24107e9 	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    4000230c:	eb090108 	subs	x8, x8, x9
    40002310:	54000100 	b.eq	40002330 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hd2b1f42881a82e74E+0x70>  // b.none
    40002314:	14000001 	b	40002318 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$8grow_one17hd2b1f42881a82e74E+0x58>
    40002318:	f94003e2 	ldr	x2, [sp]
    4000231c:	f94007e0 	ldr	x0, [sp, #8]
    40002320:	f9400be1 	ldr	x1, [sp, #16]
    40002324:	f90023e0 	str	x0, [sp, #64]
    40002328:	f90027e1 	str	x1, [sp, #72]
            handle_error(err);
    4000232c:	940014d0 	bl	4000766c <_ZN5alloc7raw_vec12handle_error17h5e3ba97a9e19fb1cE>
    }
    40002330:	f9402bfe 	ldr	x30, [sp, #80]
    40002334:	910183ff 	add	sp, sp, #0x60
    40002338:	d65f03c0 	ret
    4000233c:	00000000 	udf	#0

0000000040002340 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E>:
    fn current_memory(&self, elem_layout: Layout) -> Option<(NonNull<u8>, Layout)> {
    40002340:	d10343ff 	sub	sp, sp, #0xd0
    40002344:	f90063fe 	str	x30, [sp, #192]
    40002348:	f90007e0 	str	x0, [sp, #8]
    4000234c:	f9000be8 	str	x8, [sp, #16]
    40002350:	f90013e1 	str	x1, [sp, #32]
    40002354:	f90017e2 	str	x2, [sp, #40]
    40002358:	f90033e0 	str	x0, [sp, #96]
    4000235c:	910083e8 	add	x8, sp, #0x20
        if elem_layout.size() == 0 || self.cap.as_inner() == 0 {
    40002360:	f90037e8 	str	x8, [sp, #104]
        self.size
    40002364:	f94017e8 	ldr	x8, [sp, #40]
    40002368:	aa0803e9 	mov	x9, x8
    4000236c:	f9000fe9 	str	x9, [sp, #24]
    40002370:	f9003be8 	str	x8, [sp, #112]
    40002374:	b50000c8 	cbnz	x8, 4000238c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x4c>
    40002378:	14000001 	b	4000237c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x3c>
    4000237c:	f9400be9 	ldr	x9, [sp, #16]
    40002380:	aa1f03e8 	mov	x8, xzr
            None
    40002384:	f9000528 	str	x8, [x9, #8]
        if elem_layout.size() == 0 || self.cap.as_inner() == 0 {
    40002388:	14000010 	b	400023c8 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x88>
    4000238c:	f94007e8 	ldr	x8, [sp, #8]
    40002390:	f9400108 	ldr	x8, [x8]
    40002394:	f9003fe8 	str	x8, [sp, #120]
    40002398:	b5000068 	cbnz	x8, 400023a4 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x64>
    4000239c:	14000001 	b	400023a0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x60>
    400023a0:	17fffff7 	b	4000237c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x3c>
    400023a4:	f94007e8 	ldr	x8, [sp, #8]
    400023a8:	910083e9 	add	x9, sp, #0x20
                let alloc_size = elem_layout.size().unchecked_mul(self.cap.as_inner());
    400023ac:	f90043e9 	str	x9, [sp, #128]
    400023b0:	f9400108 	ldr	x8, [x8]
    400023b4:	aa0803e9 	mov	x9, x8
    400023b8:	f90003e9 	str	x9, [sp]
    400023bc:	f90047e8 	str	x8, [sp, #136]
    400023c0:	f9004be8 	str	x8, [sp, #144]
            if ::core::ub_checks::$kind() {
    400023c4:	14000004 	b	400023d4 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x94>
    }
    400023c8:	f94063fe 	ldr	x30, [sp, #192]
    400023cc:	910343ff 	add	sp, sp, #0xd0
    400023d0:	d65f03c0 	ret
    400023d4:	f9400fe0 	ldr	x0, [sp, #24]
    400023d8:	f94003e1 	ldr	x1, [sp]
                precondition_check($($arg,)*);
    400023dc:	97fffbf9 	bl	400013c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_mul18precondition_check17h936c014545df854bE>
    400023e0:	f94003e9 	ldr	x9, [sp]
    400023e4:	f9400fe8 	ldr	x8, [sp, #24]
                intrinsics::unchecked_mul(self, rhs)
    400023e8:	9b097d08 	mul	x8, x8, x9
    400023ec:	f9001be8 	str	x8, [sp, #48]
                let layout = Layout::from_size_align_unchecked(alloc_size, elem_layout.align());
    400023f0:	f9401be8 	ldr	x8, [sp, #48]
    400023f4:	f9004fe8 	str	x8, [sp, #152]
    400023f8:	910083e8 	add	x8, sp, #0x20
    400023fc:	f90053e8 	str	x8, [sp, #160]
        self.align.as_usize()
    40002400:	f94013e8 	ldr	x8, [sp, #32]
    40002404:	f9002fe8 	str	x8, [sp, #88]
    40002408:	f9402fe8 	ldr	x8, [sp, #88]
    4000240c:	f9001fe8 	str	x8, [sp, #56]
            if ::core::ub_checks::$kind() {
    40002410:	14000001 	b	40002414 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0xd4>
                precondition_check($($arg,)*);
    40002414:	f9401be0 	ldr	x0, [sp, #48]
    40002418:	f9401fe1 	ldr	x1, [sp, #56]
    4000241c:	97fff839 	bl	40000500 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h75ead411f61859c0E>
    40002420:	14000001 	b	40002424 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0xe4>
    40002424:	f9400be9 	ldr	x9, [sp, #16]
    40002428:	f94007eb 	ldr	x11, [sp, #8]
        unsafe { Layout { size, align: mem::transmute(align) } }
    4000242c:	f9401fea 	ldr	x10, [sp, #56]
    40002430:	f9401be8 	ldr	x8, [sp, #48]
    40002434:	f90057ea 	str	x10, [sp, #168]
    40002438:	f9005be8 	str	x8, [sp, #176]
                Some((self.ptr.into(), layout))
    4000243c:	f940056b 	ldr	x11, [x11, #8]
    40002440:	f9005feb 	str	x11, [sp, #184]
    40002444:	f90023eb 	str	x11, [sp, #64]
    40002448:	f90027ea 	str	x10, [sp, #72]
    4000244c:	f9002be8 	str	x8, [sp, #80]
    40002450:	f94023e8 	ldr	x8, [sp, #64]
    40002454:	f94027ea 	ldr	x10, [sp, #72]
    40002458:	f9402beb 	ldr	x11, [sp, #80]
    4000245c:	f900092b 	str	x11, [x9, #16]
    40002460:	f900052a 	str	x10, [x9, #8]
    40002464:	f9000128 	str	x8, [x9]
        if elem_layout.size() == 0 || self.cap.as_inner() == 0 {
    40002468:	17ffffd8 	b	400023c8 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E+0x88>
    4000246c:	00000000 	udf	#0

0000000040002470 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E>:
    fn grow_amortized(
    40002470:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40002474:	d10d83ff 	sub	sp, sp, #0x360
    40002478:	f90017e2 	str	x2, [sp, #40]
    4000247c:	f9001be1 	str	x1, [sp, #48]
    40002480:	f9001fe0 	str	x0, [sp, #56]
    40002484:	f0000028 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    40002488:	91274108 	add	x8, x8, #0x9d0
    4000248c:	f9400109 	ldr	x9, [x8]
    40002490:	f9400508 	ldr	x8, [x8, #8]
    40002494:	f90027e3 	str	x3, [sp, #72]
    40002498:	f9002be4 	str	x4, [sp, #80]
    4000249c:	f900efe0 	str	x0, [sp, #472]
    400024a0:	f900f3e1 	str	x1, [sp, #480]
    400024a4:	f900f7e2 	str	x2, [sp, #488]
    ///
    /// That is, this conversion is whatever the implementation of
    /// <code>[From]&lt;T&gt; for U</code> chooses to do.
    #[inline]
    #[track_caller]
    fn into(self) -> U {
    400024a8:	f900fbe9 	str	x9, [sp, #496]
    400024ac:	f900ffe8 	str	x8, [sp, #504]
    fn from(kind: TryReserveErrorKind) -> Self {
    400024b0:	f90103e9 	str	x9, [sp, #512]
    400024b4:	f90107e8 	str	x8, [sp, #520]
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    400024b8:	f9010be9 	str	x9, [sp, #528]
    400024bc:	f9010fe8 	str	x8, [sp, #536]
    400024c0:	910123e8 	add	x8, sp, #0x48
        if elem_layout.size() == 0 {
    400024c4:	f90117e8 	str	x8, [sp, #552]
        self.size
    400024c8:	f9402be8 	ldr	x8, [sp, #80]
    400024cc:	aa0803e9 	mov	x9, x8
    400024d0:	f90023e9 	str	x9, [sp, #64]
    400024d4:	f9011be8 	str	x8, [sp, #560]
    400024d8:	b5000128 	cbnz	x8, 400024fc <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x8c>
    400024dc:	14000001 	b	400024e0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x70>
            return Err(CapacityOverflow.into());
    400024e0:	f0000028 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    400024e4:	91274108 	add	x8, x8, #0x9d0
    400024e8:	f9400109 	ldr	x9, [x8]
    400024ec:	f9400508 	ldr	x8, [x8, #8]
    400024f0:	f9002fe9 	str	x9, [sp, #88]
    400024f4:	f90033e8 	str	x8, [sp, #96]
    400024f8:	14000008 	b	40002518 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0xa8>
    400024fc:	f9401be8 	ldr	x8, [sp, #48]
    40002500:	f94017e9 	ldr	x9, [sp, #40]
            if intrinsics::unlikely(intrinsics::add_with_overflow(self, rhs).1) {
    40002504:	ab090108 	adds	x8, x8, x9
    40002508:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    4000250c:	3908ffe8 	strb	w8, [sp, #575]
    if b {
    40002510:	37000508 	tbnz	w8, #0, 400025b0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x140>
    40002514:	14000006 	b	4000252c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0xbc>
    }
    40002518:	f9402fe0 	ldr	x0, [sp, #88]
    4000251c:	f94033e1 	ldr	x1, [sp, #96]
    40002520:	910d83ff 	add	sp, sp, #0x360
    40002524:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40002528:	d65f03c0 	ret
    4000252c:	f9401fe9 	ldr	x9, [sp, #56]
    40002530:	f9401be8 	ldr	x8, [sp, #48]
    40002534:	f94017ea 	ldr	x10, [sp, #40]
                Some(unsafe { intrinsics::unchecked_add(self, rhs) })
    40002538:	8b0a0108 	add	x8, x8, x10
    4000253c:	f9004be8 	str	x8, [sp, #144]
    40002540:	52800028 	mov	w8, #0x1                   	// #1
    40002544:	f90047e8 	str	x8, [sp, #136]
            Some(v) => Ok(v),
    40002548:	f9404be8 	ldr	x8, [sp, #144]
    4000254c:	f90123e8 	str	x8, [sp, #576]
    40002550:	f90043e8 	str	x8, [sp, #128]
    40002554:	b24107e8 	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    40002558:	f9003fe8 	str	x8, [sp, #120]
            Ok(v) => ControlFlow::Continue(v),
    4000255c:	f94043ea 	ldr	x10, [sp, #128]
    40002560:	f90127ea 	str	x10, [sp, #584]
    40002564:	f9003bea 	str	x10, [sp, #112]
    40002568:	f90037e8 	str	x8, [sp, #104]
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    4000256c:	f9403be8 	ldr	x8, [sp, #112]
    40002570:	aa0803ea 	mov	x10, x8
    40002574:	f90013ea 	str	x10, [sp, #32]
    40002578:	f9012be8 	str	x8, [sp, #592]
        let cap = cmp::max(self.cap.as_inner() * 2, required_cap);
    4000257c:	f9400129 	ldr	x9, [x9]
    40002580:	f9012fe9 	str	x9, [sp, #600]
    40002584:	d37ff929 	lsl	x9, x9, #1
    40002588:	f9005be9 	str	x9, [sp, #176]
    4000258c:	f9005fe8 	str	x8, [sp, #184]
    40002590:	9102e3e9 	add	x9, sp, #0xb8
        if other < self { self } else { other }
    40002594:	f90133e9 	str	x9, [sp, #608]
    40002598:	9102c3e9 	add	x9, sp, #0xb0
    4000259c:	f90137e9 	str	x9, [sp, #616]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    400025a0:	f9405be9 	ldr	x9, [sp, #176]
        if other < self { self } else { other }
    400025a4:	eb090108 	subs	x8, x8, x9
    400025a8:	54000483 	b.cc	40002638 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1c8>  // b.lo, b.ul, b.last
    400025ac:	14000020 	b	4000262c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1bc>
                None
    400025b0:	f0000028 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    400025b4:	91274108 	add	x8, x8, #0x9d0
    400025b8:	f940010a 	ldr	x10, [x8]
    400025bc:	f9400509 	ldr	x9, [x8, #8]
    400025c0:	f90047ea 	str	x10, [sp, #136]
    400025c4:	f9004be9 	str	x9, [sp, #144]
            None => Err(err),
    400025c8:	f9400109 	ldr	x9, [x8]
    400025cc:	f9400508 	ldr	x8, [x8, #8]
    400025d0:	f9003fe9 	str	x9, [sp, #120]
    400025d4:	f90043e8 	str	x8, [sp, #128]
            Err(e) => ControlFlow::Break(Err(e)),
    400025d8:	f9403fe9 	ldr	x9, [sp, #120]
    400025dc:	f94043e8 	ldr	x8, [sp, #128]
    400025e0:	f901a3e9 	str	x9, [sp, #832]
    400025e4:	f901a7e8 	str	x8, [sp, #840]
    400025e8:	f900c3e9 	str	x9, [sp, #384]
    400025ec:	f900c7e8 	str	x8, [sp, #392]
    400025f0:	f940c3e9 	ldr	x9, [sp, #384]
    400025f4:	f940c7e8 	ldr	x8, [sp, #392]
    400025f8:	f90037e9 	str	x9, [sp, #104]
    400025fc:	f9003be8 	str	x8, [sp, #112]
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    40002600:	f94037e9 	ldr	x9, [sp, #104]
    40002604:	f9403be8 	ldr	x8, [sp, #112]
    40002608:	f9004fe9 	str	x9, [sp, #152]
    4000260c:	f90053e8 	str	x8, [sp, #160]
impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {
    #[inline]
    #[track_caller]
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
        match residual {
            Err(e) => Err(From::from(e)),
    40002610:	f9404fe9 	ldr	x9, [sp, #152]
    40002614:	f94053e8 	ldr	x8, [sp, #160]
    40002618:	f901abe9 	str	x9, [sp, #848]
    4000261c:	f901afe8 	str	x8, [sp, #856]
    40002620:	f9002fe9 	str	x9, [sp, #88]
    40002624:	f90033e8 	str	x8, [sp, #96]
    40002628:	140000b7 	b	40002904 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x494>
    4000262c:	f94013e8 	ldr	x8, [sp, #32]
    40002630:	f90057e8 	str	x8, [sp, #168]
    }
    40002634:	14000004 	b	40002644 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1d4>
        if other < self { self } else { other }
    40002638:	f9405be8 	ldr	x8, [sp, #176]
    4000263c:	f90057e8 	str	x8, [sp, #168]
    }
    40002640:	14000001 	b	40002644 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1d4>
    40002644:	f94023e8 	ldr	x8, [sp, #64]
    40002648:	910123e9 	add	x9, sp, #0x48
        let cap = cmp::max(min_non_zero_cap(elem_layout.size()), cap);
    4000264c:	f9013be9 	str	x9, [sp, #624]
    if size == 1 {
    40002650:	f1000508 	subs	x8, x8, #0x1
    40002654:	540000a1 	b.ne	40002668 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1f8>  // b.any
    40002658:	14000001 	b	4000265c <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x1ec>
    4000265c:	52800108 	mov	w8, #0x8                   	// #8
        8
    40002660:	f90067e8 	str	x8, [sp, #200]
    if size == 1 {
    40002664:	14000005 	b	40002678 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x208>
    40002668:	f94023e8 	ldr	x8, [sp, #64]
    } else if size <= 1024 {
    4000266c:	f1100508 	subs	x8, x8, #0x401
    40002670:	54000203 	b.cc	400026b0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x240>  // b.lo, b.ul, b.last
    40002674:	1400000c 	b	400026a4 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x234>
        let cap = cmp::max(min_non_zero_cap(elem_layout.size()), cap);
    40002678:	f94057e8 	ldr	x8, [sp, #168]
    4000267c:	f9006be8 	str	x8, [sp, #208]
    40002680:	910343e8 	add	x8, sp, #0xd0
        if other < self { self } else { other }
    40002684:	f9013fe8 	str	x8, [sp, #632]
    40002688:	910323e8 	add	x8, sp, #0xc8
    4000268c:	f90143e8 	str	x8, [sp, #640]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    40002690:	f94067e9 	ldr	x9, [sp, #200]
    40002694:	f9406be8 	ldr	x8, [sp, #208]
        if other < self { self } else { other }
    40002698:	eb090108 	subs	x8, x8, x9
    4000269c:	54000183 	b.cc	400026cc <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x25c>  // b.lo, b.ul, b.last
    400026a0:	14000008 	b	400026c0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x250>
    400026a4:	52800028 	mov	w8, #0x1                   	// #1
        1
    400026a8:	f90067e8 	str	x8, [sp, #200]
    } else if size <= 1024 {
    400026ac:	14000004 	b	400026bc <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x24c>
    400026b0:	52800088 	mov	w8, #0x4                   	// #4
        4
    400026b4:	f90067e8 	str	x8, [sp, #200]
    } else if size <= 1024 {
    400026b8:	14000001 	b	400026bc <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x24c>
    if size == 1 {
    400026bc:	17ffffef 	b	40002678 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x208>
    400026c0:	f9406be8 	ldr	x8, [sp, #208]
    400026c4:	f90063e8 	str	x8, [sp, #192]
    }
    400026c8:	14000004 	b	400026d8 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x268>
        if other < self { self } else { other }
    400026cc:	f94067e8 	ldr	x8, [sp, #200]
    400026d0:	f90063e8 	str	x8, [sp, #192]
    }
    400026d4:	14000001 	b	400026d8 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x268>
        let new_layout = layout_array(cap, elem_layout)?;
    400026d8:	f94063e1 	ldr	x1, [sp, #192]
    400026dc:	f90147e1 	str	x1, [sp, #648]
    400026e0:	f94027e9 	ldr	x9, [sp, #72]
    400026e4:	f9402be8 	ldr	x8, [sp, #80]
    400026e8:	f90087e9 	str	x9, [sp, #264]
    400026ec:	f9008be8 	str	x8, [sp, #272]
    400026f0:	910683e8 	add	x8, sp, #0x1a0
    400026f4:	910423e0 	add	x0, sp, #0x108
    }
}

#[inline]
fn layout_array(cap: usize, elem_layout: Layout) -> Result<Layout, TryReserveError> {
    elem_layout.repeat(cap).map(|(layout, _pad)| layout).map_err(|_| CapacityOverflow.into())
    400026f8:	97fff792 	bl	40000540 <_ZN4core5alloc6layout6Layout6repeat17h97b5105ff74c3d73E>
        match self {
    400026fc:	f940d3e8 	ldr	x8, [sp, #416]
    40002700:	b5000488 	cbnz	x8, 40002790 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x320>
    40002704:	14000001 	b	40002708 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x298>
            Err(e) => Err(e),
    40002708:	f0000028 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    4000270c:	91274108 	add	x8, x8, #0x9d0
    40002710:	f940010a 	ldr	x10, [x8]
    40002714:	f9400509 	ldr	x9, [x8, #8]
    40002718:	f900cbea 	str	x10, [sp, #400]
    4000271c:	f900cfe9 	str	x9, [sp, #408]
            Err(e) => Err(op(e)),
    40002720:	f9400109 	ldr	x9, [x8]
    40002724:	f9400508 	ldr	x8, [x8, #8]
    40002728:	f9007fe9 	str	x9, [sp, #248]
    4000272c:	f90083e8 	str	x8, [sp, #256]
    40002730:	52800028 	mov	w8, #0x1                   	// #1
    40002734:	f9007be8 	str	x8, [sp, #240]
            Err(e) => ControlFlow::Break(Err(e)),
    40002738:	f9407fea 	ldr	x10, [sp, #248]
    4000273c:	f94083e9 	ldr	x9, [sp, #256]
    40002740:	f90193ea 	str	x10, [sp, #800]
    40002744:	f90197e9 	str	x9, [sp, #808]
    40002748:	f900dfea 	str	x10, [sp, #440]
    4000274c:	f900e3e9 	str	x9, [sp, #448]
    40002750:	f940dfea 	ldr	x10, [sp, #440]
    40002754:	f940e3e9 	ldr	x9, [sp, #448]
    40002758:	f90073ea 	str	x10, [sp, #224]
    4000275c:	f90077e9 	str	x9, [sp, #232]
    40002760:	f9006fe8 	str	x8, [sp, #216]
        let new_layout = layout_array(cap, elem_layout)?;
    40002764:	f94073e9 	ldr	x9, [sp, #224]
    40002768:	f94077e8 	ldr	x8, [sp, #232]
    4000276c:	f9008fe9 	str	x9, [sp, #280]
    40002770:	f90093e8 	str	x8, [sp, #288]
            Err(e) => Err(From::from(e)),
    40002774:	f9408fe9 	ldr	x9, [sp, #280]
    40002778:	f94093e8 	ldr	x8, [sp, #288]
    4000277c:	f9019be9 	str	x9, [sp, #816]
    40002780:	f9019fe8 	str	x8, [sp, #824]
    40002784:	f9002fe9 	str	x9, [sp, #88]
    40002788:	f90033e8 	str	x8, [sp, #96]
    4000278c:	1400005d 	b	40002900 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x490>
    40002790:	f9401fe0 	ldr	x0, [sp, #56]
            Ok(t) => Ok(op(t)),
    40002794:	f940d3e9 	ldr	x9, [sp, #416]
    40002798:	f940d7e8 	ldr	x8, [sp, #424]
    4000279c:	f9014be9 	str	x9, [sp, #656]
    400027a0:	f9014fe8 	str	x8, [sp, #664]
    400027a4:	f940dbea 	ldr	x10, [sp, #432]
    400027a8:	f90153ea 	str	x10, [sp, #672]
    400027ac:	f900cbe9 	str	x9, [sp, #400]
    400027b0:	f900cfe8 	str	x8, [sp, #408]
            Ok(t) => Ok(t),
    400027b4:	f940cbe9 	ldr	x9, [sp, #400]
    400027b8:	f940cfe8 	ldr	x8, [sp, #408]
    400027bc:	f90157e9 	str	x9, [sp, #680]
    400027c0:	f9015be8 	str	x8, [sp, #688]
    400027c4:	f9007fe9 	str	x9, [sp, #248]
    400027c8:	f90083e8 	str	x8, [sp, #256]
    400027cc:	aa1f03e8 	mov	x8, xzr
    400027d0:	f9007be8 	str	x8, [sp, #240]
            Ok(v) => ControlFlow::Continue(v),
    400027d4:	f9407fea 	ldr	x10, [sp, #248]
    400027d8:	f94083e9 	ldr	x9, [sp, #256]
    400027dc:	f9015fea 	str	x10, [sp, #696]
    400027e0:	f90163e9 	str	x9, [sp, #704]
    400027e4:	f90073ea 	str	x10, [sp, #224]
    400027e8:	f90077e9 	str	x9, [sp, #232]
    400027ec:	f9006fe8 	str	x8, [sp, #216]
    400027f0:	f94073e9 	ldr	x9, [sp, #224]
    400027f4:	f90007e9 	str	x9, [sp, #8]
    400027f8:	f94077e8 	ldr	x8, [sp, #232]
    400027fc:	f9000be8 	str	x8, [sp, #16]
    40002800:	f90167e9 	str	x9, [sp, #712]
    40002804:	f9016be8 	str	x8, [sp, #720]
        let ptr = finish_grow(new_layout, self.current_memory(elem_layout), &mut self.alloc)?;
    40002808:	f94027e1 	ldr	x1, [sp, #72]
    4000280c:	f9402be2 	ldr	x2, [sp, #80]
    40002810:	910563e8 	add	x8, sp, #0x158
    40002814:	f9000fe8 	str	x8, [sp, #24]
    40002818:	97fffeca 	bl	40002340 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14current_memory17h13b54e59a7116533E>
    4000281c:	f9401fe8 	ldr	x8, [sp, #56]
    40002820:	f94007e0 	ldr	x0, [sp, #8]
    40002824:	f9400be1 	ldr	x1, [sp, #16]
    40002828:	f9400fe2 	ldr	x2, [sp, #24]
    4000282c:	91004103 	add	x3, x8, #0x10
    40002830:	910503e8 	add	x8, sp, #0x140
    40002834:	97fffe17 	bl	40002090 <_ZN5alloc7raw_vec11finish_grow17h542a918f453ec199E>
        match self {
    40002838:	b94143e8 	ldr	w8, [sp, #320]
    4000283c:	36000328 	tbz	w8, #0, 400028a0 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x430>
    40002840:	14000001 	b	40002844 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x3d4>
            Err(e) => ControlFlow::Break(Err(e)),
    40002844:	f940a7e9 	ldr	x9, [sp, #328]
    40002848:	f940abe8 	ldr	x8, [sp, #336]
    4000284c:	f90183e9 	str	x9, [sp, #768]
    40002850:	f90187e8 	str	x8, [sp, #776]
    40002854:	f900e7e9 	str	x9, [sp, #456]
    40002858:	f900ebe8 	str	x8, [sp, #464]
    4000285c:	f940e7e9 	ldr	x9, [sp, #456]
    40002860:	f940ebe8 	ldr	x8, [sp, #464]
    40002864:	f9009be9 	str	x9, [sp, #304]
    40002868:	f9009fe8 	str	x8, [sp, #312]
    4000286c:	52800028 	mov	w8, #0x1                   	// #1
    40002870:	f90097e8 	str	x8, [sp, #296]
    40002874:	f9409be9 	ldr	x9, [sp, #304]
    40002878:	f9409fe8 	ldr	x8, [sp, #312]
    4000287c:	f900bbe9 	str	x9, [sp, #368]
    40002880:	f900bfe8 	str	x8, [sp, #376]
            Err(e) => Err(From::from(e)),
    40002884:	f940bbe9 	ldr	x9, [sp, #368]
    40002888:	f940bfe8 	ldr	x8, [sp, #376]
    4000288c:	f9018be9 	str	x9, [sp, #784]
    40002890:	f9018fe8 	str	x8, [sp, #792]
    40002894:	f9002fe9 	str	x9, [sp, #88]
    40002898:	f90033e8 	str	x8, [sp, #96]
    4000289c:	14000019 	b	40002900 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x490>
    400028a0:	f9401fe9 	ldr	x9, [sp, #56]
            Ok(v) => ControlFlow::Continue(v),
    400028a4:	f940a7ea 	ldr	x10, [sp, #328]
    400028a8:	f940abe8 	ldr	x8, [sp, #336]
    400028ac:	f9016fea 	str	x10, [sp, #728]
    400028b0:	f90173e8 	str	x8, [sp, #736]
    400028b4:	f9009bea 	str	x10, [sp, #304]
    400028b8:	f9009fe8 	str	x8, [sp, #312]
    400028bc:	aa1f03e8 	mov	x8, xzr
    400028c0:	f90097e8 	str	x8, [sp, #296]
    400028c4:	f9409bea 	ldr	x10, [sp, #304]
    400028c8:	f9409fe8 	ldr	x8, [sp, #312]
    400028cc:	f90177ea 	str	x10, [sp, #744]
    400028d0:	f9017be8 	str	x8, [sp, #752]
        unsafe { self.set_ptr_and_cap(ptr, cap) };
    400028d4:	f94063e8 	ldr	x8, [sp, #192]
    400028d8:	f9017fe8 	str	x8, [sp, #760]
        self.ptr = Unique::from(ptr.cast());
    400028dc:	f900052a 	str	x10, [x9, #8]
        self.cap = unsafe { Cap::new_unchecked(cap) };
    400028e0:	f9000128 	str	x8, [x9]
        Ok(())
    400028e4:	d503201f 	nop
    400028e8:	100385c8 	adr	x8, 400099a0 <memcpy+0x1c8>
    400028ec:	f9400109 	ldr	x9, [x8]
    400028f0:	f9400508 	ldr	x8, [x8, #8]
    400028f4:	f9002fe9 	str	x9, [sp, #88]
    400028f8:	f90033e8 	str	x8, [sp, #96]
    }
    400028fc:	17ffff07 	b	40002518 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0xa8>
    40002900:	14000001 	b	40002904 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0x494>
    40002904:	17ffff05 	b	40002518 <_ZN5alloc7raw_vec20RawVecInner$LT$A$GT$14grow_amortized17h5f2f820542915614E+0xa8>
	...

0000000040002910 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE>:
    }
}

impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
    #[inline]
    fn spec_next(&mut self) -> Option<T> {
    40002910:	d10183ff 	sub	sp, sp, #0x60
    40002914:	f9002bfe 	str	x30, [sp, #80]
    40002918:	f90003e0 	str	x0, [sp]
    4000291c:	f9000fe0 	str	x0, [sp, #24]
    /// assert!(r.is_empty());
    /// ```
    #[stable(feature = "range_is_empty", since = "1.47.0")]
    #[inline]
    pub fn is_empty(&self) -> bool {
        self.exhausted || !(self.start <= self.end)
    40002920:	39402008 	ldrb	w8, [x0, #8]
    40002924:	37000168 	tbnz	w8, #0, 40002950 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x40>
    40002928:	14000001 	b	4000292c <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x1c>
    4000292c:	f94003e9 	ldr	x9, [sp]
    40002930:	91001128 	add	x8, x9, #0x4
    40002934:	f9001be9 	str	x9, [sp, #48]
    40002938:	f9001fe8 	str	x8, [sp, #56]
                #[inline(always)]
                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
    4000293c:	b9400128 	ldr	w8, [x9]
    40002940:	b9400529 	ldr	w9, [x9, #4]
        if self.is_empty() {
    40002944:	6b090108 	subs	w8, w8, w9
    40002948:	540001cc 	b.gt	40002980 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x70>
    4000294c:	14000002 	b	40002954 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x44>
    40002950:	1400000c 	b	40002980 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x70>
    40002954:	f94003e9 	ldr	x9, [sp]
            return None;
        }
        let is_iterating = self.start < self.end;
    40002958:	91001128 	add	x8, x9, #0x4
    4000295c:	f90023e9 	str	x9, [sp, #64]
    40002960:	f90027e8 	str	x8, [sp, #72]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    40002964:	b9400128 	ldr	w8, [x9]
    40002968:	b9400529 	ldr	w9, [x9, #4]
    4000296c:	6b090108 	subs	w8, w8, w9
    40002970:	1a9fa7e8 	cset	w8, lt	// lt = tstop
    40002974:	39008fe8 	strb	w8, [sp, #35]
        Some(if is_iterating {
    40002978:	5400016b 	b.lt	400029a4 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x94>  // b.tstop
    4000297c:	14000004 	b	4000298c <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0x7c>
    40002980:	2a1f03e8 	mov	w8, wzr
            return None;
    40002984:	b9000fe8 	str	w8, [sp, #12]
            mem::replace(&mut self.start, n)
        } else {
            self.exhausted = true;
            self.start
        })
    }
    40002988:	14000018 	b	400029e8 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0xd8>
    4000298c:	f94003e8 	ldr	x8, [sp]
    40002990:	52800029 	mov	w9, #0x1                   	// #1
            self.exhausted = true;
    40002994:	39002109 	strb	w9, [x8, #8]
            self.start
    40002998:	b9400108 	ldr	w8, [x8]
    4000299c:	b90017e8 	str	w8, [sp, #20]
        Some(if is_iterating {
    400029a0:	1400000d 	b	400029d4 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0xc4>
    400029a4:	f94003e8 	ldr	x8, [sp]
            let n = unsafe { Step::forward_unchecked(self.start, 1) };
    400029a8:	b9400100 	ldr	w0, [x8]
    400029ac:	52800028 	mov	w8, #0x1                   	// #1
    400029b0:	2a0803e1 	mov	w1, w8
    400029b4:	9400050f 	bl	40003df0 <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4df220a4e6aec91dE>
    400029b8:	f94003e8 	ldr	x8, [sp]
    400029bc:	b90027e0 	str	w0, [sp, #36]
            mem::replace(&mut self.start, n)
    400029c0:	f90017e8 	str	x8, [sp, #40]
        crate::intrinsics::read_via_copy(src)
    400029c4:	b9400109 	ldr	w9, [x8]
    400029c8:	b90017e9 	str	w9, [sp, #20]
        intrinsics::write_via_move(dst, src)
    400029cc:	b9000100 	str	w0, [x8]
        Some(if is_iterating {
    400029d0:	14000001 	b	400029d4 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0xc4>
    400029d4:	b94017e8 	ldr	w8, [sp, #20]
    400029d8:	b90013e8 	str	w8, [sp, #16]
    400029dc:	52800028 	mov	w8, #0x1                   	// #1
    400029e0:	b9000fe8 	str	w8, [sp, #12]
    }
    400029e4:	14000001 	b	400029e8 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE+0xd8>
    400029e8:	b9400fe0 	ldr	w0, [sp, #12]
    400029ec:	b94013e1 	ldr	w1, [sp, #16]
    400029f0:	f9402bfe 	ldr	x30, [sp, #80]
    400029f4:	910183ff 	add	sp, sp, #0x60
    400029f8:	d65f03c0 	ret
    400029fc:	00000000 	udf	#0

0000000040002a00 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hd8716ec9e371a0e6E>:
    pub const fn new(start: Idx, end: Idx) -> Self {
    40002a00:	d10043ff 	sub	sp, sp, #0x10
    40002a04:	aa0803e9 	mov	x9, x8
    40002a08:	b9000be0 	str	w0, [sp, #8]
    40002a0c:	b9000fe1 	str	w1, [sp, #12]
        Self { start, end, exhausted: false }
    40002a10:	b9000120 	str	w0, [x9]
    40002a14:	b9000521 	str	w1, [x9, #4]
    40002a18:	2a1f03e8 	mov	w8, wzr
    40002a1c:	39002128 	strb	w8, [x9, #8]
    }
    40002a20:	910043ff 	add	sp, sp, #0x10
    40002a24:	d65f03c0 	ret
	...

0000000040002a30 <_ZN4core4iter5range110_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$4next17h16ce1e5c3b932c0cE>:
#[stable(feature = "inclusive_range", since = "1.26.0")]
impl<A: Step> Iterator for ops::RangeInclusive<A> {
    type Item = A;

    #[inline]
    fn next(&mut self) -> Option<A> {
    40002a30:	d10083ff 	sub	sp, sp, #0x20
    40002a34:	f9000bfe 	str	x30, [sp, #16]
    40002a38:	f90007e0 	str	x0, [sp, #8]
        self.spec_next()
    40002a3c:	97ffffb5 	bl	40002910 <_ZN107_$LT$core..ops..range..RangeInclusive$LT$T$GT$$u20$as$u20$core..iter..range..RangeInclusiveIteratorImpl$GT$9spec_next17hdaefe512920e3d1dE>
    }
    40002a40:	f9400bfe 	ldr	x30, [sp, #16]
    40002a44:	910083ff 	add	sp, sp, #0x20
    40002a48:	d65f03c0 	ret
    40002a4c:	00000000 	udf	#0

0000000040002a50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h86cd7991f84fb497E>:
    fn into_iter(self) -> I {
    40002a50:	aa0803e9 	mov	x9, x8
        self
    40002a54:	b9400008 	ldr	w8, [x0]
    40002a58:	b940040a 	ldr	w10, [x0, #4]
    40002a5c:	b940080b 	ldr	w11, [x0, #8]
    40002a60:	b900092b 	str	w11, [x9, #8]
    40002a64:	b900052a 	str	w10, [x9, #4]
    40002a68:	b9000128 	str	w8, [x9]
    }
    40002a6c:	d65f03c0 	ret

0000000040002a70 <_ZN4core3ptr14write_volatile17h1b4d0e7a24267aecE>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    40002a70:	d100c3ff 	sub	sp, sp, #0x30
    40002a74:	f90013fe 	str	x30, [sp, #32]
    40002a78:	f90003e0 	str	x0, [sp]
    40002a7c:	2a0103e8 	mov	w8, w1
    40002a80:	b9000fe8 	str	w8, [sp, #12]
    40002a84:	f9000be0 	str	x0, [sp, #16]
    40002a88:	39007fe1 	strb	w1, [sp, #31]
            if ::core::ub_checks::$kind() {
    40002a8c:	14000001 	b	40002a90 <_ZN4core3ptr14write_volatile17h1b4d0e7a24267aecE+0x20>
    40002a90:	f94003e0 	ldr	x0, [sp]
    40002a94:	52800028 	mov	w8, #0x1                   	// #1
    40002a98:	2a0803e1 	mov	w1, w8
    40002a9c:	2a1f03e2 	mov	w2, wzr
                precondition_check($($arg,)*);
    40002aa0:	97fffd34 	bl	40001f70 <_ZN4core3ptr14write_volatile18precondition_check17h398b19f7b38c8200E>
            if ::core::ub_checks::$kind() {
    40002aa4:	14000001 	b	40002aa8 <_ZN4core3ptr14write_volatile17h1b4d0e7a24267aecE+0x38>
    40002aa8:	b9400fe8 	ldr	w8, [sp, #12]
    40002aac:	f94003e9 	ldr	x9, [sp]
        );
        intrinsics::volatile_store(dst, src);
    40002ab0:	39000128 	strb	w8, [x9]
    }
}
    40002ab4:	f94013fe 	ldr	x30, [sp, #32]
    40002ab8:	9100c3ff 	add	sp, sp, #0x30
    40002abc:	d65f03c0 	ret

0000000040002ac0 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
    40002ac0:	d10103ff 	sub	sp, sp, #0x40
    40002ac4:	f9001bfe 	str	x30, [sp, #48]
    40002ac8:	f9000fe0 	str	x0, [sp, #24]
        self.0.next()
    40002acc:	f90013e0 	str	x0, [sp, #32]
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
        self.it.next().copied()
    40002ad0:	97fffaa0 	bl	40001550 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1bcc28b58741571eE>
    40002ad4:	f9000be0 	str	x0, [sp, #16]
        match self {
    40002ad8:	f9400be8 	ldr	x8, [sp, #16]
    40002adc:	b4000128 	cbz	x8, 40002b00 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E+0x40>
    40002ae0:	14000001 	b	40002ae4 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E+0x24>
            Some(&v) => Some(v),
    40002ae4:	f9400be8 	ldr	x8, [sp, #16]
    40002ae8:	39400108 	ldrb	w8, [x8]
    40002aec:	3900bfe8 	strb	w8, [sp, #47]
    40002af0:	39003fe8 	strb	w8, [sp, #15]
    40002af4:	52800028 	mov	w8, #0x1                   	// #1
    40002af8:	39003be8 	strb	w8, [sp, #14]
    40002afc:	14000008 	b	40002b1c <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E+0x5c>
            None => None,
    40002b00:	d503201f 	nop
    40002b04:	1003ecc8 	adr	x8, 4000a89c <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xcd4>
    40002b08:	39400109 	ldrb	w9, [x8]
    40002b0c:	39400508 	ldrb	w8, [x8, #1]
    40002b10:	39003be9 	strb	w9, [sp, #14]
    40002b14:	39003fe8 	strb	w8, [sp, #15]
    40002b18:	14000001 	b	40002b1c <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3d20015511b5e253E+0x5c>
    }
    40002b1c:	39403be0 	ldrb	w0, [sp, #14]
    40002b20:	39403fe1 	ldrb	w1, [sp, #15]
    40002b24:	f9401bfe 	ldr	x30, [sp, #48]
    40002b28:	910103ff 	add	sp, sp, #0x40
    40002b2c:	d65f03c0 	ret

0000000040002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>:
    /// println!("{f}");
    /// ```
    #[inline]
    pub const fn none() -> [Self; 0] {
        []
    }
    40002b30:	d65f03c0 	ret
	...

0000000040002b40 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE>:
extern "C" {
    static __heap_start: u8;
    static __heap_end: u8;
}

pub fn init_heap() {
    40002b40:	d10383ff 	sub	sp, sp, #0xe0
    40002b44:	f9006bfe 	str	x30, [sp, #208]
    unsafe {
        let heap_start = &__heap_start as *const u8 as usize;
    40002b48:	d503201f 	nop
    40002b4c:	1004b0e8 	adr	x8, 4000c168 <__heap_start>
    40002b50:	b4000128 	cbz	x8, 40002b74 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x34>
    40002b54:	14000001 	b	40002b58 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x18>
    40002b58:	d503201f 	nop
    40002b5c:	1004b068 	adr	x8, 4000c168 <__heap_start>
    40002b60:	f90013e8 	str	x8, [sp, #32]
        let heap_end = &__heap_end as *const u8 as usize;
    40002b64:	d0008048 	adrp	x8, 4100c000 <__heap_start+0xfffe98>
    40002b68:	9105a108 	add	x8, x8, #0x168
    40002b6c:	b50000a8 	cbnz	x8, 40002b80 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x40>
    40002b70:	1400000d 	b	40002ba4 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x64>
        let heap_start = &__heap_start as *const u8 as usize;
    40002b74:	d503201f 	nop
    40002b78:	1003e940 	adr	x0, 4000a8a0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xcd8>
    40002b7c:	9400138a 	bl	400079a4 <_ZN4core9panicking30panic_null_pointer_dereference17h9acbe6818f596985E>
        let heap_end = &__heap_end as *const u8 as usize;
    40002b80:	d0008048 	adrp	x8, 4100c000 <__heap_start+0xfffe98>
    40002b84:	9105a108 	add	x8, x8, #0x168
    40002b88:	f90017e8 	str	x8, [sp, #40]
        let heap_size = heap_end - heap_start;
    40002b8c:	f94017e8 	ldr	x8, [sp, #40]
    40002b90:	f94013e9 	ldr	x9, [sp, #32]
    40002b94:	eb090108 	subs	x8, x8, x9
    40002b98:	f9000fe8 	str	x8, [sp, #24]
    40002b9c:	54000683 	b.cc	40002c6c <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x12c>  // b.lo, b.ul, b.last
    40002ba0:	14000004 	b	40002bb0 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE+0x70>
        let heap_end = &__heap_end as *const u8 as usize;
    40002ba4:	d503201f 	nop
    40002ba8:	1003e880 	adr	x0, 4000a8b8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xcf0>
    40002bac:	9400137e 	bl	400079a4 <_ZN4core9panicking30panic_null_pointer_dereference17h9acbe6818f596985E>
    40002bb0:	f9400fe8 	ldr	x8, [sp, #24]
        let heap_size = heap_end - heap_start;
    40002bb4:	f9001be8 	str	x8, [sp, #48]
    40002bb8:	910263e8 	add	x8, sp, #0x98
    40002bbc:	910083e0 	add	x0, sp, #0x20
        $crate::uart::_print(format_args!($($arg)*))
    40002bc0:	97fff8c4 	bl	40000ed0 <_ZN4core3fmt2rt8Argument13new_lower_hex17h4b141567be405c84E>
    40002bc4:	9102a3e8 	add	x8, sp, #0xa8
    40002bc8:	9100a3e0 	add	x0, sp, #0x28
    40002bcc:	97fff8c1 	bl	40000ed0 <_ZN4core3fmt2rt8Argument13new_lower_hex17h4b141567be405c84E>
    40002bd0:	9102e3e8 	add	x8, sp, #0xb8
    40002bd4:	9100c3e0 	add	x0, sp, #0x30
    40002bd8:	940004f6 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    40002bdc:	f9404fe8 	ldr	x8, [sp, #152]
    40002be0:	f94053e9 	ldr	x9, [sp, #160]
    40002be4:	f9003be9 	str	x9, [sp, #112]
    40002be8:	f90037e8 	str	x8, [sp, #104]
    40002bec:	f94057e8 	ldr	x8, [sp, #168]
    40002bf0:	f9405be9 	ldr	x9, [sp, #176]
    40002bf4:	f90043e9 	str	x9, [sp, #128]
    40002bf8:	f9003fe8 	str	x8, [sp, #120]
    40002bfc:	f9405fe8 	ldr	x8, [sp, #184]
    40002c00:	f94063e9 	ldr	x9, [sp, #192]
    40002c04:	f9004be9 	str	x9, [sp, #144]
    40002c08:	f90047e8 	str	x8, [sp, #136]
    40002c0c:	d503201f 	nop
    40002c10:	1003e880 	adr	x0, 4000a920 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xd58>
    40002c14:	9100e3e8 	add	x8, sp, #0x38
    40002c18:	f90007e8 	str	x8, [sp, #8]
    40002c1c:	9101a3e1 	add	x1, sp, #0x68
    40002c20:	94000504 	bl	40004030 <_ZN4core3fmt9Arguments6new_v117h645cec9f4d6a1ab0E>
    40002c24:	f94007e0 	ldr	x0, [sp, #8]
    40002c28:	97fff6ee 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
            heap_start,
            heap_end,
            heap_size
        );

        ALLOCATOR.lock().init(heap_start as *mut u8, heap_size);
    40002c2c:	d503201f 	nop
    40002c30:	1004a7c0 	adr	x0, 4000c128 <_ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE>
    40002c34:	94000f37 	bl	40006910 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6e9cf018ae81c0b0E>
    40002c38:	94000882 	bl	40004e40 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17hb66dd1c03746e1feE>
    40002c3c:	f90067e0 	str	x0, [sp, #200]
    40002c40:	910323e0 	add	x0, sp, #0xc8
    40002c44:	f9000be0 	str	x0, [sp, #16]
    40002c48:	9400084e 	bl	40004d80 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3026557fc2af9b6aE>
    40002c4c:	f94013e1 	ldr	x1, [sp, #32]
    40002c50:	f9401be2 	ldr	x2, [sp, #48]
    40002c54:	94000ec7 	bl	40006770 <_ZN21linked_list_allocator4Heap4init17h1d7f8382229cd8e6E>
    40002c58:	f9400be0 	ldr	x0, [sp, #16]
    40002c5c:	94000541 	bl	40004160 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17h4c49ed86627f65aaE>
    }
}
    40002c60:	f9406bfe 	ldr	x30, [sp, #208]
    40002c64:	910383ff 	add	sp, sp, #0xe0
    40002c68:	d65f03c0 	ret
        let heap_size = heap_end - heap_start;
    40002c6c:	d503201f 	nop
    40002c70:	1003e300 	adr	x0, 4000a8d0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xd08>
    40002c74:	940018aa 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
	...

0000000040002c80 <__rust_alloc>:
static ALLOCATOR: LockedHeap = LockedHeap::empty();
    40002c80:	d100c3ff 	sub	sp, sp, #0x30
    40002c84:	f90013fe 	str	x30, [sp, #32]
    40002c88:	f9000be0 	str	x0, [sp, #16]
    40002c8c:	f9000fe1 	str	x1, [sp, #24]
    40002c90:	97fff60c 	bl	400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>
    40002c94:	f90007e0 	str	x0, [sp, #8]
    40002c98:	aa0103e2 	mov	x2, x1
    40002c9c:	f94007e1 	ldr	x1, [sp, #8]
    40002ca0:	d503201f 	nop
    40002ca4:	1004a420 	adr	x0, 4000c128 <_ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE>
    40002ca8:	94000f1e 	bl	40006920 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb663306ab11275a8E>
    40002cac:	f94013fe 	ldr	x30, [sp, #32]
    40002cb0:	9100c3ff 	add	sp, sp, #0x30
    40002cb4:	d65f03c0 	ret
	...

0000000040002cc0 <__rust_dealloc>:
    40002cc0:	d10103ff 	sub	sp, sp, #0x40
    40002cc4:	f9001bfe 	str	x30, [sp, #48]
    40002cc8:	f90003e2 	str	x2, [sp]
    40002ccc:	aa0103e8 	mov	x8, x1
    40002cd0:	f94003e1 	ldr	x1, [sp]
    40002cd4:	f90007e8 	str	x8, [sp, #8]
    40002cd8:	aa0003e8 	mov	x8, x0
    40002cdc:	f94007e0 	ldr	x0, [sp, #8]
    40002ce0:	f9000be8 	str	x8, [sp, #16]
    40002ce4:	f9000fe8 	str	x8, [sp, #24]
    40002ce8:	f90013e0 	str	x0, [sp, #32]
    40002cec:	f90017e1 	str	x1, [sp, #40]
    40002cf0:	97fff5f4 	bl	400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>
    40002cf4:	aa0003e2 	mov	x2, x0
    40002cf8:	aa0103e3 	mov	x3, x1
    40002cfc:	f9400be1 	ldr	x1, [sp, #16]
    40002d00:	d503201f 	nop
    40002d04:	1004a120 	adr	x0, 4000c128 <_ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE>
    40002d08:	94000f2a 	bl	400069b0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h420aa5dfb9add41cE>
    40002d0c:	f9401bfe 	ldr	x30, [sp, #48]
    40002d10:	910103ff 	add	sp, sp, #0x40
    40002d14:	d65f03c0 	ret
	...

0000000040002d20 <__rust_realloc>:
    40002d20:	d10143ff 	sub	sp, sp, #0x50
    40002d24:	f90023fe 	str	x30, [sp, #64]
    40002d28:	f9000be3 	str	x3, [sp, #16]
    40002d2c:	f90003e2 	str	x2, [sp]
    40002d30:	aa0103e8 	mov	x8, x1
    40002d34:	f94003e1 	ldr	x1, [sp]
    40002d38:	f90007e8 	str	x8, [sp, #8]
    40002d3c:	aa0003e8 	mov	x8, x0
    40002d40:	f94007e0 	ldr	x0, [sp, #8]
    40002d44:	f9000fe8 	str	x8, [sp, #24]
    40002d48:	f90013e8 	str	x8, [sp, #32]
    40002d4c:	f90017e0 	str	x0, [sp, #40]
    40002d50:	f9001be1 	str	x1, [sp, #48]
    40002d54:	f9001fe3 	str	x3, [sp, #56]
    40002d58:	97fff5da 	bl	400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>
    40002d5c:	f9400be4 	ldr	x4, [sp, #16]
    40002d60:	aa0003e2 	mov	x2, x0
    40002d64:	aa0103e3 	mov	x3, x1
    40002d68:	f9400fe1 	ldr	x1, [sp, #24]
    40002d6c:	d503201f 	nop
    40002d70:	10049dc0 	adr	x0, 4000c128 <_ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE>
    40002d74:	97fffbe7 	bl	40001d10 <_ZN4core5alloc6global11GlobalAlloc7realloc17h32b7a9a59aa31cd7E>
    40002d78:	f94023fe 	ldr	x30, [sp, #64]
    40002d7c:	910143ff 	add	sp, sp, #0x50
    40002d80:	d65f03c0 	ret
	...

0000000040002d90 <__rust_alloc_zeroed>:
    40002d90:	d100c3ff 	sub	sp, sp, #0x30
    40002d94:	f90013fe 	str	x30, [sp, #32]
    40002d98:	f9000be0 	str	x0, [sp, #16]
    40002d9c:	f9000fe1 	str	x1, [sp, #24]
    40002da0:	97fff5c8 	bl	400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>
    40002da4:	f90007e0 	str	x0, [sp, #8]
    40002da8:	aa0103e2 	mov	x2, x1
    40002dac:	f94007e1 	ldr	x1, [sp, #8]
    40002db0:	d503201f 	nop
    40002db4:	10049ba0 	adr	x0, 4000c128 <_ZN11arm_rstiny29allocator9ALLOCATOR17h9924bab195736d7fE>
    40002db8:	97fffbae 	bl	40001c70 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h4bc3020be10f56f0E>
    40002dbc:	f94013fe 	ldr	x30, [sp, #32]
    40002dc0:	9100c3ff 	add	sp, sp, #0x30
    40002dc4:	d65f03c0 	ret
	...

0000000040002dd0 <_ZN11arm_rstiny29allocator19alloc_error_handler17h49c90527103449b0E>:

#[alloc_error_handler]
fn alloc_error_handler(layout: Layout) -> ! {
    40002dd0:	d10203ff 	sub	sp, sp, #0x80
    40002dd4:	f9003bfe 	str	x30, [sp, #112]
    40002dd8:	f9000be0 	str	x0, [sp, #16]
    40002ddc:	f9000fe1 	str	x1, [sp, #24]
    40002de0:	910183e8 	add	x8, sp, #0x60
    40002de4:	910043e0 	add	x0, sp, #0x10
    panic!("allocation error: {:?}", layout)
    40002de8:	97fff84a 	bl	40000f10 <_ZN4core3fmt2rt8Argument9new_debug17had42e92395b2adbfE>
    40002dec:	f94033e8 	ldr	x8, [sp, #96]
    40002df0:	f94037e9 	ldr	x9, [sp, #104]
    40002df4:	f9002fe9 	str	x9, [sp, #88]
    40002df8:	f9002be8 	str	x8, [sp, #80]
    40002dfc:	d503201f 	nop
    40002e00:	1003dbc0 	adr	x0, 4000a978 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xdb0>
    40002e04:	910083e8 	add	x8, sp, #0x20
    40002e08:	f90007e8 	str	x8, [sp, #8]
    40002e0c:	910143e1 	add	x1, sp, #0x50
    40002e10:	97fff54c 	bl	40000340 <_ZN4core3fmt9Arguments6new_v117h9ed57ca217822b21E>
    40002e14:	f94007e0 	ldr	x0, [sp, #8]
    40002e18:	d503201f 	nop
    40002e1c:	1003db61 	adr	x1, 4000a988 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xdc0>
    40002e20:	94001298 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
	...

0000000040002e30 <__rg_oom>:
fn alloc_error_handler(layout: Layout) -> ! {
    40002e30:	d10083ff 	sub	sp, sp, #0x20
    40002e34:	f9000bfe 	str	x30, [sp, #16]
    40002e38:	f90003e0 	str	x0, [sp]
    40002e3c:	f90007e1 	str	x1, [sp, #8]
    40002e40:	97fff5a0 	bl	400004c0 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h10de6bd10a6f2540E>
    40002e44:	97ffffe3 	bl	40002dd0 <_ZN11arm_rstiny29allocator19alloc_error_handler17h49c90527103449b0E>
	...

0000000040002e50 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub const fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
    40002e50:	d10303ff 	sub	sp, sp, #0xc0
    40002e54:	f9005bfe 	str	x30, [sp, #176]
    40002e58:	f90007e2 	str	x2, [sp, #8]
    40002e5c:	f9000be1 	str	x1, [sp, #16]
    40002e60:	b9001fe0 	str	w0, [sp, #28]
    40002e64:	b9002fe0 	str	w0, [sp, #44]
    40002e68:	f9001be1 	str	x1, [sp, #48]
    40002e6c:	f9001fe2 	str	x2, [sp, #56]
        ..MAX_ONE_B => 1,
    40002e70:	71020008 	subs	w8, w0, #0x80
    40002e74:	540000c3 	b.cc	40002e8c <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x3c>  // b.lo, b.ul, b.last
    40002e78:	14000001 	b	40002e7c <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x2c>
    40002e7c:	b9401fe8 	ldr	w8, [sp, #28]
        ..MAX_TWO_B => 2,
    40002e80:	71200108 	subs	w8, w8, #0x800
    40002e84:	54000163 	b.cc	40002eb0 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x60>  // b.lo, b.ul, b.last
    40002e88:	14000006 	b	40002ea0 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x50>
    40002e8c:	f94007e8 	ldr	x8, [sp, #8]
    40002e90:	52800029 	mov	w9, #0x1                   	// #1
        ..MAX_ONE_B => 1,
    40002e94:	f90013e9 	str	x9, [sp, #32]
    let len = len_utf8(code);
    match (len, &mut *dst) {
        (1, [a, ..]) => {
    40002e98:	b5000b48 	cbnz	x8, 40003000 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x1b0>
    40002e9c:	14000017 	b	40002ef8 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0xa8>
    40002ea0:	b9401fe8 	ldr	w8, [sp, #28]
        ..MAX_THREE_B => 3,
    40002ea4:	71404108 	subs	w8, w8, #0x10, lsl #12
    40002ea8:	540001c3 	b.cc	40002ee0 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x90>  // b.lo, b.ul, b.last
    40002eac:	14000007 	b	40002ec8 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x78>
    40002eb0:	f94007e8 	ldr	x8, [sp, #8]
    40002eb4:	52800049 	mov	w9, #0x2                   	// #2
        ..MAX_TWO_B => 2,
    40002eb8:	f90013e9 	str	x9, [sp, #32]
            *a = code as u8;
        }
        (2, [a, b, ..]) => {
    40002ebc:	f1000508 	subs	x8, x8, #0x1
    40002ec0:	54000888 	b.hi	40002fd0 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x180>  // b.pmore
    40002ec4:	1400000d 	b	40002ef8 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0xa8>
    40002ec8:	f94007e8 	ldr	x8, [sp, #8]
    40002ecc:	52800089 	mov	w9, #0x4                   	// #4
        _ => 4,
    40002ed0:	f90013e9 	str	x9, [sp, #32]
        (3, [a, b, c, ..]) => {
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
            *c = (code & 0x3F) as u8 | TAG_CONT;
        }
        (4, [a, b, c, d, ..]) => {
    40002ed4:	f1000d08 	subs	x8, x8, #0x3
    40002ed8:	54000208 	b.hi	40002f18 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0xc8>  // b.pmore
    40002edc:	14000007 	b	40002ef8 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0xa8>
    40002ee0:	f94007e8 	ldr	x8, [sp, #8]
    40002ee4:	52800069 	mov	w9, #0x3                   	// #3
        ..MAX_THREE_B => 3,
    40002ee8:	f90013e9 	str	x9, [sp, #32]
        (3, [a, b, c, ..]) => {
    40002eec:	f1000908 	subs	x8, x8, #0x2
    40002ef0:	540004e8 	b.hi	40002f8c <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x13c>  // b.pmore
    40002ef4:	14000001 	b	40002ef8 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0xa8>
    40002ef8:	f94007e2 	ldr	x2, [sp, #8]
    40002efc:	b9401fe0 	ldr	w0, [sp, #28]
        _ => {
            const_panic!(
                "encode_utf8: buffer does not have enough bytes to encode code point",
                "encode_utf8: need {len} bytes to encode U+{code:04X} but buffer has just {dst_len}",
                code: u32 = code,
                len: usize = len,
    40002f00:	f94013e1 	ldr	x1, [sp, #32]
    40002f04:	f90047e1 	str	x1, [sp, #136]
                dst_len: usize = dst.len(),
    40002f08:	f9004be2 	str	x2, [sp, #144]
        const_eval_select(($($val,)*), compiletime, runtime)
    40002f0c:	d503201f 	nop
    40002f10:	1003d843 	adr	x3, 4000aa18 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xe50>
    40002f14:	940017c9 	bl	40008e38 <_ZN4core4char7methods15encode_utf8_raw8do_panic7runtime17h0a2e29c13556ce17E>
    40002f18:	f9400be9 	ldr	x9, [sp, #16]
    40002f1c:	b9401fea 	ldr	w10, [sp, #28]
        (4, [a, b, c, d, ..]) => {
    40002f20:	f90023e9 	str	x9, [sp, #64]
    40002f24:	91000528 	add	x8, x9, #0x1
    40002f28:	f90027e8 	str	x8, [sp, #72]
    40002f2c:	91000928 	add	x8, x9, #0x2
    40002f30:	f9002be8 	str	x8, [sp, #80]
    40002f34:	91000d28 	add	x8, x9, #0x3
    40002f38:	f9002fe8 	str	x8, [sp, #88]
    40002f3c:	52801e08 	mov	w8, #0xf0                  	// #240
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
    40002f40:	33125148 	bfxil	w8, w10, #18, #3
    40002f44:	39000128 	strb	w8, [x9]
    40002f48:	52801008 	mov	w8, #0x80                  	// #128
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
    40002f4c:	2a0803eb 	mov	w11, w8
    40002f50:	330c454b 	bfxil	w11, w10, #12, #6
    40002f54:	3900052b 	strb	w11, [x9, #1]
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    40002f58:	2a0803eb 	mov	w11, w8
    40002f5c:	33062d4b 	bfxil	w11, w10, #6, #6
    40002f60:	3900092b 	strb	w11, [x9, #2]
            *d = (code & 0x3F) as u8 | TAG_CONT;
    40002f64:	33001548 	bfxil	w8, w10, #0, #6
    40002f68:	39000d28 	strb	w8, [x9, #3]
        }
    40002f6c:	14000001 	b	40002f70 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x120>
    40002f70:	f9400be8 	ldr	x8, [sp, #16]
        self as *mut [T] as *mut T
    40002f74:	f90053e8 	str	x8, [sp, #160]
            )
        }
    };
    // SAFETY: `<&mut [u8]>::as_mut_ptr` is guaranteed to return a valid pointer and `len` has been tested to be within bounds.
    unsafe { slice::from_raw_parts_mut(dst.as_mut_ptr(), len) }
    40002f78:	f94013e8 	ldr	x8, [sp, #32]
    40002f7c:	aa0803e0 	mov	x0, x8
    40002f80:	f90003e0 	str	x0, [sp]
    40002f84:	f90057e8 	str	x8, [sp, #168]
    40002f88:	14000023 	b	40003014 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x1c4>
    40002f8c:	f9400be9 	ldr	x9, [sp, #16]
    40002f90:	b9401fea 	ldr	w10, [sp, #28]
        (3, [a, b, c, ..]) => {
    40002f94:	f90033e9 	str	x9, [sp, #96]
    40002f98:	91000528 	add	x8, x9, #0x1
    40002f9c:	f90037e8 	str	x8, [sp, #104]
    40002fa0:	91000928 	add	x8, x9, #0x2
    40002fa4:	f9003be8 	str	x8, [sp, #112]
    40002fa8:	52801c08 	mov	w8, #0xe0                  	// #224
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
    40002fac:	330c3d48 	bfxil	w8, w10, #12, #4
    40002fb0:	39000128 	strb	w8, [x9]
    40002fb4:	52801008 	mov	w8, #0x80                  	// #128
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    40002fb8:	2a0803eb 	mov	w11, w8
    40002fbc:	33062d4b 	bfxil	w11, w10, #6, #6
    40002fc0:	3900052b 	strb	w11, [x9, #1]
            *c = (code & 0x3F) as u8 | TAG_CONT;
    40002fc4:	33001548 	bfxil	w8, w10, #0, #6
    40002fc8:	39000928 	strb	w8, [x9, #2]
        }
    40002fcc:	17ffffe9 	b	40002f70 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x120>
    40002fd0:	f9400be9 	ldr	x9, [sp, #16]
    40002fd4:	b9401fea 	ldr	w10, [sp, #28]
        (2, [a, b, ..]) => {
    40002fd8:	f9003fe9 	str	x9, [sp, #120]
    40002fdc:	91000528 	add	x8, x9, #0x1
    40002fe0:	f90043e8 	str	x8, [sp, #128]
    40002fe4:	52801808 	mov	w8, #0xc0                  	// #192
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
    40002fe8:	33062948 	bfxil	w8, w10, #6, #5
    40002fec:	39000128 	strb	w8, [x9]
    40002ff0:	52801008 	mov	w8, #0x80                  	// #128
            *b = (code & 0x3F) as u8 | TAG_CONT;
    40002ff4:	33001548 	bfxil	w8, w10, #0, #6
    40002ff8:	39000528 	strb	w8, [x9, #1]
        }
    40002ffc:	17ffffdd 	b	40002f70 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x120>
    40003000:	b9401fe8 	ldr	w8, [sp, #28]
    40003004:	f9400be9 	ldr	x9, [sp, #16]
        (1, [a, ..]) => {
    40003008:	f9004fe9 	str	x9, [sp, #152]
            *a = code as u8;
    4000300c:	39000128 	strb	w8, [x9]
        }
    40003010:	17ffffd8 	b	40002f70 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x120>
    40003014:	f94003e3 	ldr	x3, [sp]
    40003018:	f9400be0 	ldr	x0, [sp, #16]
    4000301c:	52800028 	mov	w8, #0x1                   	// #1
    40003020:	2a0803e2 	mov	w2, w8
                precondition_check($($arg,)*);
    40003024:	aa0203e1 	mov	x1, x2
    40003028:	97fffa32 	bl	400018f0 <_ZN4core5slice3raw18from_raw_parts_mut18precondition_check17he22d529b64f4ccf0E>
            if ::core::ub_checks::$kind() {
    4000302c:	14000001 	b	40003030 <_ZN4core4char7methods15encode_utf8_raw17h2562643a978bce9cE+0x1e0>
    40003030:	f94003e1 	ldr	x1, [sp]
    40003034:	f9400be0 	ldr	x0, [sp, #16]
}
    40003038:	f9405bfe 	ldr	x30, [sp, #176]
    4000303c:	910303ff 	add	sp, sp, #0xc0
    40003040:	d65f03c0 	ret
	...

0000000040003050 <rust_main>:

// 引入汇编启动代码
core::arch::global_asm!(include_str!("boot.s"));

#[no_mangle]
pub extern "C" fn rust_main() -> ! {
    40003050:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40003054:	d11c03ff 	sub	sp, sp, #0x700
    40003058:	f90003ff 	str	xzr, [sp]
    // 初始化 UART
    UART.init();
    4000305c:	d503201f 	nop
    40003060:	10035b40 	adr	x0, 40009bc8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E>
    40003064:	97fff59f 	bl	400006e0 <_ZN11arm_rstiny24uart4Uart4init17hc185fb65f8a637ddE>
    40003068:	97fffeb2 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    4000306c:	d503201f 	nop
    40003070:	1003cf40 	adr	x0, 4000aa58 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xe90>
    40003074:	910383e8 	add	x8, sp, #0xe0
    40003078:	f90057e8 	str	x8, [sp, #168]
    4000307c:	910443e1 	add	x1, sp, #0x110
    40003080:	97fff488 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003084:	f94057e0 	ldr	x0, [sp, #168]
    40003088:	97fff5d6 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    4000308c:	97fffea9 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    40003090:	d503201f 	nop
    40003094:	1003cfe0 	adr	x0, 4000aa90 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xec8>
    40003098:	910463e8 	add	x8, sp, #0x118
    4000309c:	f9005be8 	str	x8, [sp, #176]
    400030a0:	910523e1 	add	x1, sp, #0x148
    400030a4:	97fff47f 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    400030a8:	f9405be0 	ldr	x0, [sp, #176]
    400030ac:	97fff5cd 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400030b0:	97fffea0 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    400030b4:	d503201f 	nop
    400030b8:	1003d040 	adr	x0, 4000aac0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xef8>
    400030bc:	910543e8 	add	x8, sp, #0x150
    400030c0:	f9005fe8 	str	x8, [sp, #184]
    400030c4:	910603e1 	add	x1, sp, #0x180
    400030c8:	97fff476 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    400030cc:	f9405fe0 	ldr	x0, [sp, #184]
    400030d0:	97fff5c4 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    println!("ARM RSTiny2 - Rust Bare Metal OS");
    println!("================================");

    // 初始化堆内存分配器
    println!("Initializing heap allocator...");
    allocator::init_heap();
    400030d4:	97fffe9b 	bl	40002b40 <_ZN11arm_rstiny29allocator9init_heap17hd2c1a66f354bdb4bE>
    400030d8:	97fffe96 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    400030dc:	d503201f 	nop
    400030e0:	1003d100 	adr	x0, 4000ab00 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xf38>
    400030e4:	910623e8 	add	x8, sp, #0x188
    400030e8:	f90063e8 	str	x8, [sp, #192]
    400030ec:	9106e3e1 	add	x1, sp, #0x1b8
    400030f0:	97fff46c 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    400030f4:	f94063e0 	ldr	x0, [sp, #192]
    400030f8:	97fff5ba 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400030fc:	97fffe8d 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    40003100:	d503201f 	nop
    40003104:	1003d1a0 	adr	x0, 4000ab38 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xf70>
    40003108:	910703e8 	add	x8, sp, #0x1c0
    4000310c:	f90067e8 	str	x8, [sp, #200]
    40003110:	9107c3e1 	add	x1, sp, #0x1f0
    40003114:	97fff463 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003118:	f94067e0 	ldr	x0, [sp, #200]
    4000311c:	97fff5b1 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003120:	9107e3e8 	add	x8, sp, #0x1f8
    println!("Heap allocator initialized successfully!");

    // 测试内存分配 - 创建 Vec
    println!("\nTesting memory allocation with Vec:");

    let mut numbers: Vec<i32> = Vec::new();
    40003124:	97fff5d7 	bl	40000880 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfa7bae84f21f6bd9E>
    40003128:	97fffe82 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    4000312c:	d503201f 	nop
    40003130:	1003d180 	adr	x0, 4000ab60 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xf98>
    40003134:	910843e8 	add	x8, sp, #0x210
    40003138:	f9006be8 	str	x8, [sp, #208]
    4000313c:	910903e1 	add	x1, sp, #0x240
    40003140:	97fff458 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003144:	f9406be0 	ldr	x0, [sp, #208]
    40003148:	97fff5a6 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    4000314c:	910943e8 	add	x8, sp, #0x250
    40003150:	f9006fe8 	str	x8, [sp, #216]
    40003154:	52800020 	mov	w0, #0x1                   	// #1
    40003158:	52800141 	mov	w1, #0xa                   	// #10
    println!("Created empty Vec");

    // 向 Vec 中添加元素
    for i in 1..=10 {
    4000315c:	97fffe29 	bl	40002a00 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17hd8716ec9e371a0e6E>
    40003160:	f9406fe0 	ldr	x0, [sp, #216]
    40003164:	910913e8 	add	x8, sp, #0x244
    40003168:	97fffe3a 	bl	40002a50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h86cd7991f84fb497E>
    4000316c:	b94247e8 	ldr	w8, [sp, #580]
    40003170:	b9424be9 	ldr	w9, [sp, #584]
    40003174:	b9424fea 	ldr	w10, [sp, #588]
    40003178:	b90267ea 	str	w10, [sp, #612]
    4000317c:	b90263e9 	str	w9, [sp, #608]
    40003180:	b9025fe8 	str	w8, [sp, #604]
    40003184:	14000001 	b	40003188 <rust_main+0x138>
    40003188:	910973e0 	add	x0, sp, #0x25c
    4000318c:	97fffe29 	bl	40002a30 <_ZN4core4iter5range110_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$4next17h16ce1e5c3b932c0cE>
    40003190:	b9026be0 	str	w0, [sp, #616]
    40003194:	b9026fe1 	str	w1, [sp, #620]
    40003198:	b9426be8 	ldr	w8, [sp, #616]
    4000319c:	36000188 	tbz	w8, #0, 400031cc <rust_main+0x17c>
    400031a0:	14000001 	b	400031a4 <rust_main+0x154>
    400031a4:	b9826fe8 	ldrsw	x8, [sp, #620]
    400031a8:	b900a3e8 	str	w8, [sp, #160]
    400031ac:	b906f3e8 	str	w8, [sp, #1776]
        numbers.push(i * i);
    400031b0:	9b287d08 	smull	x8, w8, w8
    400031b4:	2a0803e9 	mov	w9, w8
    400031b8:	b900a7e9 	str	w9, [sp, #164]
    400031bc:	eb29c108 	subs	x8, x8, w9, sxtw
    400031c0:	1a9f07e8 	cset	w8, ne	// ne = any
    400031c4:	370021a8 	tbnz	w8, #0, 400035f8 <rust_main+0x5a8>
    400031c8:	140000ff 	b	400035c4 <rust_main+0x574>
    400031cc:	97fffe59 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    400031d0:	d503201f 	nop
    400031d4:	1003cd60 	adr	x0, 4000ab80 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xfb8>
    400031d8:	910bc3e8 	add	x8, sp, #0x2f0
    400031dc:	f9004be8 	str	x8, [sp, #144]
    400031e0:	910c83e1 	add	x1, sp, #0x320
    400031e4:	97fff42f 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    400031e8:	f9404be0 	ldr	x0, [sp, #144]
    400031ec:	97fff57d 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400031f0:	9107e3e0 	add	x0, sp, #0x1f8
        println!("Added {} to Vec, current length: {}", i * i, numbers.len());
    }

    println!("\nVec contents:");
    for (index, value) in numbers.iter().enumerate() {
    400031f4:	97fff65b 	bl	40000b60 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8b16e8458164c219E>
    400031f8:	97fffa2a 	bl	40001aa0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hb18b94471ecb9dc2E>
    400031fc:	910d03e8 	add	x8, sp, #0x340
    40003200:	f9004fe8 	str	x8, [sp, #152]
    40003204:	97fff893 	bl	40001450 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h033293092eb5dd02E>
    40003208:	f9404fe0 	ldr	x0, [sp, #152]
    4000320c:	910ca3e8 	add	x8, sp, #0x328
    40003210:	97fff3f8 	bl	400001f0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hceaafd482ed9975eE>
    40003214:	f94197e8 	ldr	x8, [sp, #808]
    40003218:	f9419be9 	ldr	x9, [sp, #816]
    4000321c:	f9419fea 	ldr	x10, [sp, #824]
    40003220:	f901b7ea 	str	x10, [sp, #872]
    40003224:	f901b3e9 	str	x9, [sp, #864]
    40003228:	f901afe8 	str	x8, [sp, #856]
    4000322c:	14000001 	b	40003230 <rust_main+0x1e0>
    40003230:	910d63e0 	add	x0, sp, #0x358
    40003234:	97fff3b7 	bl	40000110 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb449c3b2e85711bdE>
    40003238:	f901bbe0 	str	x0, [sp, #880]
    4000323c:	f901bfe1 	str	x1, [sp, #888]
    40003240:	f941bfe8 	ldr	x8, [sp, #888]
    40003244:	b40003a8 	cbz	x8, 400032b8 <rust_main+0x268>
    40003248:	14000001 	b	4000324c <rust_main+0x1fc>
    4000324c:	f941bbe8 	ldr	x8, [sp, #880]
    40003250:	f901c3e8 	str	x8, [sp, #896]
    40003254:	f941bfe8 	ldr	x8, [sp, #888]
    40003258:	f901c7e8 	str	x8, [sp, #904]
    4000325c:	910f83e8 	add	x8, sp, #0x3e0
    40003260:	910e03e0 	add	x0, sp, #0x380
    40003264:	94000353 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    40003268:	910fc3e8 	add	x8, sp, #0x3f0
    4000326c:	910e23e0 	add	x0, sp, #0x388
    40003270:	97fff6e8 	bl	40000e10 <_ZN4core3fmt2rt8Argument11new_display17h4e06f4f1166cd372E>
    40003274:	f941f3e8 	ldr	x8, [sp, #992]
    40003278:	f941f7e9 	ldr	x9, [sp, #1000]
    4000327c:	f901e7e9 	str	x9, [sp, #968]
    40003280:	f901e3e8 	str	x8, [sp, #960]
    40003284:	f941fbe8 	ldr	x8, [sp, #1008]
    40003288:	f941ffe9 	ldr	x9, [sp, #1016]
    4000328c:	f901efe9 	str	x9, [sp, #984]
    40003290:	f901ebe8 	str	x8, [sp, #976]
    40003294:	d503201f 	nop
    40003298:	1003da00 	adr	x0, 4000add8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1210>
    4000329c:	910e43e8 	add	x8, sp, #0x390
    400032a0:	f90047e8 	str	x8, [sp, #136]
    400032a4:	910f03e1 	add	x1, sp, #0x3c0
    400032a8:	97fff412 	bl	400002f0 <_ZN4core3fmt9Arguments6new_v117h38439cbb1908ee1cE>
    400032ac:	f94047e0 	ldr	x0, [sp, #136]
    400032b0:	97fff54c 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400032b4:	17ffffdf 	b	40003230 <rust_main+0x1e0>
    400032b8:	9107e3e0 	add	x0, sp, #0x1f8
    400032bc:	f90027e0 	str	x0, [sp, #72]
        println!("  numbers[{}] = {}", index, value);
    }

    println!("\nVec capacity: {}", numbers.capacity());
    400032c0:	97fff610 	bl	40000b00 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$8capacity17h7114c89257c9413fE>
    400032c4:	f9022be0 	str	x0, [sp, #1104]
    400032c8:	911103e8 	add	x8, sp, #0x440
    400032cc:	911143e0 	add	x0, sp, #0x450
    400032d0:	94000338 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    400032d4:	f94223e8 	ldr	x8, [sp, #1088]
    400032d8:	f94227e9 	ldr	x9, [sp, #1096]
    400032dc:	f9021fe9 	str	x9, [sp, #1080]
    400032e0:	f9021be8 	str	x8, [sp, #1072]
    400032e4:	d503201f 	nop
    400032e8:	1003c5c0 	adr	x0, 4000aba0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xfd8>
    400032ec:	911003e8 	add	x8, sp, #0x400
    400032f0:	f90023e8 	str	x8, [sp, #64]
    400032f4:	9110c3e1 	add	x1, sp, #0x430
    400032f8:	94000362 	bl	40004080 <_ZN4core3fmt9Arguments6new_v117hd56b67e9706186faE>
    400032fc:	f94023e0 	ldr	x0, [sp, #64]
    40003300:	97fff538 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003304:	f94027e0 	ldr	x0, [sp, #72]
    println!("Vec length: {}", numbers.len());
    40003308:	97fff566 	bl	400008a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7b0e2f1ebe5c11c7E>
    4000330c:	f90257e0 	str	x0, [sp, #1192]
    40003310:	911263e8 	add	x8, sp, #0x498
    40003314:	9112a3e0 	add	x0, sp, #0x4a8
    40003318:	94000326 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    4000331c:	f9424fe8 	ldr	x8, [sp, #1176]
    40003320:	f94253e9 	ldr	x9, [sp, #1184]
    40003324:	f9024be9 	str	x9, [sp, #1168]
    40003328:	f90247e8 	str	x8, [sp, #1160]
    4000332c:	d503201f 	nop
    40003330:	1003c500 	adr	x0, 4000abd0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1008>
    40003334:	911163e8 	add	x8, sp, #0x458
    40003338:	f9002be8 	str	x8, [sp, #80]
    4000333c:	911223e1 	add	x1, sp, #0x488
    40003340:	94000350 	bl	40004080 <_ZN4core3fmt9Arguments6new_v117hd56b67e9706186faE>
    40003344:	f9402be0 	ldr	x0, [sp, #80]
    40003348:	97fff526 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    4000334c:	97fffdf9 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    40003350:	d503201f 	nop
    40003354:	1003c620 	adr	x0, 4000ac18 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1050>
    40003358:	9112c3e8 	add	x8, sp, #0x4b0
    4000335c:	f9002fe8 	str	x8, [sp, #88]
    40003360:	911383e1 	add	x1, sp, #0x4e0
    40003364:	97fff3cf 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003368:	f9402fe0 	ldr	x0, [sp, #88]
    4000336c:	97fff51d 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003370:	9113a3e8 	add	x8, sp, #0x4e8
    40003374:	f9003fe8 	str	x8, [sp, #120]

    // 测试更多内存分配
    println!("\nCreating another Vec with strings:");
    let mut strings: Vec<&str> = Vec::new();
    40003378:	97fff53a 	bl	40000860 <_ZN5alloc3vec12Vec$LT$T$GT$3new17h3dad46102c9e0ce0E>
    4000337c:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("Hello");
    40003380:	d503201f 	nop
    40003384:	1003c521 	adr	x1, 4000ac28 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1060>
    40003388:	d503201f 	nop
    4000338c:	1003c563 	adr	x3, 4000ac38 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1070>
    40003390:	528000a8 	mov	w8, #0x5                   	// #5
    40003394:	2a0803e2 	mov	w2, w8
    40003398:	f90037e2 	str	x2, [sp, #104]
    4000339c:	97fff575 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    400033a0:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("from");
    400033a4:	d503201f 	nop
    400033a8:	50033d61 	adr	x1, 40009b56 <memcpy+0x37e>
    400033ac:	d503201f 	nop
    400033b0:	1003c503 	adr	x3, 4000ac50 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1088>
    400033b4:	52800088 	mov	w8, #0x4                   	// #4
    400033b8:	2a0803e2 	mov	w2, w8
    400033bc:	f90033e2 	str	x2, [sp, #96]
    400033c0:	97fff56c 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    400033c4:	f94033e2 	ldr	x2, [sp, #96]
    400033c8:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("Rust");
    400033cc:	d0000021 	adrp	x1, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    400033d0:	912d6821 	add	x1, x1, #0xb5a
    400033d4:	d503201f 	nop
    400033d8:	1003c483 	adr	x3, 4000ac68 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10a0>
    400033dc:	97fff565 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    400033e0:	f94033e2 	ldr	x2, [sp, #96]
    400033e4:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("bare");
    400033e8:	d0000021 	adrp	x1, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    400033ec:	912d9821 	add	x1, x1, #0xb66
    400033f0:	d503201f 	nop
    400033f4:	1003c463 	adr	x3, 4000ac80 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10b8>
    400033f8:	97fff55e 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    400033fc:	f94037e2 	ldr	x2, [sp, #104]
    40003400:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("metal");
    40003404:	d503201f 	nop
    40003408:	1003c481 	adr	x1, 4000ac98 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10d0>
    4000340c:	d503201f 	nop
    40003410:	1003c483 	adr	x3, 4000aca0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10d8>
    40003414:	97fff557 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    40003418:	f9403fe0 	ldr	x0, [sp, #120]
    strings.push("OS!");
    4000341c:	d503201f 	nop
    40003420:	1003c4c1 	adr	x1, 4000acb8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10f0>
    40003424:	d503201f 	nop
    40003428:	1003c4c3 	adr	x3, 4000acc0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x10f8>
    4000342c:	52800068 	mov	w8, #0x3                   	// #3
    40003430:	2a0803e2 	mov	w2, w8
    40003434:	97fff54f 	bl	40000970 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hcc4e6c565963d1e5E>
    40003438:	d503201f 	nop
    4000343c:	1003c560 	adr	x0, 4000ace8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1120>
    40003440:	911403e8 	add	x8, sp, #0x500
    40003444:	f9003be8 	str	x8, [sp, #112]
    40003448:	94000322 	bl	400040d0 <_ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE>
    4000344c:	f9403be0 	ldr	x0, [sp, #112]
    40003450:	97fff4e4 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003454:	f9403fe0 	ldr	x0, [sp, #120]

    print!("Message: ");
    for (i, s) in strings.iter().enumerate() {
    40003458:	97fff5ba 	bl	40000b40 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h17ec9a6e82161439E>
    4000345c:	97fff989 	bl	40001a80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h90dcb070c787e715E>
    40003460:	911523e8 	add	x8, sp, #0x548
    40003464:	f90043e8 	str	x8, [sp, #128]
    40003468:	97fff806 	bl	40001480 <_ZN4core4iter6traits8iterator8Iterator9enumerate17ha19d225976dac883E>
    4000346c:	f94043e0 	ldr	x0, [sp, #128]
    40003470:	9114c3e8 	add	x8, sp, #0x530
    40003474:	97fff357 	bl	400001d0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha54809ca68e04a8eE>
    40003478:	f9429be8 	ldr	x8, [sp, #1328]
    4000347c:	f9429fe9 	ldr	x9, [sp, #1336]
    40003480:	f942a3ea 	ldr	x10, [sp, #1344]
    40003484:	f902bbea 	str	x10, [sp, #1392]
    40003488:	f902b7e9 	str	x9, [sp, #1384]
    4000348c:	f902b3e8 	str	x8, [sp, #1376]
    40003490:	14000001 	b	40003494 <rust_main+0x444>
    40003494:	911583e0 	add	x0, sp, #0x560
    40003498:	97fff2ee 	bl	40000050 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h0844c9a304ee99c2E>
    4000349c:	f902bfe0 	str	x0, [sp, #1400]
    400034a0:	f902c3e1 	str	x1, [sp, #1408]
    400034a4:	f942c3e8 	ldr	x8, [sp, #1408]
    400034a8:	b4000108 	cbz	x8, 400034c8 <rust_main+0x478>
    400034ac:	14000001 	b	400034b0 <rust_main+0x460>
    400034b0:	f942bfe8 	ldr	x8, [sp, #1400]
    400034b4:	f90377e8 	str	x8, [sp, #1768]
    400034b8:	f942c3e9 	ldr	x9, [sp, #1408]
    400034bc:	f902c7e9 	str	x9, [sp, #1416]
        if i > 0 {
    400034c0:	b5000728 	cbnz	x8, 400035a4 <rust_main+0x554>
    400034c4:	14000028 	b	40003564 <rust_main+0x514>
    400034c8:	d503201f 	nop
    400034cc:	1003c160 	adr	x0, 4000acf8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1130>
    400034d0:	911843e8 	add	x8, sp, #0x610
    400034d4:	f90013e8 	str	x8, [sp, #32]
    400034d8:	940002fe 	bl	400040d0 <_ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE>
    400034dc:	f94013e0 	ldr	x0, [sp, #32]
    400034e0:	97fff4c0 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400034e4:	97fffd93 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    400034e8:	d503201f 	nop
    400034ec:	1003c220 	adr	x0, 4000ad30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1168>
    400034f0:	911903e8 	add	x8, sp, #0x640
    400034f4:	f90017e8 	str	x8, [sp, #40]
    400034f8:	9119c3e1 	add	x1, sp, #0x670
    400034fc:	97fff369 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003500:	f94017e0 	ldr	x0, [sp, #40]
    40003504:	97fff4b7 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003508:	97fffd8a 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    4000350c:	d503201f 	nop
    40003510:	1003c2c0 	adr	x0, 4000ad68 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x11a0>
    40003514:	9119e3e8 	add	x8, sp, #0x678
    40003518:	f9001be8 	str	x8, [sp, #48]
    4000351c:	911aa3e1 	add	x1, sp, #0x6a8
    40003520:	97fff360 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003524:	f9401be0 	ldr	x0, [sp, #48]
    40003528:	97fff4ae 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    4000352c:	97fffd81 	bl	40002b30 <_ZN4core3fmt2rt8Argument4none17hf73c1757581ba97fE>
    40003530:	d503201f 	nop
    40003534:	1003c360 	adr	x0, 4000ada0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x11d8>
    40003538:	911ac3e8 	add	x8, sp, #0x6b0
    4000353c:	f9001fe8 	str	x8, [sp, #56]
    40003540:	911b83e1 	add	x1, sp, #0x6e0
    40003544:	97fff357 	bl	400002a0 <_ZN4core3fmt9Arguments6new_v117h27e8deefd7ede8c5E>
    40003548:	f9401fe0 	ldr	x0, [sp, #56]
    4000354c:	97fff4a5 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003550:	14000001 	b	40003554 <rust_main+0x504>
    40003554:	911bdfe8 	add	x8, sp, #0x6f7
#[unstable(feature = "stdarch_arm_barrier", issue = "117219")]
pub unsafe fn __isb<A>(arg: A)
where
    A: super::sealed::Isb,
{
    arg.__isb()
    40003558:	f9037fe8 	str	x8, [sp, #1784]

#[unstable(feature = "stdarch_arm_barrier", issue = "117219")]
impl super::super::sealed::Isb for SY {
    #[inline(always)]
    unsafe fn __isb(&self) {
        super::isb(super::arg::SY)
    4000355c:	d5033fdf 	isb
    println!("Memory allocator working correctly!");
    println!("UART output functioning at 0x0900_0000");

    // 进入无限循环
    loop {
        core::hint::spin_loop();
    40003560:	17fffffd 	b	40003554 <rust_main+0x504>
    40003564:	911803e8 	add	x8, sp, #0x600
    40003568:	911623e0 	add	x0, sp, #0x588
    4000356c:	97fff639 	bl	40000e50 <_ZN4core3fmt2rt8Argument11new_display17h621b8b9a52bf4e15E>
    40003570:	f94303e8 	ldr	x8, [sp, #1536]
    40003574:	f94307e9 	ldr	x9, [sp, #1544]
    40003578:	f902ffe9 	str	x9, [sp, #1528]
    4000357c:	f902fbe8 	str	x8, [sp, #1520]
    40003580:	d503201f 	nop
    40003584:	10032160 	adr	x0, 400099b0 <memcpy+0x1d8>
    40003588:	911703e8 	add	x8, sp, #0x5c0
    4000358c:	f9000fe8 	str	x8, [sp, #24]
    40003590:	9117c3e1 	add	x1, sp, #0x5f0
    40003594:	97fff36b 	bl	40000340 <_ZN4core3fmt9Arguments6new_v117h9ed57ca217822b21E>
    40003598:	f9400fe0 	ldr	x0, [sp, #24]
    4000359c:	97fff491 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400035a0:	17ffffbd 	b	40003494 <rust_main+0x444>
    400035a4:	d503201f 	nop
    400035a8:	1003c080 	adr	x0, 4000adb8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x11f0>
    400035ac:	911643e8 	add	x8, sp, #0x590
    400035b0:	f9000be8 	str	x8, [sp, #16]
    400035b4:	940002c7 	bl	400040d0 <_ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE>
    400035b8:	f9400be0 	ldr	x0, [sp, #16]
    400035bc:	97fff489 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400035c0:	17ffffe9 	b	40003564 <rust_main+0x514>
    400035c4:	b940a7e1 	ldr	w1, [sp, #164]
        numbers.push(i * i);
    400035c8:	d503201f 	nop
    400035cc:	1003c2a2 	adr	x2, 4000ae20 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1258>
    400035d0:	9107e3e0 	add	x0, sp, #0x1f8
    400035d4:	97fff4bb 	bl	400008c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h0e1423944a043103E>
    400035d8:	b940a3e8 	ldr	w8, [sp, #160]
        println!("Added {} to Vec, current length: {}", i * i, numbers.len());
    400035dc:	9b287d08 	smull	x8, w8, w8
    400035e0:	2a0803e9 	mov	w9, w8
    400035e4:	b9000fe9 	str	w9, [sp, #12]
    400035e8:	eb29c108 	subs	x8, x8, w9, sxtw
    400035ec:	1a9f07e8 	cset	w8, ne	// ne = any
    400035f0:	37000428 	tbnz	w8, #0, 40003674 <rust_main+0x624>
    400035f4:	14000004 	b	40003604 <rust_main+0x5b4>
        numbers.push(i * i);
    400035f8:	d503201f 	nop
    400035fc:	1003c060 	adr	x0, 4000ae08 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1240>
    40003600:	94001654 	bl	40008f50 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h1f122e531ebb3929E>
    40003604:	b9400fe8 	ldr	w8, [sp, #12]
        println!("Added {} to Vec, current length: {}", i * i, numbers.len());
    40003608:	b902d7e8 	str	w8, [sp, #724]
    4000360c:	910b03e8 	add	x8, sp, #0x2c0
    40003610:	910b53e0 	add	x0, sp, #0x2d4
    40003614:	97fff5ef 	bl	40000dd0 <_ZN4core3fmt2rt8Argument11new_display17h155d492ec1f64f4eE>
    40003618:	9107e3e0 	add	x0, sp, #0x1f8
    4000361c:	97fff4a1 	bl	400008a0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h7b0e2f1ebe5c11c7E>
    40003620:	f90177e0 	str	x0, [sp, #744]
    40003624:	910b63e8 	add	x8, sp, #0x2d8
    40003628:	910ba3e0 	add	x0, sp, #0x2e8
    4000362c:	94000261 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    40003630:	f94163e8 	ldr	x8, [sp, #704]
    40003634:	f94167e9 	ldr	x9, [sp, #712]
    40003638:	f90157e9 	str	x9, [sp, #680]
    4000363c:	f90153e8 	str	x8, [sp, #672]
    40003640:	f9416fe8 	ldr	x8, [sp, #728]
    40003644:	f94173e9 	ldr	x9, [sp, #736]
    40003648:	f9015fe9 	str	x9, [sp, #696]
    4000364c:	f9015be8 	str	x8, [sp, #688]
    40003650:	d503201f 	nop
    40003654:	1003c020 	adr	x0, 4000ae58 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1290>
    40003658:	9109c3e8 	add	x8, sp, #0x270
    4000365c:	f90003e8 	str	x8, [sp]
    40003660:	910a83e1 	add	x1, sp, #0x2a0
    40003664:	97fff323 	bl	400002f0 <_ZN4core3fmt9Arguments6new_v117h38439cbb1908ee1cE>
    40003668:	f94003e0 	ldr	x0, [sp]
    4000366c:	97fff45d 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    40003670:	17fffec6 	b	40003188 <rust_main+0x138>
    40003674:	d503201f 	nop
    40003678:	1003c080 	adr	x0, 4000ae88 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x12c0>
    4000367c:	94001635 	bl	40008f50 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h1f122e531ebb3929E>

0000000040003680 <rust_begin_unwind>:
    }
}

#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    40003680:	d10203ff 	sub	sp, sp, #0x80
    40003684:	f9003bfe 	str	x30, [sp, #112]
    40003688:	f90007e0 	str	x0, [sp, #8]
    4000368c:	910143e8 	add	x8, sp, #0x50
    40003690:	910023e0 	add	x0, sp, #0x8
    40003694:	97fff5ff 	bl	40000e90 <_ZN4core3fmt2rt8Argument11new_display17hf7c428fa25b9e26aE>
    40003698:	f9402be8 	ldr	x8, [sp, #80]
    4000369c:	f9402fe9 	ldr	x9, [sp, #88]
    400036a0:	f90027e9 	str	x9, [sp, #72]
    400036a4:	f90023e8 	str	x8, [sp, #64]
    400036a8:	d503201f 	nop
    400036ac:	1003bfe0 	adr	x0, 4000aea8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x12e0>
    400036b0:	910043e8 	add	x8, sp, #0x10
    400036b4:	f90003e8 	str	x8, [sp]
    400036b8:	910103e1 	add	x1, sp, #0x40
    400036bc:	94000271 	bl	40004080 <_ZN4core3fmt9Arguments6new_v117hd56b67e9706186faE>
    400036c0:	f94003e0 	ldr	x0, [sp]
    400036c4:	97fff447 	bl	400007e0 <_ZN11arm_rstiny24uart6_print17ha315f989d2ef6bf1E>
    400036c8:	14000001 	b	400036cc <rust_begin_unwind+0x4c>
    400036cc:	91019fe8 	add	x8, sp, #0x67
    400036d0:	f90037e8 	str	x8, [sp, #104]
    400036d4:	d5033fdf 	isb
    println!("PANIC: {}", info);
    loop {
        core::hint::spin_loop();
    400036d8:	17fffffd 	b	400036cc <rust_begin_unwind+0x4c>
    400036dc:	00000000 	udf	#0

00000000400036e0 <_ZN5alloc5alloc12alloc_zeroed17he0314ca0a4131c26E>:
/// ```
#[stable(feature = "global_alloc", since = "1.28.0")]
#[must_use = "losing the pointer will leak memory"]
#[inline]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    400036e0:	d10143ff 	sub	sp, sp, #0x50
    400036e4:	f90023fe 	str	x30, [sp, #64]
    400036e8:	f90007e0 	str	x0, [sp, #8]
    400036ec:	f9000be1 	str	x1, [sp, #16]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    400036f0:	d503201f 	nop
    400036f4:	10045368 	adr	x8, 4000c160 <__rust_no_alloc_shim_is_unstable>
    400036f8:	f90013e8 	str	x8, [sp, #32]
    400036fc:	14000001 	b	40003700 <_ZN5alloc5alloc12alloc_zeroed17he0314ca0a4131c26E+0x20>
                precondition_check($($arg,)*);
    40003700:	d503201f 	nop
    40003704:	100452e0 	adr	x0, 4000c160 <__rust_no_alloc_shim_is_unstable>
    40003708:	52800028 	mov	w8, #0x1                   	// #1
    4000370c:	2a0803e1 	mov	w1, w8
    40003710:	2a1f03e2 	mov	w2, wzr
    40003714:	97fff9cf 	bl	40001e50 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E>
            if ::core::ub_checks::$kind() {
    40003718:	14000001 	b	4000371c <_ZN5alloc5alloc12alloc_zeroed17he0314ca0a4131c26E+0x3c>
        intrinsics::volatile_load(src)
    4000371c:	b0000048 	adrp	x8, 4000c000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2438>
    40003720:	39458108 	ldrb	w8, [x8, #352]
    40003724:	3900bfe8 	strb	w8, [sp, #47]
    40003728:	910023e8 	add	x8, sp, #0x8
    unsafe {
        // Make sure we don't accidentally allow omitting the allocator shim in
        // stable code until it is actually stabilized.
        core::ptr::read_volatile(&__rust_no_alloc_shim_is_unstable);

        __rust_alloc_zeroed(layout.size(), layout.align())
    4000372c:	f9001be8 	str	x8, [sp, #48]
    40003730:	f9400be0 	ldr	x0, [sp, #16]
    40003734:	f9001fe8 	str	x8, [sp, #56]
        self.align.as_usize()
    40003738:	f94007e8 	ldr	x8, [sp, #8]
    4000373c:	f9000fe8 	str	x8, [sp, #24]
    40003740:	f9400fe1 	ldr	x1, [sp, #24]
    40003744:	97fffd93 	bl	40002d90 <__rust_alloc_zeroed>
    }
}
    40003748:	f94023fe 	ldr	x30, [sp, #64]
    4000374c:	910143ff 	add	sp, sp, #0x50
    40003750:	d65f03c0 	ret
	...

0000000040003760 <_ZN5alloc5alloc5alloc17hea53bbd6592674e4E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
    40003760:	d10143ff 	sub	sp, sp, #0x50
    40003764:	f90023fe 	str	x30, [sp, #64]
    40003768:	f90007e0 	str	x0, [sp, #8]
    4000376c:	f9000be1 	str	x1, [sp, #16]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    40003770:	d503201f 	nop
    40003774:	10044f68 	adr	x8, 4000c160 <__rust_no_alloc_shim_is_unstable>
    40003778:	f90013e8 	str	x8, [sp, #32]
    4000377c:	14000001 	b	40003780 <_ZN5alloc5alloc5alloc17hea53bbd6592674e4E+0x20>
                precondition_check($($arg,)*);
    40003780:	d503201f 	nop
    40003784:	10044ee0 	adr	x0, 4000c160 <__rust_no_alloc_shim_is_unstable>
    40003788:	52800028 	mov	w8, #0x1                   	// #1
    4000378c:	2a0803e1 	mov	w1, w8
    40003790:	2a1f03e2 	mov	w2, wzr
    40003794:	97fff9af 	bl	40001e50 <_ZN4core3ptr13read_volatile18precondition_check17h93e9c151f1948cd4E>
            if ::core::ub_checks::$kind() {
    40003798:	14000001 	b	4000379c <_ZN5alloc5alloc5alloc17hea53bbd6592674e4E+0x3c>
        intrinsics::volatile_load(src)
    4000379c:	b0000048 	adrp	x8, 4000c000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2438>
    400037a0:	39458108 	ldrb	w8, [x8, #352]
    400037a4:	3900bfe8 	strb	w8, [sp, #47]
    400037a8:	910023e8 	add	x8, sp, #0x8
        __rust_alloc(layout.size(), layout.align())
    400037ac:	f9001be8 	str	x8, [sp, #48]
        self.size
    400037b0:	f9400be0 	ldr	x0, [sp, #16]
    400037b4:	f9001fe8 	str	x8, [sp, #56]
        self.align.as_usize()
    400037b8:	f94007e8 	ldr	x8, [sp, #8]
    400037bc:	f9000fe8 	str	x8, [sp, #24]
    400037c0:	f9400fe1 	ldr	x1, [sp, #24]
    400037c4:	97fffd2f 	bl	40002c80 <__rust_alloc>
}
    400037c8:	f94023fe 	ldr	x30, [sp, #64]
    400037cc:	910143ff 	add	sp, sp, #0x50
    400037d0:	d65f03c0 	ret
	...

00000000400037e0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE>:

impl Global {
    #[inline]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
    400037e0:	d10483ff 	sub	sp, sp, #0x120
    400037e4:	a9117bfd 	stp	x29, x30, [sp, #272]
    400037e8:	2a0303e8 	mov	w8, w3
    400037ec:	b9002fe8 	str	w8, [sp, #44]
    400037f0:	f9001fe1 	str	x1, [sp, #56]
    400037f4:	f90023e2 	str	x2, [sp, #64]
    400037f8:	f9003fe0 	str	x0, [sp, #120]
    400037fc:	39021be3 	strb	w3, [sp, #134]
    40003800:	aa1f03e8 	mov	x8, xzr
    /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
    #[stable(feature = "nonnull_slice_from_raw_parts", since = "1.70.0")]
    #[rustc_const_stable(feature = "const_slice_from_raw_parts_mut", since = "1.83.0")]
    #[must_use]
    #[inline]
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
    40003804:	f90047e8 	str	x8, [sp, #136]
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    40003808:	f9004be8 	str	x8, [sp, #144]
    4000380c:	9100e3e8 	add	x8, sp, #0x38
        match layout.size() {
    40003810:	f90053e8 	str	x8, [sp, #160]
        self.size
    40003814:	f94023e8 	ldr	x8, [sp, #64]
    40003818:	aa0803e9 	mov	x9, x8
    4000381c:	f9001be9 	str	x9, [sp, #48]
    40003820:	f90057e8 	str	x8, [sp, #168]
    40003824:	b50001e8 	cbnz	x8, 40003860 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x80>
    40003828:	14000001 	b	4000382c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x4c>
    4000382c:	9100e3e8 	add	x8, sp, #0x38
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    40003830:	f9005be8 	str	x8, [sp, #176]
        NonNull::without_provenance(self.align.as_nonzero())
    40003834:	f9401fe8 	ldr	x8, [sp, #56]
    40003838:	aa0803e0 	mov	x0, x8
    4000383c:	f9000fe0 	str	x0, [sp, #24]
        unsafe { NonNull { pointer } }
    40003840:	f9005fe8 	str	x8, [sp, #184]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    40003844:	aa0803e9 	mov	x9, x8
    40003848:	f90013e9 	str	x9, [sp, #32]
    4000384c:	f90063e8 	str	x8, [sp, #192]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
    data_pointer: *mut impl Thin,
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    aggregate_raw_ptr(data_pointer, metadata)
    40003850:	f90067e8 	str	x8, [sp, #200]
    40003854:	aa1f03e8 	mov	x8, xzr
    40003858:	f9006be8 	str	x8, [sp, #208]
    4000385c:	14000004 	b	4000386c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x8c>
    40003860:	b9402fe8 	ldr	w8, [sp, #44]
            // SAFETY: `layout` is non-zero in size,
            size => unsafe {
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    40003864:	37000288 	tbnz	w8, #0, 400038b4 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xd4>
    40003868:	1400000e 	b	400038a0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xc0>
    4000386c:	f9400fe0 	ldr	x0, [sp, #24]
                precondition_check($($arg,)*);
    40003870:	97fff4c4 	bl	40000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>
            if ::core::ub_checks::$kind() {
    40003874:	14000001 	b	40003878 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x98>
    40003878:	f94013e8 	ldr	x8, [sp, #32]
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    4000387c:	f90027e8 	str	x8, [sp, #72]
    40003880:	aa1f03e8 	mov	x8, xzr
    40003884:	f9002be8 	str	x8, [sp, #80]
    40003888:	14000001 	b	4000388c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xac>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
                Ok(NonNull::slice_from_raw_parts(ptr, size))
            },
        }
    }
    4000388c:	f94027e0 	ldr	x0, [sp, #72]
    40003890:	f9402be1 	ldr	x1, [sp, #80]
    40003894:	a9517bfd 	ldp	x29, x30, [sp, #272]
    40003898:	910483ff 	add	sp, sp, #0x120
    4000389c:	d65f03c0 	ret
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    400038a0:	f9401fe0 	ldr	x0, [sp, #56]
    400038a4:	f94023e1 	ldr	x1, [sp, #64]
    400038a8:	97ffffae 	bl	40003760 <_ZN5alloc5alloc5alloc17hea53bbd6592674e4E>
    400038ac:	f9002fe0 	str	x0, [sp, #88]
    400038b0:	14000006 	b	400038c8 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xe8>
    400038b4:	f9401fe0 	ldr	x0, [sp, #56]
    400038b8:	f94023e1 	ldr	x1, [sp, #64]
    400038bc:	97ffff89 	bl	400036e0 <_ZN5alloc5alloc12alloc_zeroed17he0314ca0a4131c26E>
    400038c0:	f9002fe0 	str	x0, [sp, #88]
    400038c4:	14000001 	b	400038c8 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xe8>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    400038c8:	f9402fe8 	ldr	x8, [sp, #88]
    400038cc:	aa0803e9 	mov	x9, x8
    400038d0:	f9000be9 	str	x9, [sp, #16]
    400038d4:	f9006fe8 	str	x8, [sp, #216]
        if !ptr.is_null() {
    400038d8:	b5000188 	cbnz	x8, 40003908 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x128>
    400038dc:	14000001 	b	400038e0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x100>
    400038e0:	aa1f03e8 	mov	x8, xzr
            None
    400038e4:	f9003be8 	str	x8, [sp, #112]
            None => Err(err),
    400038e8:	f90037e8 	str	x8, [sp, #104]
            Err(e) => Err(From::from(e)),
    400038ec:	d503201f 	nop
    400038f0:	10030708 	adr	x8, 400099d0 <memcpy+0x1f8>
    400038f4:	f9400109 	ldr	x9, [x8]
    400038f8:	f9400508 	ldr	x8, [x8, #8]
    400038fc:	f90027e9 	str	x9, [sp, #72]
    40003900:	f9002be8 	str	x8, [sp, #80]
    }
    40003904:	17ffffe2 	b	4000388c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xac>
    40003908:	14000001 	b	4000390c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x12c>
    4000390c:	f9400be0 	ldr	x0, [sp, #16]
                precondition_check($($arg,)*);
    40003910:	97fff49c 	bl	40000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>
            if ::core::ub_checks::$kind() {
    40003914:	14000001 	b	40003918 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x138>
    40003918:	f9401be8 	ldr	x8, [sp, #48]
    4000391c:	f9400be9 	ldr	x9, [sp, #16]
            Some(unsafe { Self::new_unchecked(ptr) })
    40003920:	f9003be9 	str	x9, [sp, #112]
            Some(v) => Ok(v),
    40003924:	f9403be9 	ldr	x9, [sp, #112]
    40003928:	f90073e9 	str	x9, [sp, #224]
    4000392c:	f90037e9 	str	x9, [sp, #104]
            Ok(v) => ControlFlow::Continue(v),
    40003930:	f94037e9 	ldr	x9, [sp, #104]
    40003934:	f90077e9 	str	x9, [sp, #232]
    40003938:	f90033e9 	str	x9, [sp, #96]
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    4000393c:	f94033e9 	ldr	x9, [sp, #96]
    40003940:	aa0903ea 	mov	x10, x9
    40003944:	f90007ea 	str	x10, [sp, #8]
    40003948:	f9007be9 	str	x9, [sp, #240]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    4000394c:	f9007fe9 	str	x9, [sp, #248]
    40003950:	f90083e9 	str	x9, [sp, #256]
    40003954:	f90087e8 	str	x8, [sp, #264]
    40003958:	14000001 	b	4000395c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x17c>
    4000395c:	f94007e0 	ldr	x0, [sp, #8]
                precondition_check($($arg,)*);
    40003960:	97fff488 	bl	40000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>
            if ::core::ub_checks::$kind() {
    40003964:	14000001 	b	40003968 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0x188>
    40003968:	f9401be8 	ldr	x8, [sp, #48]
    4000396c:	f94007e9 	ldr	x9, [sp, #8]
                Ok(NonNull::slice_from_raw_parts(ptr, size))
    40003970:	f90027e9 	str	x9, [sp, #72]
    40003974:	f9002be8 	str	x8, [sp, #80]
            },
    40003978:	17ffffc5 	b	4000388c <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE+0xac>
    4000397c:	00000000 	udf	#0

0000000040003980 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE>:

    // SAFETY: Same as `Allocator::grow`
    #[inline]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    unsafe fn grow_impl(
    40003980:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40003984:	d10943ff 	sub	sp, sp, #0x250
    40003988:	f90023e1 	str	x1, [sp, #64]
    4000398c:	f90027e0 	str	x0, [sp, #72]
    40003990:	2a0603e8 	mov	w8, w6
    40003994:	b90057e8 	str	w8, [sp, #84]
    40003998:	f9002fe2 	str	x2, [sp, #88]
    4000399c:	f90033e3 	str	x3, [sp, #96]
    400039a0:	f90037e4 	str	x4, [sp, #104]
    400039a4:	f9003be5 	str	x5, [sp, #112]
    400039a8:	f9008fe0 	str	x0, [sp, #280]
    400039ac:	f90093e1 	str	x1, [sp, #288]
    400039b0:	3904b7e6 	strb	w6, [sp, #301]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    400039b4:	d503201f 	nop
    400039b8:	1003aac8 	adr	x8, 4000af10 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1348>
    400039bc:	f9009be8 	str	x8, [sp, #304]
    400039c0:	2a1f03e8 	mov	w8, wzr
    #[doc(alias = "memset")]
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[rustc_const_stable(feature = "const_ptr_write", since = "1.83.0")]
    #[inline(always)]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    pub const unsafe fn write_bytes(self, val: u8, count: usize)
    400039c4:	39050be8 	strb	w8, [sp, #322]
pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    400039c8:	39050fe8 	strb	w8, [sp, #323]
    400039cc:	910163e8 	add	x8, sp, #0x58
        debug_assert!(
            new_layout.size() >= old_layout.size(),
            "`new_layout.size()` must be greater than or equal to `old_layout.size()`"
        );

        match old_layout.size() {
    400039d0:	f900a7e8 	str	x8, [sp, #328]
        self.size
    400039d4:	f94033e8 	ldr	x8, [sp, #96]
    400039d8:	f90047e8 	str	x8, [sp, #136]
    400039dc:	f94047e8 	ldr	x8, [sp, #136]
    400039e0:	b5000168 	cbnz	x8, 40003a0c <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x8c>
    400039e4:	14000001 	b	400039e8 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x68>
    400039e8:	f94027e0 	ldr	x0, [sp, #72]
    400039ec:	b94057e8 	ldr	w8, [sp, #84]
            0 => self.alloc_impl(new_layout, zeroed),
    400039f0:	f94037e1 	ldr	x1, [sp, #104]
    400039f4:	f9403be2 	ldr	x2, [sp, #112]
    400039f8:	12000103 	and	w3, w8, #0x1
    400039fc:	97ffff79 	bl	400037e0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE>
    40003a00:	f9003fe0 	str	x0, [sp, #120]
    40003a04:	f90043e1 	str	x1, [sp, #128]
    40003a08:	14000012 	b	40003a50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xd0>
    40003a0c:	910223e8 	add	x8, sp, #0x88

            // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`
            // as required by safety conditions. Other conditions must be upheld by the caller
            old_size if old_layout.align() == new_layout.align() => unsafe {
    40003a10:	f900abe8 	str	x8, [sp, #336]
    40003a14:	910163e8 	add	x8, sp, #0x58
    40003a18:	f900afe8 	str	x8, [sp, #344]
        self.align.as_usize()
    40003a1c:	f9402fe8 	ldr	x8, [sp, #88]
    40003a20:	f9007be8 	str	x8, [sp, #240]
    40003a24:	f9407be8 	ldr	x8, [sp, #240]
    40003a28:	aa0803e0 	mov	x0, x8
    40003a2c:	f9001fe0 	str	x0, [sp, #56]
    40003a30:	9101a3e9 	add	x9, sp, #0x68
    40003a34:	f900b3e9 	str	x9, [sp, #352]
    40003a38:	f94037e9 	ldr	x9, [sp, #104]
    40003a3c:	f9007fe9 	str	x9, [sp, #248]
    40003a40:	f9407fe9 	ldr	x9, [sp, #248]
    40003a44:	eb090108 	subs	x8, x8, x9
    40003a48:	54000240 	b.eq	40003a90 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x110>  // b.none
    40003a4c:	14000006 	b	40003a64 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xe4>
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
                self.deallocate(ptr, old_layout);
                Ok(new_ptr)
            },
        }
    }
    40003a50:	f9403fe0 	ldr	x0, [sp, #120]
    40003a54:	f94043e1 	ldr	x1, [sp, #128]
    40003a58:	910943ff 	add	sp, sp, #0x250
    40003a5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40003a60:	d65f03c0 	ret
    40003a64:	f94027e0 	ldr	x0, [sp, #72]
    40003a68:	b94057e8 	ldr	w8, [sp, #84]
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    40003a6c:	f94037e1 	ldr	x1, [sp, #104]
    40003a70:	f9403be2 	ldr	x2, [sp, #112]
    40003a74:	12000103 	and	w3, w8, #0x1
    40003a78:	97ffff5a 	bl	400037e0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE>
    40003a7c:	f9006be0 	str	x0, [sp, #208]
    40003a80:	f9006fe1 	str	x1, [sp, #216]
        match self {
    40003a84:	f9406be8 	ldr	x8, [sp, #208]
    40003a88:	b4000228 	cbz	x8, 40003acc <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x14c>
    40003a8c:	14000017 	b	40003ae8 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x168>
    40003a90:	9101a3e8 	add	x8, sp, #0x68
                let new_size = new_layout.size();
    40003a94:	f900dfe8 	str	x8, [sp, #440]
        self.size
    40003a98:	f9403be8 	ldr	x8, [sp, #112]
    40003a9c:	aa0803e9 	mov	x9, x8
    40003aa0:	f90017e9 	str	x9, [sp, #40]
    40003aa4:	f900e3e8 	str	x8, [sp, #448]
    40003aa8:	910163e9 	add	x9, sp, #0x58
                hint::assert_unchecked(new_size >= old_layout.size());
    40003aac:	f900e7e9 	str	x9, [sp, #456]
    40003ab0:	f94047e9 	ldr	x9, [sp, #136]
    40003ab4:	eb090108 	subs	x8, x8, x9
    40003ab8:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    40003abc:	2a0803e9 	mov	w9, w8
    40003ac0:	b90037e9 	str	w9, [sp, #52]
    40003ac4:	39075fe8 	strb	w8, [sp, #471]
    40003ac8:	14000041 	b	40003bcc <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x24c>
            Err(e) => Err(From::from(e)),
    40003acc:	d503201f 	nop
    40003ad0:	1002f808 	adr	x8, 400099d0 <memcpy+0x1f8>
    40003ad4:	f9400109 	ldr	x9, [x8]
    40003ad8:	f9400508 	ldr	x8, [x8, #8]
    40003adc:	f9003fe9 	str	x9, [sp, #120]
    40003ae0:	f90043e8 	str	x8, [sp, #128]
    40003ae4:	17ffffdb 	b	40003a50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xd0>
    40003ae8:	f94023e9 	ldr	x9, [sp, #64]
            Ok(v) => ControlFlow::Continue(v),
    40003aec:	f9406bea 	ldr	x10, [sp, #208]
    40003af0:	f9406fe8 	ldr	x8, [sp, #216]
    40003af4:	f900b7ea 	str	x10, [sp, #360]
    40003af8:	f900bbe8 	str	x8, [sp, #368]
    40003afc:	f90063ea 	str	x10, [sp, #192]
    40003b00:	f90067e8 	str	x8, [sp, #200]
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    40003b04:	f94063e8 	ldr	x8, [sp, #192]
    40003b08:	aa0803ea 	mov	x10, x8
    40003b0c:	f9000fea 	str	x10, [sp, #24]
    40003b10:	f94067ea 	ldr	x10, [sp, #200]
    40003b14:	aa0a03eb 	mov	x11, x10
    40003b18:	f90013eb 	str	x11, [sp, #32]
    40003b1c:	f900bfe8 	str	x8, [sp, #376]
    40003b20:	f900c3ea 	str	x10, [sp, #384]
    40003b24:	f900c7e9 	str	x9, [sp, #392]
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
    40003b28:	f900cbe9 	str	x9, [sp, #400]
    40003b2c:	f900cfe8 	str	x8, [sp, #408]
    40003b30:	14000001 	b	40003b34 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x1b4>
    40003b34:	f9400fe1 	ldr	x1, [sp, #24]
    40003b38:	f94023e0 	ldr	x0, [sp, #64]
                precondition_check($($arg,)*);
    40003b3c:	f94047e4 	ldr	x4, [sp, #136]
    40003b40:	52800028 	mov	w8, #0x1                   	// #1
    40003b44:	2a0803e3 	mov	w3, w8
    40003b48:	aa0303e2 	mov	x2, x3
    40003b4c:	97fff555 	bl	400010a0 <_ZN4core10intrinsics19copy_nonoverlapping18precondition_check17hd7cafedb32f2262eE>
            if ::core::ub_checks::$kind() {
    40003b50:	14000001 	b	40003b54 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x1d4>
    40003b54:	f94023e1 	ldr	x1, [sp, #64]
    40003b58:	f9400fe0 	ldr	x0, [sp, #24]
    unsafe { copy_nonoverlapping(src, dst, count) }
    40003b5c:	f94047e2 	ldr	x2, [sp, #136]
    40003b60:	9400171e 	bl	400097d8 <memcpy>
                self.deallocate(ptr, old_layout);
    40003b64:	f9402fe9 	ldr	x9, [sp, #88]
    40003b68:	f94033e8 	ldr	x8, [sp, #96]
    40003b6c:	f90073e9 	str	x9, [sp, #224]
    40003b70:	f90077e8 	str	x8, [sp, #232]
    40003b74:	910383e8 	add	x8, sp, #0xe0
    }

    #[inline]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
        if layout.size() != 0 {
    40003b78:	f900d3e8 	str	x8, [sp, #416]
    40003b7c:	f94047e8 	ldr	x8, [sp, #136]
    40003b80:	b50000e8 	cbnz	x8, 40003b9c <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x21c>
    40003b84:	14000001 	b	40003b88 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x208>
    40003b88:	f94013e8 	ldr	x8, [sp, #32]
    40003b8c:	f9400fe9 	ldr	x9, [sp, #24]
                Ok(new_ptr)
    40003b90:	f9003fe9 	str	x9, [sp, #120]
    40003b94:	f90043e8 	str	x8, [sp, #128]
            },
    40003b98:	17ffffae 	b	40003a50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xd0>
    40003b9c:	f9401fe2 	ldr	x2, [sp, #56]
    40003ba0:	f94023e0 	ldr	x0, [sp, #64]
            //   "fit" always means a layout that is equal to the original, because our
            //   `allocate()`, `grow()`, and `shrink()` implementations never returns a larger
            //   allocation than requested.
            // * Other conditions must be upheld by the caller, as per `Allocator::deallocate()`'s
            //   safety documentation.
            unsafe { dealloc(ptr.as_ptr(), layout) }
    40003ba4:	f9402fe9 	ldr	x9, [sp, #88]
    40003ba8:	f94033e8 	ldr	x8, [sp, #96]
    40003bac:	f90087e9 	str	x9, [sp, #264]
    40003bb0:	f9008be8 	str	x8, [sp, #272]
    40003bb4:	910423e8 	add	x8, sp, #0x108
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
    40003bb8:	f900d7e8 	str	x8, [sp, #424]
    40003bbc:	f900dbe8 	str	x8, [sp, #432]
    40003bc0:	f94047e1 	ldr	x1, [sp, #136]
    40003bc4:	97fffc3f 	bl	40002cc0 <__rust_dealloc>
        if layout.size() != 0 {
    40003bc8:	17fffff0 	b	40003b88 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x208>
    40003bcc:	b94037e8 	ldr	w8, [sp, #52]
                precondition_check($($arg,)*);
    40003bd0:	12000100 	and	w0, w8, #0x1
    40003bd4:	97fff60b 	bl	40001400 <_ZN4core4hint16assert_unchecked18precondition_check17hcd1eef390a1fbfc0E>
    40003bd8:	f94023e0 	ldr	x0, [sp, #64]
    40003bdc:	f9401fe2 	ldr	x2, [sp, #56]
    40003be0:	f94017e3 	ldr	x3, [sp, #40]
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
    40003be4:	f900efe0 	str	x0, [sp, #472]
    40003be8:	f900f3e0 	str	x0, [sp, #480]
    40003bec:	f9402fe9 	ldr	x9, [sp, #88]
    40003bf0:	f94033e8 	ldr	x8, [sp, #96]
    40003bf4:	f9004fe9 	str	x9, [sp, #152]
    40003bf8:	f90053e8 	str	x8, [sp, #160]
    40003bfc:	f900f7e3 	str	x3, [sp, #488]
    40003c00:	910263e8 	add	x8, sp, #0x98
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
    40003c04:	f900fbe8 	str	x8, [sp, #496]
    40003c08:	f900ffe8 	str	x8, [sp, #504]
    40003c0c:	f94047e1 	ldr	x1, [sp, #136]
    40003c10:	97fffc44 	bl	40002d20 <__rust_realloc>
    40003c14:	f9004be0 	str	x0, [sp, #144]
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    40003c18:	f9404be8 	ldr	x8, [sp, #144]
    40003c1c:	f90103e8 	str	x8, [sp, #512]
        let ptr = self as *const u8;
    40003c20:	f9404be8 	ldr	x8, [sp, #144]
    40003c24:	f90083e8 	str	x8, [sp, #256]
        unsafe { mem::transmute(self.cast::<()>()) }
    40003c28:	f9404be8 	ldr	x8, [sp, #144]
        if !ptr.is_null() {
    40003c2c:	b50000a8 	cbnz	x8, 40003c40 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2c0>
    40003c30:	14000001 	b	40003c34 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2b4>
    40003c34:	aa1f03e8 	mov	x8, xzr
            None
    40003c38:	f9005fe8 	str	x8, [sp, #184]
        if !ptr.is_null() {
    40003c3c:	14000002 	b	40003c44 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2c4>
            if ::core::ub_checks::$kind() {
    40003c40:	14000004 	b	40003c50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2d0>
        match self {
    40003c44:	f9405fe8 	ldr	x8, [sp, #184]
    40003c48:	b5000108 	cbnz	x8, 40003c68 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2e8>
    40003c4c:	1400000b 	b	40003c78 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2f8>
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
    40003c50:	f9404be0 	ldr	x0, [sp, #144]
                precondition_check($($arg,)*);
    40003c54:	97fff3cb 	bl	40000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>
            if ::core::ub_checks::$kind() {
    40003c58:	14000001 	b	40003c5c <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2dc>
            NonNull { pointer: ptr as _ }
    40003c5c:	f94083e8 	ldr	x8, [sp, #256]
            Some(unsafe { Self::new_unchecked(ptr) })
    40003c60:	f9005fe8 	str	x8, [sp, #184]
        if !ptr.is_null() {
    40003c64:	17fffff8 	b	40003c44 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x2c4>
            Some(v) => Ok(v),
    40003c68:	f9405fe8 	ldr	x8, [sp, #184]
    40003c6c:	f90107e8 	str	x8, [sp, #520]
    40003c70:	f9005be8 	str	x8, [sp, #176]
    }
    40003c74:	14000004 	b	40003c84 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x304>
    40003c78:	aa1f03e8 	mov	x8, xzr
            None => Err(err),
    40003c7c:	f9005be8 	str	x8, [sp, #176]
    40003c80:	14000001 	b	40003c84 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x304>
        match self {
    40003c84:	f9405be8 	ldr	x8, [sp, #176]
    40003c88:	b5000128 	cbnz	x8, 40003cac <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x32c>
    40003c8c:	14000001 	b	40003c90 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x310>
            Err(e) => Err(From::from(e)),
    40003c90:	d503201f 	nop
    40003c94:	1002e9e8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40003c98:	f9400109 	ldr	x9, [x8]
    40003c9c:	f9400508 	ldr	x8, [x8, #8]
    40003ca0:	f9003fe9 	str	x9, [sp, #120]
    40003ca4:	f90043e8 	str	x8, [sp, #128]
    40003ca8:	17ffff6a 	b	40003a50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xd0>
    40003cac:	b94057e8 	ldr	w8, [sp, #84]
            Ok(v) => ControlFlow::Continue(v),
    40003cb0:	f9405be9 	ldr	x9, [sp, #176]
    40003cb4:	f9010be9 	str	x9, [sp, #528]
    40003cb8:	f90057e9 	str	x9, [sp, #168]
    40003cbc:	f94057e9 	ldr	x9, [sp, #168]
    40003cc0:	aa0903ea 	mov	x10, x9
    40003cc4:	f9000bea 	str	x10, [sp, #16]
    40003cc8:	f9010fe9 	str	x9, [sp, #536]
                if zeroed {
    40003ccc:	37000108 	tbnz	w8, #0, 40003cec <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x36c>
    40003cd0:	14000001 	b	40003cd4 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x354>
    40003cd4:	f94017e8 	ldr	x8, [sp, #40]
    40003cd8:	f9400be9 	ldr	x9, [sp, #16]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    40003cdc:	f9011fe9 	str	x9, [sp, #568]
    40003ce0:	f90123e9 	str	x9, [sp, #576]
    40003ce4:	f90127e8 	str	x8, [sp, #584]
    40003ce8:	1400001d 	b	40003d5c <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x3dc>
    40003cec:	f94017e8 	ldr	x8, [sp, #40]
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
    40003cf0:	f9404be9 	ldr	x9, [sp, #144]
    40003cf4:	f90113e9 	str	x9, [sp, #544]
        unsafe { intrinsics::offset(self, count) }
    40003cf8:	f9404be9 	ldr	x9, [sp, #144]
    40003cfc:	f94047ea 	ldr	x10, [sp, #136]
    40003d00:	8b0a0129 	add	x9, x9, x10
    40003d04:	aa0903e0 	mov	x0, x9
    40003d08:	f90003e0 	str	x0, [sp]
    40003d0c:	f90117e9 	str	x9, [sp, #552]
    40003d10:	f94047e9 	ldr	x9, [sp, #136]
    40003d14:	eb090108 	subs	x8, x8, x9
    40003d18:	aa0803e9 	mov	x9, x8
    40003d1c:	f90007e9 	str	x9, [sp, #8]
    40003d20:	f9011be8 	str	x8, [sp, #560]
    40003d24:	14000001 	b	40003d28 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x3a8>
    40003d28:	f94003e0 	ldr	x0, [sp]
    40003d2c:	f94007e8 	ldr	x8, [sp, #8]
                zero_size: bool = T::IS_ZST || count == 0,
    40003d30:	f1000108 	subs	x8, x8, #0x0
    40003d34:	1a9f17e2 	cset	w2, eq	// eq = none
    40003d38:	52800028 	mov	w8, #0x1                   	// #1
    40003d3c:	2a0803e1 	mov	w1, w8
                precondition_check($($arg,)*);
    40003d40:	97fff490 	bl	40000f80 <_ZN4core10intrinsics11write_bytes18precondition_check17h07b16a1e8ec240e5E>
            if ::core::ub_checks::$kind() {
    40003d44:	14000001 	b	40003d48 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x3c8>
    40003d48:	f94007e2 	ldr	x2, [sp, #8]
    40003d4c:	f94003e0 	ldr	x0, [sp]
    40003d50:	2a1f03e1 	mov	w1, wzr
        write_bytes(dst, val, count)
    40003d54:	9400164d 	bl	40009688 <memset>
                if zeroed {
    40003d58:	17ffffdf 	b	40003cd4 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x354>
    40003d5c:	f9400be0 	ldr	x0, [sp, #16]
                precondition_check($($arg,)*);
    40003d60:	97fff388 	bl	40000b80 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hd75b34235a6041cfE>
            if ::core::ub_checks::$kind() {
    40003d64:	14000001 	b	40003d68 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0x3e8>
    40003d68:	f94017e8 	ldr	x8, [sp, #40]
    40003d6c:	f9400be9 	ldr	x9, [sp, #16]
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
    40003d70:	f9003fe9 	str	x9, [sp, #120]
    40003d74:	f90043e8 	str	x8, [sp, #128]
            },
    40003d78:	17ffff36 	b	40003a50 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE+0xd0>
    40003d7c:	00000000 	udf	#0

0000000040003d80 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17he6dc343d6fb67034E>:
        }
    }

    #[inline]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    unsafe fn grow(
    40003d80:	d10103ff 	sub	sp, sp, #0x40
    40003d84:	f9001bfe 	str	x30, [sp, #48]
    40003d88:	f90003e0 	str	x0, [sp]
    40003d8c:	f90007e1 	str	x1, [sp, #8]
    40003d90:	f9000be2 	str	x2, [sp, #16]
    40003d94:	f9000fe3 	str	x3, [sp, #24]
    40003d98:	f90013e4 	str	x4, [sp, #32]
    40003d9c:	f90017e5 	str	x5, [sp, #40]
    40003da0:	2a1f03e6 	mov	w6, wzr
        ptr: NonNull<u8>,
        old_layout: Layout,
        new_layout: Layout,
    ) -> Result<NonNull<[u8]>, AllocError> {
        // SAFETY: all conditions must be upheld by the caller
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
    40003da4:	97fffef7 	bl	40003980 <_ZN5alloc5alloc6Global9grow_impl17habec8cae15f652ccE>
    }
    40003da8:	f9401bfe 	ldr	x30, [sp, #48]
    40003dac:	910103ff 	add	sp, sp, #0x40
    40003db0:	d65f03c0 	ret
	...

0000000040003dc0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17h180607faa2fbb0e4E>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
    40003dc0:	d100c3ff 	sub	sp, sp, #0x30
    40003dc4:	f90013fe 	str	x30, [sp, #32]
    40003dc8:	f90007e0 	str	x0, [sp, #8]
    40003dcc:	f9000be1 	str	x1, [sp, #16]
    40003dd0:	f9000fe2 	str	x2, [sp, #24]
    40003dd4:	2a1f03e3 	mov	w3, wzr
        self.alloc_impl(layout, false)
    40003dd8:	97fffe82 	bl	400037e0 <_ZN5alloc5alloc6Global10alloc_impl17h0abb017aae3b5eafE>
    }
    40003ddc:	f94013fe 	ldr	x30, [sp, #32]
    40003de0:	9100c3ff 	add	sp, sp, #0x30
    40003de4:	d65f03c0 	ret
	...

0000000040003df0 <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4df220a4e6aec91dE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    40003df0:	d10103ff 	sub	sp, sp, #0x40
    40003df4:	f9001bfe 	str	x30, [sp, #48]
    40003df8:	b90017e0 	str	w0, [sp, #20]
    40003dfc:	f9000fe1 	str	x1, [sp, #24]
            unsafe { start.checked_add_unsigned(n as $unsigned).unwrap_unchecked() }
    40003e00:	2a0103e9 	mov	w9, w1
    40003e04:	b90023e9 	str	w9, [sp, #32]
        #[rustc_const_stable(feature = "const_int_methods", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline(always)]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    40003e08:	2b09000a 	adds	w10, w0, w9
    40003e0c:	1a9f77e8 	cset	w8, vs
    40003e10:	2a0a03eb 	mov	w11, w10
    40003e14:	b9000beb 	str	w11, [sp, #8]
    40003e18:	b90027ea 	str	w10, [sp, #36]
                      without modifying the original"]
        #[inline]
        pub const fn overflowing_add_unsigned(self, rhs: $UnsignedT) -> (Self, bool) {
            let rhs = rhs as Self;
            let (res, overflowed) = self.overflowing_add(rhs);
            (res, overflowed ^ (rhs < 0))
    40003e1c:	71000129 	subs	w9, w9, #0x0
    40003e20:	1a9fa7e9 	cset	w9, lt	// lt = tstop
    40003e24:	4a090108 	eor	w8, w8, w9
    40003e28:	3900afe8 	strb	w8, [sp, #43]
    if b {
    40003e2c:	37000168 	tbnz	w8, #0, 40003e58 <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4df220a4e6aec91dE+0x68>
    40003e30:	14000001 	b	40003e34 <_ZN47_$LT$i32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4df220a4e6aec91dE+0x44>
    40003e34:	b9400be8 	ldr	w8, [sp, #8]
            if intrinsics::unlikely(b) { None } else { Some(a) }
    40003e38:	b90013e8 	str	w8, [sp, #16]
    40003e3c:	52800028 	mov	w8, #0x1                   	// #1
    40003e40:	b9000fe8 	str	w8, [sp, #12]
            Some(val) => val,
    40003e44:	b94013e0 	ldr	w0, [sp, #16]
    40003e48:	b9002fe0 	str	w0, [sp, #44]
        }
    40003e4c:	f9401bfe 	ldr	x30, [sp, #48]
    40003e50:	910103ff 	add	sp, sp, #0x40
    40003e54:	d65f03c0 	ret
    40003e58:	d503201f 	nop
    40003e5c:	100354a8 	adr	x8, 4000a8f0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xd28>
    40003e60:	b9400109 	ldr	w9, [x8]
    40003e64:	b9400508 	ldr	w8, [x8, #4]
    40003e68:	b9000fe9 	str	w9, [sp, #12]
    40003e6c:	b90013e8 	str	w8, [sp, #16]
                precondition_check($($arg,)*);
    40003e70:	97fff570 	bl	40001430 <_ZN4core4hint21unreachable_unchecked18precondition_check17h2852c9890cdbb746E>
    40003e74:	d4200020 	brk	#0x1
	...

0000000040003e80 <__rust_alloc_error_handler>:
    40003e80:	17fffbec 	b	40002e30 <__rg_oom>
	...

0000000040003e90 <_ZN145_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..option..Option$LT$core..convert..Infallible$GT$$GT$$GT$13from_residual17hd31e6d64db8e0193E>:
    fn from_residual(residual: Option<convert::Infallible>) -> Self {
    40003e90:	d10043ff 	sub	sp, sp, #0x10
    40003e94:	aa0803e9 	mov	x9, x8
    40003e98:	aa1f03e8 	mov	x8, xzr
            None => None,
    40003e9c:	f9000128 	str	x8, [x9]
        }
    }
    40003ea0:	910043ff 	add	sp, sp, #0x10
    40003ea4:	d65f03c0 	ret
	...

0000000040003eb0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h21c1842975e73179E>:
    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
    40003eb0:	d10043ff 	sub	sp, sp, #0x10
    40003eb4:	aa0803e9 	mov	x9, x8
    40003eb8:	aa1f03e8 	mov	x8, xzr
            Err(e) => Err(From::from(e)),
    40003ebc:	f9000528 	str	x8, [x9, #8]
        }
    }
    40003ec0:	910043ff 	add	sp, sp, #0x10
    40003ec4:	d65f03c0 	ret
	...

0000000040003ed0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h18bc689370717ddfE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    40003ed0:	d10083ff 	sub	sp, sp, #0x20
    40003ed4:	f9000bfe 	str	x30, [sp, #16]
    40003ed8:	f90003e0 	str	x0, [sp]
    40003edc:	f90007e1 	str	x1, [sp, #8]
    40003ee0:	f9400000 	ldr	x0, [x0]
    40003ee4:	9400030b 	bl	40004b10 <_ZN50_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94cd9c871d706815E>
    40003ee8:	f9400bfe 	ldr	x30, [sp, #16]
    40003eec:	910083ff 	add	sp, sp, #0x20
    40003ef0:	d65f03c0 	ret
	...

0000000040003f00 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c2d5a2ccd7a56b9E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    40003f00:	d100c3ff 	sub	sp, sp, #0x30
    40003f04:	f90013fe 	str	x30, [sp, #32]
    40003f08:	f90003e1 	str	x1, [sp]
    40003f0c:	f90007e0 	str	x0, [sp, #8]
    40003f10:	f9000be0 	str	x0, [sp, #16]
    40003f14:	f9000fe1 	str	x1, [sp, #24]
            if ::core::ub_checks::$kind() {
    40003f18:	14000001 	b	40003f1c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c2d5a2ccd7a56b9E+0x1c>
    40003f1c:	f94003e1 	ldr	x1, [sp]
    40003f20:	f94007e0 	ldr	x0, [sp, #8]
                precondition_check($($arg,)*);
    40003f24:	9400007f 	bl	40004120 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h9ba2c95f72e1cff2E>
    40003f28:	14000001 	b	40003f2c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c2d5a2ccd7a56b9E+0x2c>
    40003f2c:	f94007e8 	ldr	x8, [sp, #8]
    40003f30:	f94003e9 	ldr	x9, [sp]
                intrinsics::unchecked_add(self, rhs)
    40003f34:	8b090100 	add	x0, x8, x9
        }
    40003f38:	f94013fe 	ldr	x30, [sp, #32]
    40003f3c:	9100c3ff 	add	sp, sp, #0x30
    40003f40:	d65f03c0 	ret
	...

0000000040003f50 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E>:
    fn lt(&self, other: &Rhs) -> bool {
    40003f50:	d100c3ff 	sub	sp, sp, #0x30
    40003f54:	f90013fe 	str	x30, [sp, #32]
    40003f58:	f90007e0 	str	x0, [sp, #8]
    40003f5c:	f9000be1 	str	x1, [sp, #16]
        self.partial_cmp(other).is_some_and(Ordering::is_lt)
    40003f60:	94000324 	bl	40004bf0 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E>
    40003f64:	39001be0 	strb	w0, [sp, #6]
        match self {
    40003f68:	39401be8 	ldrb	w8, [sp, #6]
    40003f6c:	71000908 	subs	w8, w8, #0x2
    40003f70:	54000100 	b.eq	40003f90 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E+0x40>  // b.none
    40003f74:	14000001 	b	40003f78 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E+0x28>
            Some(x) => f(x),
    40003f78:	39401be8 	ldrb	w8, [sp, #6]
    40003f7c:	39001fe8 	strb	w8, [sp, #7]
        crate::intrinsics::discriminant_value(&self)
    40003f80:	39401fe8 	ldrb	w8, [sp, #7]
        self.as_raw() < 0
    40003f84:	53077d08 	lsr	w8, w8, #7
    40003f88:	390017e8 	strb	w8, [sp, #5]
    40003f8c:	14000004 	b	40003f9c <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E+0x4c>
    40003f90:	2a1f03e8 	mov	w8, wzr
            None => false,
    40003f94:	390017e8 	strb	w8, [sp, #5]
    }
    40003f98:	14000001 	b	40003f9c <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E+0x4c>
    }
    40003f9c:	394017e0 	ldrb	w0, [sp, #5]
    40003fa0:	f94013fe 	ldr	x30, [sp, #32]
    40003fa4:	9100c3ff 	add	sp, sp, #0x30
    40003fa8:	d65f03c0 	ret
    40003fac:	00000000 	udf	#0

0000000040003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>:
    pub fn new_display<T: Display>(x: &T) -> Argument<'_> {
    40003fb0:	d10083ff 	sub	sp, sp, #0x20
    40003fb4:	aa0803e9 	mov	x9, x8
    40003fb8:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40003fbc:	f90007e0 	str	x0, [sp, #8]
    40003fc0:	d503201f 	nop
    40003fc4:	1002a0e8 	adr	x8, 400093e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E>
    40003fc8:	f9000be8 	str	x8, [sp, #16]
        Argument {
    40003fcc:	f94007e8 	ldr	x8, [sp, #8]
    40003fd0:	f9400bea 	ldr	x10, [sp, #16]
    40003fd4:	f900052a 	str	x10, [x9, #8]
    40003fd8:	f9000128 	str	x8, [x9]
    }
    40003fdc:	910083ff 	add	sp, sp, #0x20
    40003fe0:	d65f03c0 	ret
	...

0000000040003ff0 <_ZN4core3fmt2rt8Argument9new_debug17h57844f5ebc65bce2E>:
    pub fn new_debug<T: Debug>(x: &T) -> Argument<'_> {
    40003ff0:	d10083ff 	sub	sp, sp, #0x20
    40003ff4:	aa0803e9 	mov	x9, x8
    40003ff8:	f9000fe0 	str	x0, [sp, #24]
            ty: ArgumentType::Placeholder {
    40003ffc:	f90007e0 	str	x0, [sp, #8]
    40004000:	d503201f 	nop
    40004004:	10005868 	adr	x8, 40004b10 <_ZN50_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94cd9c871d706815E>
    40004008:	f9000be8 	str	x8, [sp, #16]
        Argument {
    4000400c:	f94007e8 	ldr	x8, [sp, #8]
    40004010:	f9400bea 	ldr	x10, [sp, #16]
    40004014:	f900052a 	str	x10, [x9, #8]
    40004018:	f9000128 	str	x8, [x9]
    }
    4000401c:	910083ff 	add	sp, sp, #0x20
    40004020:	d65f03c0 	ret
	...

0000000040004030 <_ZN4core3fmt9Arguments6new_v117h645cec9f4d6a1ab0E>:
    pub const fn new_v1<const P: usize, const A: usize>(
    40004030:	d10043ff 	sub	sp, sp, #0x10
    40004034:	aa0803e9 	mov	x9, x8
    40004038:	f90003e0 	str	x0, [sp]
    4000403c:	f90007e1 	str	x1, [sp, #8]
        Arguments { pieces, fmt: None, args }
    40004040:	f9000120 	str	x0, [x9]
    40004044:	52800088 	mov	w8, #0x4                   	// #4
    40004048:	f9000528 	str	x8, [x9, #8]
    4000404c:	d503201f 	nop
    40004050:	1002cc08 	adr	x8, 400099d0 <memcpy+0x1f8>
    40004054:	f940010a 	ldr	x10, [x8]
    40004058:	f9400508 	ldr	x8, [x8, #8]
    4000405c:	f900112a 	str	x10, [x9, #32]
    40004060:	f9001528 	str	x8, [x9, #40]
    40004064:	f9000921 	str	x1, [x9, #16]
    40004068:	52800068 	mov	w8, #0x3                   	// #3
    4000406c:	f9000d28 	str	x8, [x9, #24]
    }
    40004070:	910043ff 	add	sp, sp, #0x10
    40004074:	d65f03c0 	ret
	...

0000000040004080 <_ZN4core3fmt9Arguments6new_v117hd56b67e9706186faE>:
    pub const fn new_v1<const P: usize, const A: usize>(
    40004080:	d10043ff 	sub	sp, sp, #0x10
    40004084:	aa0803e9 	mov	x9, x8
    40004088:	f90003e0 	str	x0, [sp]
    4000408c:	f90007e1 	str	x1, [sp, #8]
        Arguments { pieces, fmt: None, args }
    40004090:	f9000120 	str	x0, [x9]
    40004094:	52800048 	mov	w8, #0x2                   	// #2
    40004098:	f9000528 	str	x8, [x9, #8]
    4000409c:	d503201f 	nop
    400040a0:	1002c988 	adr	x8, 400099d0 <memcpy+0x1f8>
    400040a4:	f940010a 	ldr	x10, [x8]
    400040a8:	f9400508 	ldr	x8, [x8, #8]
    400040ac:	f900112a 	str	x10, [x9, #32]
    400040b0:	f9001528 	str	x8, [x9, #40]
    400040b4:	f9000921 	str	x1, [x9, #16]
    400040b8:	52800028 	mov	w8, #0x1                   	// #1
    400040bc:	f9000d28 	str	x8, [x9, #24]
    }
    400040c0:	910043ff 	add	sp, sp, #0x10
    400040c4:	d65f03c0 	ret
	...

00000000400040d0 <_ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE>:
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    400040d0:	d10043ff 	sub	sp, sp, #0x10
    400040d4:	aa0803e9 	mov	x9, x8
    400040d8:	f90007e0 	str	x0, [sp, #8]
        Arguments { pieces, fmt: None, args: &[] }
    400040dc:	f9000120 	str	x0, [x9]
    400040e0:	52800028 	mov	w8, #0x1                   	// #1
    400040e4:	f9000528 	str	x8, [x9, #8]
    400040e8:	d503201f 	nop
    400040ec:	1002c728 	adr	x8, 400099d0 <memcpy+0x1f8>
    400040f0:	f940010a 	ldr	x10, [x8]
    400040f4:	f9400508 	ldr	x8, [x8, #8]
    400040f8:	f900112a 	str	x10, [x9, #32]
    400040fc:	f9001528 	str	x8, [x9, #40]
    40004100:	52800108 	mov	w8, #0x8                   	// #8
    40004104:	f9000928 	str	x8, [x9, #16]
    40004108:	aa1f03e8 	mov	x8, xzr
    4000410c:	f9000d28 	str	x8, [x9, #24]
    }
    40004110:	910043ff 	add	sp, sp, #0x10
    40004114:	d65f03c0 	ret
	...

0000000040004120 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h9ba2c95f72e1cff2E>:
            const fn precondition_check($($name:$ty),*) {
    40004120:	d10043ff 	sub	sp, sp, #0x10
    40004124:	f90003e0 	str	x0, [sp]
    40004128:	f90007e1 	str	x1, [sp, #8]
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    4000412c:	ab010008 	adds	x8, x0, x1
    40004130:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
                ) => !lhs.overflowing_add(rhs).1,
    40004134:	37000088 	tbnz	w8, #0, 40004144 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h9ba2c95f72e1cff2E+0x24>
    40004138:	14000001 	b	4000413c <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add18precondition_check17h9ba2c95f72e1cff2E+0x1c>
            }
    4000413c:	910043ff 	add	sp, sp, #0x10
    40004140:	d65f03c0 	ret
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    40004144:	d503201f 	nop
    40004148:	10036ec0 	adr	x0, 4000af20 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1358>
    4000414c:	52801748 	mov	w8, #0xba                  	// #186
    40004150:	2a0803e1 	mov	w1, w8
    40004154:	94000df1 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
	...

0000000040004160 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17h4c49ed86627f65aaE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    40004160:	d10083ff 	sub	sp, sp, #0x20
    40004164:	f9000bfe 	str	x30, [sp, #16]
    40004168:	f90007e0 	str	x0, [sp, #8]
    4000416c:	940002fd 	bl	40004d60 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h539b820ac468e84fE>
    40004170:	f9400bfe 	ldr	x30, [sp, #16]
    40004174:	910083ff 	add	sp, sp, #0x20
    40004178:	d65f03c0 	ret
    4000417c:	00000000 	udf	#0

0000000040004180 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E>:
/// power-of-two, it will probably be more prudent to just change to a naive implementation rather
/// than trying to adapt this to accommodate that change.
///
/// Any questions go to @nagisa.
#[allow(ptr_to_integer_transmute_in_consts)]
pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {
    40004180:	d10383ff 	sub	sp, sp, #0xe0
    40004184:	f9006bfe 	str	x30, [sp, #208]
    40004188:	f90013e1 	str	x1, [sp, #32]
    4000418c:	f90027e0 	str	x0, [sp, #72]
    40004190:	f9002be1 	str	x1, [sp, #80]
    40004194:	52800028 	mov	w8, #0x1                   	// #1
    40004198:	f9002fe8 	str	x8, [sp, #88]
    4000419c:	aa0003e8 	mov	x8, x0
    400041a0:	f90017e8 	str	x8, [sp, #40]
    400041a4:	f90033e0 	str	x0, [sp, #96]
    let stride = size_of::<T>();

    let addr: usize = p.addr();

    // SAFETY: `a` is a power-of-two, therefore non-zero.
    let a_minus_one = unsafe { unchecked_sub(a, 1) };
    400041a8:	f1000428 	subs	x8, x1, #0x1
    400041ac:	aa0803e9 	mov	x9, x8
    400041b0:	f9001be9 	str	x9, [sp, #48]
    400041b4:	f90037e8 	str	x8, [sp, #104]

    if stride == 0 {
    400041b8:	14000001 	b	400041bc <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x3c>
    400041bc:	aa1f03e8 	mov	x8, xzr
        let p_mod_a = addr & a_minus_one;
        return if p_mod_a == 0 { 0 } else { usize::MAX };
    }

    // SAFETY: `stride == 0` case has been handled by the special case above.
    let a_mod_stride = unsafe { unchecked_rem(a, stride) };
    400041c0:	f9003fe8 	str	x8, [sp, #120]
    if a_mod_stride == 0 {
    400041c4:	b40000c8 	cbz	x8, 400041dc <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x5c>
    400041c8:	14000014 	b	40004218 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x98>
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
    }

    // Cannot be aligned at all.
    usize::MAX
}
    400041cc:	f9401fe0 	ldr	x0, [sp, #56]
    400041d0:	f9406bfe 	ldr	x30, [sp, #208]
    400041d4:	910383ff 	add	sp, sp, #0xe0
    400041d8:	d65f03c0 	ret
    400041dc:	f94017ea 	ldr	x10, [sp, #40]
    400041e0:	f94013eb 	ldr	x11, [sp, #32]
    400041e4:	f9401be8 	ldr	x8, [sp, #48]
        let aligned_address = wrapping_add(addr, a_minus_one) & wrapping_sub(0, a);
    400041e8:	8b080149 	add	x9, x10, x8
    400041ec:	aa1f03e8 	mov	x8, xzr
    400041f0:	eb0b010b 	subs	x11, x8, x11
    400041f4:	8a0b0129 	and	x9, x9, x11
    400041f8:	f90043e9 	str	x9, [sp, #128]
        let byte_offset = wrapping_sub(aligned_address, addr);
    400041fc:	eb0a0129 	subs	x9, x9, x10
    40004200:	aa0903ea 	mov	x10, x9
    40004204:	f9000fea 	str	x10, [sp, #24]
    40004208:	f90047e9 	str	x9, [sp, #136]
        let addr_mod_stride = unsafe { unchecked_rem(addr, stride) };
    4000420c:	f9004be8 	str	x8, [sp, #144]
        return if addr_mod_stride == 0 {
    40004210:	b4000268 	cbz	x8, 4000425c <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0xdc>
    40004214:	14000015 	b	40004268 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0xe8>
    40004218:	f94013e9 	ldr	x9, [sp, #32]
    4000421c:	2a1f03e8 	mov	w8, wzr
        let x = cttz_nonzero(stride);
    40004220:	b9009be8 	str	w8, [sp, #152]
    40004224:	b9409be8 	ldr	w8, [sp, #152]
    40004228:	2a0803ea 	mov	w10, w8
    4000422c:	b90013ea 	str	w10, [sp, #16]
    40004230:	b9009fe8 	str	w8, [sp, #156]
        let y = cttz_nonzero(a);
    40004234:	dac00129 	rbit	x9, x9
    40004238:	dac01129 	clz	x9, x9
    4000423c:	b900a3e9 	str	w9, [sp, #160]
    40004240:	b940a3e9 	ldr	w9, [sp, #160]
    40004244:	2a0903ea 	mov	w10, w9
    40004248:	b90017ea 	str	w10, [sp, #20]
    4000424c:	b900a7e9 	str	w9, [sp, #164]
        if x < y { x } else { y }
    40004250:	6b090108 	subs	w8, w8, w9
    40004254:	54000183 	b.cc	40004284 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x104>  // b.lo, b.ul, b.last
    40004258:	14000008 	b	40004278 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0xf8>
    4000425c:	f9400fe8 	ldr	x8, [sp, #24]
            unsafe { exact_div(byte_offset, stride) }
    40004260:	f9001fe8 	str	x8, [sp, #56]
    40004264:	14000004 	b	40004274 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0xf4>
    40004268:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
            usize::MAX
    4000426c:	f9001fe8 	str	x8, [sp, #56]
        return if addr_mod_stride == 0 {
    40004270:	14000001 	b	40004274 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0xf4>
    40004274:	17ffffd6 	b	400041cc <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x4c>
    40004278:	b94017e8 	ldr	w8, [sp, #20]
        if x < y { x } else { y }
    4000427c:	b90047e8 	str	w8, [sp, #68]
    40004280:	14000004 	b	40004290 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x110>
    40004284:	b94013e8 	ldr	w8, [sp, #16]
    40004288:	b90047e8 	str	w8, [sp, #68]
    4000428c:	14000001 	b	40004290 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x110>
    40004290:	f94017e8 	ldr	x8, [sp, #40]
    let gcd = unsafe { unchecked_shl(1usize, gcdpow) };
    40004294:	b94047e9 	ldr	w9, [sp, #68]
    40004298:	2a0903ea 	mov	w10, w9
    4000429c:	52800029 	mov	w9, #0x1                   	// #1
    400042a0:	9aca2129 	lsl	x9, x9, x10
    400042a4:	f90057e9 	str	x9, [sp, #168]
    if addr & unsafe { unchecked_sub(gcd, 1) } == 0 {
    400042a8:	f1000529 	subs	x9, x9, #0x1
    400042ac:	8a090108 	and	x8, x8, x9
    400042b0:	b5000388 	cbnz	x8, 40004320 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x1a0>
    400042b4:	14000001 	b	400042b8 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x138>
    400042b8:	f94017e8 	ldr	x8, [sp, #40]
    400042bc:	f9401be9 	ldr	x9, [sp, #48]
    400042c0:	f94013ea 	ldr	x10, [sp, #32]
        let a2 = unsafe { unchecked_shr(a, gcdpow) };
    400042c4:	b94047eb 	ldr	w11, [sp, #68]
    400042c8:	9acb2541 	lsr	x1, x10, x11
    400042cc:	f9005be1 	str	x1, [sp, #176]
        let a2minus1 = unsafe { unchecked_sub(a2, 1) };
    400042d0:	f100042a 	subs	x10, x1, #0x1
    400042d4:	f90007ea 	str	x10, [sp, #8]
    400042d8:	f9005fea 	str	x10, [sp, #184]
        let s2 = unsafe { unchecked_shr(stride & a_minus_one, gcdpow) };
    400042dc:	9240012a 	and	x10, x9, #0x1
    400042e0:	b94047eb 	ldr	w11, [sp, #68]
    400042e4:	9acb2540 	lsr	x0, x10, x11
    400042e8:	f90063e0 	str	x0, [sp, #192]
        let minusp2 = unsafe { unchecked_sub(a2, unchecked_shr(addr & a_minus_one, gcdpow)) };
    400042ec:	8a090108 	and	x8, x8, x9
    400042f0:	b94047e9 	ldr	w9, [sp, #68]
    400042f4:	9ac92508 	lsr	x8, x8, x9
    400042f8:	eb080028 	subs	x8, x1, x8
    400042fc:	f90003e8 	str	x8, [sp]
    40004300:	f90067e8 	str	x8, [sp, #200]
        return wrapping_mul(minusp2, unsafe { mod_inv(s2, a2) }) & a2minus1;
    40004304:	9400000b 	bl	40004330 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE>
    40004308:	f94003e8 	ldr	x8, [sp]
    4000430c:	f94007e9 	ldr	x9, [sp, #8]
    40004310:	9b007d08 	mul	x8, x8, x0
    40004314:	8a090108 	and	x8, x8, x9
    40004318:	f9001fe8 	str	x8, [sp, #56]
    4000431c:	17ffffac 	b	400041cc <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x4c>
    40004320:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
    usize::MAX
    40004324:	f9001fe8 	str	x8, [sp, #56]
}
    40004328:	17ffffa9 	b	400041cc <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E+0x4c>
    4000432c:	00000000 	udf	#0

0000000040004330 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE>:
    const unsafe fn mod_inv(x: usize, m: usize) -> usize {
    40004330:	d101c3ff 	sub	sp, sp, #0x70
    40004334:	f9000be1 	str	x1, [sp, #16]
    40004338:	f9000fe0 	str	x0, [sp, #24]
    4000433c:	f90027e0 	str	x0, [sp, #72]
    40004340:	f9002be1 	str	x1, [sp, #80]
        let m_minus_one = unsafe { unchecked_sub(m, 1) };
    40004344:	f1000428 	subs	x8, x1, #0x1
    40004348:	aa0803e9 	mov	x9, x8
    4000434c:	f90013e9 	str	x9, [sp, #32]
    40004350:	f9002fe8 	str	x8, [sp, #88]
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
    40004354:	d503201f 	nop
    40004358:	10032c89 	adr	x9, 4000a8e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0xd20>
    4000435c:	39400528 	ldrb	w8, [x9, #1]
    40004360:	2a0803ea 	mov	w10, w8
    40004364:	39400128 	ldrb	w8, [x9]
    40004368:	aa0a210a 	orr	x10, x8, x10, lsl #8
    4000436c:	39400d28 	ldrb	w8, [x9, #3]
    40004370:	2a0803eb 	mov	w11, w8
    40004374:	39400928 	ldrb	w8, [x9, #2]
    40004378:	d370bd08 	lsl	x8, x8, #16
    4000437c:	aa0b6108 	orr	x8, x8, x11, lsl #24
    40004380:	aa0a0108 	orr	x8, x8, x10
    40004384:	3940152b 	ldrb	w11, [x9, #5]
    40004388:	38404d2a 	ldrb	w10, [x9, #4]!
    4000438c:	2a0a03e1 	mov	w1, w10
    40004390:	2a0103ea 	mov	w10, w1
    40004394:	2a0b214a 	orr	w10, w10, w11, lsl #8
    40004398:	39400d2b 	ldrb	w11, [x9, #3]
    4000439c:	39400929 	ldrb	w9, [x9, #2]
    400043a0:	53103d29 	lsl	w9, w9, #16
    400043a4:	2a0b6129 	orr	w9, w9, w11, lsl #24
    400043a8:	2a0a012a 	orr	w10, w9, w10
    400043ac:	2a0a03e9 	mov	w9, w10
    400043b0:	aa098108 	orr	x8, x8, x9, lsl #32
    400043b4:	f9001fe8 	str	x8, [sp, #56]
    400043b8:	d3410c08 	ubfx	x8, x0, #1, #3
    400043bc:	aa0803e9 	mov	x9, x8
    400043c0:	f90017e9 	str	x9, [sp, #40]
    400043c4:	f1001d08 	subs	x8, x8, #0x7
    400043c8:	54000128 	b.hi	400043ec <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0xbc>  // b.pmore
    400043cc:	14000001 	b	400043d0 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0xa0>
    400043d0:	f94017e9 	ldr	x9, [sp, #40]
    400043d4:	9100e3e8 	add	x8, sp, #0x38
    400043d8:	38696908 	ldrb	w8, [x8, x9]
    400043dc:	f9001be8 	str	x8, [sp, #48]
    400043e0:	52800208 	mov	w8, #0x10                  	// #16
        let mut mod_gate = INV_TABLE_MOD;
    400043e4:	f90023e8 	str	x8, [sp, #64]
        loop {
    400043e8:	14000007 	b	40004404 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0xd4>
    400043ec:	f94017e0 	ldr	x0, [sp, #40]
        let mut inverse = INV_TABLE_MOD_16[(x & (INV_TABLE_MOD - 1)) >> 1] as usize;
    400043f0:	d503201f 	nop
    400043f4:	100362e2 	adr	x2, 4000b050 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1488>
    400043f8:	52800108 	mov	w8, #0x8                   	// #8
    400043fc:	2a0803e1 	mov	w1, w8
    40004400:	94000d55 	bl	40007954 <_ZN4core9panicking18panic_bounds_check17h18a3fb35a960f8a9E>
    40004404:	f9400be9 	ldr	x9, [sp, #16]
            if mod_gate >= m {
    40004408:	f94023e8 	ldr	x8, [sp, #64]
    4000440c:	eb090108 	subs	x8, x8, x9
    40004410:	540002a2 	b.cs	40004464 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0x134>  // b.hs, b.nlast
    40004414:	14000001 	b	40004418 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0xe8>
    40004418:	f9400fe9 	ldr	x9, [sp, #24]
            inverse = wrapping_mul(inverse, wrapping_sub(2usize, wrapping_mul(x, inverse)));
    4000441c:	f9401be8 	ldr	x8, [sp, #48]
    40004420:	9b087d2a 	mul	x10, x9, x8
    40004424:	52800049 	mov	w9, #0x2                   	// #2
    40004428:	eb0a0129 	subs	x9, x9, x10
    4000442c:	9b097d08 	mul	x8, x8, x9
    40004430:	f9001be8 	str	x8, [sp, #48]
            let (new_gate, overflow) = mul_with_overflow(mod_gate, mod_gate);
    40004434:	f94023e9 	ldr	x9, [sp, #64]
    40004438:	9bc97d2a 	umulh	x10, x9, x9
    4000443c:	aa1f03e8 	mov	x8, xzr
    40004440:	eb0a0108 	subs	x8, x8, x10
    40004444:	1a9f07e8 	cset	w8, ne	// ne = any
    40004448:	9b097d29 	mul	x9, x9, x9
    4000444c:	aa0903ea 	mov	x10, x9
    40004450:	f90007ea 	str	x10, [sp, #8]
    40004454:	f90033e9 	str	x9, [sp, #96]
    40004458:	3901bfe8 	strb	w8, [sp, #111]
            if overflow {
    4000445c:	370000c8 	tbnz	w8, #0, 40004474 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0x144>
    40004460:	14000002 	b	40004468 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0x138>
    40004464:	14000005 	b	40004478 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0x148>
    40004468:	f94007e8 	ldr	x8, [sp, #8]
            mod_gate = new_gate;
    4000446c:	f90023e8 	str	x8, [sp, #64]
        loop {
    40004470:	17ffffe5 	b	40004404 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0xd4>
        inverse & m_minus_one
    40004474:	14000001 	b	40004478 <_ZN4core3ptr12align_offset7mod_inv17h3b0271d0882ddafeE+0x148>
    40004478:	f94013e9 	ldr	x9, [sp, #32]
    4000447c:	f9401be8 	ldr	x8, [sp, #48]
    40004480:	8a090100 	and	x0, x8, x9
    }
    40004484:	9101c3ff 	add	sp, sp, #0x70
    40004488:	d65f03c0 	ret
    4000448c:	00000000 	udf	#0

0000000040004490 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12align_offset17h7d32ec1bd5a83319E>:
    /// # }
    /// ```
    #[must_use]
    #[inline]
    #[stable(feature = "align_offset", since = "1.36.0")]
    pub fn align_offset(self, align: usize) -> usize
    40004490:	d10203ff 	sub	sp, sp, #0x80
    40004494:	f9003bfe 	str	x30, [sp, #112]
    40004498:	f90007e1 	str	x1, [sp, #8]
    4000449c:	f9000be0 	str	x0, [sp, #16]
    400044a0:	f90027e0 	str	x0, [sp, #72]
    400044a4:	f9002be1 	str	x1, [sp, #80]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    400044a8:	d503201f 	nop
    400044ac:	10035f68 	adr	x8, 4000b098 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x14d0>
    400044b0:	f9002fe8 	str	x8, [sp, #88]
            return intrinsics::ctpop(self);
    400044b4:	d341fc28 	lsr	x8, x1, #1
    400044b8:	9200f108 	and	x8, x8, #0x5555555555555555
    400044bc:	eb080029 	subs	x9, x1, x8
    400044c0:	9200e528 	and	x8, x9, #0x3333333333333333
    400044c4:	d342fd29 	lsr	x9, x9, #2
    400044c8:	9200e529 	and	x9, x9, #0x3333333333333333
    400044cc:	8b090108 	add	x8, x8, x9
    400044d0:	8b481108 	add	x8, x8, x8, lsr #4
    400044d4:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    400044d8:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    400044dc:	9b097d08 	mul	x8, x8, x9
    400044e0:	d378fd08 	lsr	x8, x8, #56
    400044e4:	b90067e8 	str	w8, [sp, #100]
    400044e8:	b94067e8 	ldr	w8, [sp, #100]
    where
        T: Sized,
    {
        if !align.is_power_of_two() {
    400044ec:	71000508 	subs	w8, w8, #0x1
    400044f0:	54000121 	b.ne	40004514 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12align_offset17h7d32ec1bd5a83319E+0x84>  // b.any
    400044f4:	14000001 	b	400044f8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12align_offset17h7d32ec1bd5a83319E+0x68>
    400044f8:	f94007e1 	ldr	x1, [sp, #8]
    400044fc:	f9400be0 	ldr	x0, [sp, #16]
            panic!("align_offset: align is not a power-of-two");
        }

        // SAFETY: `align` has been checked to be a power of 2 above
        let ret = unsafe { align_offset(self, align) };
    40004500:	97ffff20 	bl	40004180 <_ZN4core3ptr12align_offset17h6ec6cf8b40178278E>
    40004504:	f90037e0 	str	x0, [sp, #104]
                align,
            );
        }

        ret
    }
    40004508:	f9403bfe 	ldr	x30, [sp, #112]
    4000450c:	910203ff 	add	sp, sp, #0x80
    40004510:	d65f03c0 	ret
        Arguments { pieces, fmt: None, args: &[] }
    40004514:	d503201f 	nop
    40004518:	10035c08 	adr	x8, 4000b098 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x14d0>
    4000451c:	f9000fe8 	str	x8, [sp, #24]
    40004520:	52800028 	mov	w8, #0x1                   	// #1
    40004524:	f90013e8 	str	x8, [sp, #32]
    40004528:	d503201f 	nop
    4000452c:	1002a528 	adr	x8, 400099d0 <memcpy+0x1f8>
    40004530:	f9400109 	ldr	x9, [x8]
    40004534:	f9400508 	ldr	x8, [x8, #8]
    40004538:	f9001fe9 	str	x9, [sp, #56]
    4000453c:	f90023e8 	str	x8, [sp, #64]
    40004540:	52800108 	mov	w8, #0x8                   	// #8
    40004544:	f90017e8 	str	x8, [sp, #40]
    40004548:	aa1f03e8 	mov	x8, xzr
    4000454c:	f9001be8 	str	x8, [sp, #48]
            panic!("align_offset: align is not a power-of-two");
    40004550:	d503201f 	nop
    40004554:	10035e61 	adr	x1, 4000b120 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1558>
    40004558:	910063e0 	add	x0, sp, #0x18
    4000455c:	94000cc9 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040004560 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h03c29f654dbe1ab0E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    40004560:	d10083ff 	sub	sp, sp, #0x20
    40004564:	f9000bfe 	str	x30, [sp, #16]
    40004568:	f90003e0 	str	x0, [sp]
    4000456c:	f90007e0 	str	x0, [sp, #8]
            if ::core::ub_checks::$kind() {
    40004570:	14000001 	b	40004574 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h03c29f654dbe1ab0E+0x14>
    40004574:	f94003e0 	ldr	x0, [sp]
                precondition_check($($arg,)*);
    40004578:	94000012 	bl	400045c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E>
            if ::core::ub_checks::$kind() {
    4000457c:	14000001 	b	40004580 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h03c29f654dbe1ab0E+0x20>
    40004580:	f94003e0 	ldr	x0, [sp]
    }
    40004584:	f9400bfe 	ldr	x30, [sp, #16]
    40004588:	910083ff 	add	sp, sp, #0x20
    4000458c:	d65f03c0 	ret

0000000040004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    40004590:	d10083ff 	sub	sp, sp, #0x20
    40004594:	f9000bfe 	str	x30, [sp, #16]
    40004598:	f90003e0 	str	x0, [sp]
    4000459c:	f90007e0 	str	x0, [sp, #8]
    400045a0:	14000001 	b	400045a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E+0x14>
    400045a4:	f94003e0 	ldr	x0, [sp]
                precondition_check($($arg,)*);
    400045a8:	94000006 	bl	400045c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E>
            if ::core::ub_checks::$kind() {
    400045ac:	14000001 	b	400045b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E+0x20>
    400045b0:	f94003e0 	ldr	x0, [sp]
    }
    400045b4:	f9400bfe 	ldr	x30, [sp, #16]
    400045b8:	910083ff 	add	sp, sp, #0x20
    400045bc:	d65f03c0 	ret

00000000400045c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E>:
            const fn precondition_check($($name:$ty),*) {
    400045c0:	d10043ff 	sub	sp, sp, #0x10
    400045c4:	f90007e0 	str	x0, [sp, #8]
                (ptr: *mut () = ptr as *mut ()) => !ptr.is_null()
    400045c8:	b50000e0 	cbnz	x0, 400045e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E+0x24>
    400045cc:	14000001 	b	400045d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E+0x10>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    400045d0:	d503201f 	nop
    400045d4:	10035b20 	adr	x0, 4000b138 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1570>
    400045d8:	52801a48 	mov	w8, #0xd2                  	// #210
    400045dc:	2a0803e1 	mov	w1, w8
    400045e0:	94000cce 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    400045e4:	910043ff 	add	sp, sp, #0x10
    400045e8:	d65f03c0 	ret
    400045ec:	00000000 	udf	#0

00000000400045f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E>:
    pub const fn new(ptr: *mut T) -> Option<Self> {
    400045f0:	d100c3ff 	sub	sp, sp, #0x30
    400045f4:	f90013fe 	str	x30, [sp, #32]
    400045f8:	f90007e0 	str	x0, [sp, #8]
    400045fc:	f9000fe0 	str	x0, [sp, #24]
        if !ptr.is_null() {
    40004600:	b50000a0 	cbnz	x0, 40004614 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x24>
    40004604:	14000001 	b	40004608 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x18>
    40004608:	aa1f03e8 	mov	x8, xzr
            None
    4000460c:	f9000be8 	str	x8, [sp, #16]
        if !ptr.is_null() {
    40004610:	14000002 	b	40004618 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x28>
            if ::core::ub_checks::$kind() {
    40004614:	14000005 	b	40004628 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x38>
    }
    40004618:	f9400be0 	ldr	x0, [sp, #16]
    4000461c:	f94013fe 	ldr	x30, [sp, #32]
    40004620:	9100c3ff 	add	sp, sp, #0x30
    40004624:	d65f03c0 	ret
    40004628:	f94007e0 	ldr	x0, [sp, #8]
                precondition_check($($arg,)*);
    4000462c:	97ffffe5 	bl	400045c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E>
            if ::core::ub_checks::$kind() {
    40004630:	14000001 	b	40004634 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x44>
    40004634:	f94007e8 	ldr	x8, [sp, #8]
            Some(unsafe { Self::new_unchecked(ptr) })
    40004638:	f9000be8 	str	x8, [sp, #16]
        if !ptr.is_null() {
    4000463c:	17fffff7 	b	40004618 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E+0x28>

0000000040004640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E>:
    pub const fn new(ptr: *mut T) -> Option<Self> {
    40004640:	d100c3ff 	sub	sp, sp, #0x30
    40004644:	f90013fe 	str	x30, [sp, #32]
    40004648:	f90007e0 	str	x0, [sp, #8]
    4000464c:	f9000fe0 	str	x0, [sp, #24]
        if !ptr.is_null() {
    40004650:	b50000a0 	cbnz	x0, 40004664 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x24>
    40004654:	14000001 	b	40004658 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x18>
    40004658:	aa1f03e8 	mov	x8, xzr
            None
    4000465c:	f9000be8 	str	x8, [sp, #16]
        if !ptr.is_null() {
    40004660:	14000002 	b	40004668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x28>
    40004664:	14000005 	b	40004678 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x38>
    }
    40004668:	f9400be0 	ldr	x0, [sp, #16]
    4000466c:	f94013fe 	ldr	x30, [sp, #32]
    40004670:	9100c3ff 	add	sp, sp, #0x30
    40004674:	d65f03c0 	ret
    40004678:	f94007e0 	ldr	x0, [sp, #8]
                precondition_check($($arg,)*);
    4000467c:	97ffffd1 	bl	400045c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked18precondition_check17hb4aaf10615ead801E>
            if ::core::ub_checks::$kind() {
    40004680:	14000001 	b	40004684 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x44>
    40004684:	f94007e8 	ldr	x8, [sp, #8]
            Some(unsafe { Self::new_unchecked(ptr) })
    40004688:	f9000be8 	str	x8, [sp, #16]
        if !ptr.is_null() {
    4000468c:	17fffff7 	b	40004668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E+0x28>

0000000040004690 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd636b4095ab66d23E>:
    fn next(&mut self) -> Option<A> {
    40004690:	d10083ff 	sub	sp, sp, #0x20
    40004694:	f9000bfe 	str	x30, [sp, #16]
    40004698:	f90007e0 	str	x0, [sp, #8]
        self.spec_next()
    4000469c:	940001c1 	bl	40004da0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE>
    }
    400046a0:	f9400bfe 	ldr	x30, [sp, #16]
    400046a4:	910083ff 	add	sp, sp, #0x20
    400046a8:	d65f03c0 	ret
    400046ac:	00000000 	udf	#0

00000000400046b0 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
    400046b0:	d10103ff 	sub	sp, sp, #0x40
    400046b4:	f9001bfe 	str	x30, [sp, #48]
    400046b8:	f90003e1 	str	x1, [sp]
    400046bc:	f90007e0 	str	x0, [sp, #8]
    400046c0:	f90013e0 	str	x0, [sp, #32]
    400046c4:	f90017e1 	str	x1, [sp, #40]
        if Layout::is_size_align_valid(size, align) {
    400046c8:	94001199 	bl	40008d2c <_ZN4core5alloc6layout6Layout19is_size_align_valid17h02649c7e20481f71E>
    400046cc:	37000120 	tbnz	w0, #0, 400046f0 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE+0x40>
    400046d0:	14000001 	b	400046d4 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE+0x24>
            Err(LayoutError)
    400046d4:	d503201f 	nop
    400046d8:	100297c8 	adr	x8, 400099d0 <memcpy+0x1f8>
    400046dc:	f9400109 	ldr	x9, [x8]
    400046e0:	f9400508 	ldr	x8, [x8, #8]
    400046e4:	f9000be9 	str	x9, [sp, #16]
    400046e8:	f9000fe8 	str	x8, [sp, #24]
        if Layout::is_size_align_valid(size, align) {
    400046ec:	14000006 	b	40004704 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE+0x54>
    400046f0:	f94007e8 	ldr	x8, [sp, #8]
    400046f4:	f94003e9 	ldr	x9, [sp]
            unsafe { Ok(Layout { size, align: mem::transmute(align) }) }
    400046f8:	f9000be9 	str	x9, [sp, #16]
    400046fc:	f9000fe8 	str	x8, [sp, #24]
        if Layout::is_size_align_valid(size, align) {
    40004700:	14000001 	b	40004704 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE+0x54>
    }
    40004704:	f9400be0 	ldr	x0, [sp, #16]
    40004708:	f9400fe1 	ldr	x1, [sp, #24]
    4000470c:	f9401bfe 	ldr	x30, [sp, #48]
    40004710:	910103ff 	add	sp, sp, #0x40
    40004714:	d65f03c0 	ret
	...

0000000040004720 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h1809f106a35da307E>:
            const fn precondition_check($($name:$ty),*) {
    40004720:	d10083ff 	sub	sp, sp, #0x20
    40004724:	f9000bfe 	str	x30, [sp, #16]
    40004728:	f90003e0 	str	x0, [sp]
    4000472c:	f90007e1 	str	x1, [sp, #8]
            ) => Layout::is_size_align_valid(size, align)
    40004730:	9400117f 	bl	40008d2c <_ZN4core5alloc6layout6Layout19is_size_align_valid17h02649c7e20481f71E>
    40004734:	370000e0 	tbnz	w0, #0, 40004750 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h1809f106a35da307E+0x30>
    40004738:	14000001 	b	4000473c <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h1809f106a35da307E+0x1c>
                    ::core::panicking::panic_nounwind(concat!("unsafe precondition(s) violated: ", $message,
    4000473c:	d503201f 	nop
    40004740:	50035640 	adr	x0, 4000b20a <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1642>
    40004744:	52802328 	mov	w8, #0x119                 	// #281
    40004748:	2a0803e1 	mov	w1, w8
    4000474c:	94000c73 	bl	40007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>
            }
    40004750:	f9400bfe 	ldr	x30, [sp, #16]
    40004754:	910083ff 	add	sp, sp, #0x20
    40004758:	d65f03c0 	ret
    4000475c:	00000000 	udf	#0

0000000040004760 <_ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE>:
    pub const fn new<T>() -> Self {
    40004760:	d10083ff 	sub	sp, sp, #0x20
    40004764:	f9000bfe 	str	x30, [sp, #16]
    40004768:	52800208 	mov	w8, #0x10                  	// #16
    4000476c:	f90003e8 	str	x8, [sp]
    40004770:	52800108 	mov	w8, #0x8                   	// #8
#[must_use]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_align_of", since = "1.24.0")]
pub const fn align_of<T>() -> usize {
    intrinsics::min_align_of::<T>()
    40004774:	f90007e8 	str	x8, [sp, #8]
            if ::core::ub_checks::$kind() {
    40004778:	14000001 	b	4000477c <_ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE+0x1c>
    4000477c:	52800208 	mov	w8, #0x10                  	// #16
    40004780:	2a0803e0 	mov	w0, w8
    40004784:	52800108 	mov	w8, #0x8                   	// #8
    40004788:	2a0803e1 	mov	w1, w8
                precondition_check($($arg,)*);
    4000478c:	97ffffe5 	bl	40004720 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked18precondition_check17h1809f106a35da307E>
    40004790:	14000001 	b	40004794 <_ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE+0x34>
    40004794:	52800108 	mov	w8, #0x8                   	// #8
    40004798:	2a0803e0 	mov	w0, w8
    4000479c:	52800208 	mov	w8, #0x10                  	// #16
    400047a0:	2a0803e1 	mov	w1, w8
    }
    400047a4:	f9400bfe 	ldr	x30, [sp, #16]
    400047a8:	910083ff 	add	sp, sp, #0x20
    400047ac:	d65f03c0 	ret

00000000400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>:
    pub const fn size(&self) -> usize {
    400047b0:	d10043ff 	sub	sp, sp, #0x10
    400047b4:	f90007e0 	str	x0, [sp, #8]
        self.size
    400047b8:	f9400400 	ldr	x0, [x0, #8]
    }
    400047bc:	910043ff 	add	sp, sp, #0x10
    400047c0:	d65f03c0 	ret
	...

00000000400047d0 <_ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE>:
    pub const fn align(&self) -> usize {
    400047d0:	d10043ff 	sub	sp, sp, #0x10
    400047d4:	f90007e0 	str	x0, [sp, #8]
        self.align.as_usize()
    400047d8:	f9400008 	ldr	x8, [x0]
    400047dc:	f90003e8 	str	x8, [sp]
    400047e0:	f94003e0 	ldr	x0, [sp]
    }
    400047e4:	910043ff 	add	sp, sp, #0x10
    400047e8:	d65f03c0 	ret
    400047ec:	00000000 	udf	#0

00000000400047f0 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E>:
    pub fn map<U, F>(self, f: F) -> Option<U>
    400047f0:	d10143ff 	sub	sp, sp, #0x50
    400047f4:	f90023fe 	str	x30, [sp, #64]
    400047f8:	f90003e1 	str	x1, [sp]
    400047fc:	f90007e8 	str	x8, [sp, #8]
    40004800:	f9000be0 	str	x0, [sp, #16]
    40004804:	f9001be1 	str	x1, [sp, #48]
        match self {
    40004808:	f9400be8 	ldr	x8, [sp, #16]
    4000480c:	b40001e8 	cbz	x8, 40004848 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E+0x58>
    40004810:	14000001 	b	40004814 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E+0x24>
    40004814:	f94003e0 	ldr	x0, [sp]
            Some(x) => Some(f(x)),
    40004818:	f9400be1 	ldr	x1, [sp, #16]
    4000481c:	f9001fe1 	str	x1, [sp, #56]
    40004820:	910063e8 	add	x8, sp, #0x18
    40004824:	9400019f 	bl	40004ea0 <_ZN21linked_list_allocator4hole6Cursor4next28_$u7b$$u7b$closure$u7d$$u7d$17h8f09d6a52afa5c7cE>
    40004828:	f94007e9 	ldr	x9, [sp, #8]
    4000482c:	f9400fe8 	ldr	x8, [sp, #24]
    40004830:	f94013ea 	ldr	x10, [sp, #32]
    40004834:	f94017eb 	ldr	x11, [sp, #40]
    40004838:	f900092b 	str	x11, [x9, #16]
    4000483c:	f900052a 	str	x10, [x9, #8]
    40004840:	f9000128 	str	x8, [x9]
    40004844:	14000005 	b	40004858 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E+0x68>
    40004848:	f94007e9 	ldr	x9, [sp, #8]
    4000484c:	aa1f03e8 	mov	x8, xzr
            None => None,
    40004850:	f9000128 	str	x8, [x9]
    }
    40004854:	14000001 	b	40004858 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E+0x68>
    40004858:	f94023fe 	ldr	x30, [sp, #64]
    4000485c:	910143ff 	add	sp, sp, #0x50
    40004860:	d65f03c0 	ret
	...

0000000040004870 <_ZN4core6option15Option$LT$T$GT$4take17h4cbffccbda50ffdeE>:
    pub const fn take(&mut self) -> Option<T> {
    40004870:	d10043ff 	sub	sp, sp, #0x10
    40004874:	aa0003e9 	mov	x9, x0
    40004878:	f90007e9 	str	x9, [sp, #8]
    4000487c:	aa1f03e8 	mov	x8, xzr
        mem::replace(self, None)
    40004880:	f90003e8 	str	x8, [sp]
        crate::intrinsics::read_via_copy(src)
    40004884:	f9400120 	ldr	x0, [x9]
        intrinsics::write_via_move(dst, src)
    40004888:	f94003e8 	ldr	x8, [sp]
    4000488c:	f9000128 	str	x8, [x9]
    }
    40004890:	910043ff 	add	sp, sp, #0x10
    40004894:	d65f03c0 	ret
	...

00000000400048a0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    400048a0:	d100c3ff 	sub	sp, sp, #0x30
    400048a4:	f90003e0 	str	x0, [sp]
    400048a8:	f90007e8 	str	x8, [sp, #8]
        match self {
    400048ac:	f9400008 	ldr	x8, [x0]
    400048b0:	b4000228 	cbz	x8, 400048f4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE+0x54>
    400048b4:	14000001 	b	400048b8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE+0x18>
    400048b8:	f94007e9 	ldr	x9, [sp, #8]
    400048bc:	f94003eb 	ldr	x11, [sp]
            Some(v) => Ok(v),
    400048c0:	f9400168 	ldr	x8, [x11]
    400048c4:	f940056a 	ldr	x10, [x11, #8]
    400048c8:	f940096b 	ldr	x11, [x11, #16]
    400048cc:	f90013eb 	str	x11, [sp, #32]
    400048d0:	f9000fea 	str	x10, [sp, #24]
    400048d4:	f9000be8 	str	x8, [sp, #16]
    400048d8:	f9400be8 	ldr	x8, [sp, #16]
    400048dc:	f9400fea 	ldr	x10, [sp, #24]
    400048e0:	f94013eb 	ldr	x11, [sp, #32]
    400048e4:	f900092b 	str	x11, [x9, #16]
    400048e8:	f900052a 	str	x10, [x9, #8]
    400048ec:	f9000128 	str	x8, [x9]
    }
    400048f0:	14000005 	b	40004904 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE+0x64>
    400048f4:	f94007e9 	ldr	x9, [sp, #8]
    400048f8:	aa1f03e8 	mov	x8, xzr
            None => Err(err),
    400048fc:	f9000128 	str	x8, [x9]
    40004900:	14000001 	b	40004904 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE+0x64>
    }
    40004904:	9100c3ff 	add	sp, sp, #0x30
    40004908:	d65f03c0 	ret
    4000490c:	00000000 	udf	#0

0000000040004910 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    40004910:	d10083ff 	sub	sp, sp, #0x20
    40004914:	f90003e0 	str	x0, [sp]
        match self {
    40004918:	f94003e8 	ldr	x8, [sp]
    4000491c:	b40000c8 	cbz	x8, 40004934 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E+0x24>
    40004920:	14000001 	b	40004924 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E+0x14>
            Some(v) => Ok(v),
    40004924:	f94003e8 	ldr	x8, [sp]
    40004928:	f9000fe8 	str	x8, [sp, #24]
    4000492c:	f90007e8 	str	x8, [sp, #8]
    }
    40004930:	14000004 	b	40004940 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E+0x30>
    40004934:	aa1f03e8 	mov	x8, xzr
            None => Err(err),
    40004938:	f90007e8 	str	x8, [sp, #8]
    4000493c:	14000001 	b	40004940 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E+0x30>
    }
    40004940:	f94007e0 	ldr	x0, [sp, #8]
    40004944:	910083ff 	add	sp, sp, #0x20
    40004948:	d65f03c0 	ret
    4000494c:	00000000 	udf	#0

0000000040004950 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE>:
    pub const fn as_ref(&self) -> Option<&T> {
    40004950:	d10083ff 	sub	sp, sp, #0x20
    40004954:	f90003e0 	str	x0, [sp]
    40004958:	f9000be0 	str	x0, [sp, #16]
        match *self {
    4000495c:	f9400008 	ldr	x8, [x0]
    40004960:	b40000c8 	cbz	x8, 40004978 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE+0x28>
    40004964:	14000001 	b	40004968 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE+0x18>
    40004968:	f94003e8 	ldr	x8, [sp]
            Some(ref x) => Some(x),
    4000496c:	f9000fe8 	str	x8, [sp, #24]
    40004970:	f90007e8 	str	x8, [sp, #8]
    40004974:	14000004 	b	40004984 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE+0x34>
    40004978:	aa1f03e8 	mov	x8, xzr
            None => None,
    4000497c:	f90007e8 	str	x8, [sp, #8]
    40004980:	14000001 	b	40004984 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE+0x34>
    }
    40004984:	f94007e0 	ldr	x0, [sp, #8]
    40004988:	910083ff 	add	sp, sp, #0x20
    4000498c:	d65f03c0 	ret

0000000040004990 <_ZN4core6option15Option$LT$T$GT$6expect17h8abef4a12cf226f6E>:
    pub const fn expect(self, msg: &str) -> T {
    40004990:	d10103ff 	sub	sp, sp, #0x40
    40004994:	f90007e3 	str	x3, [sp, #8]
    40004998:	f9000be2 	str	x2, [sp, #16]
    4000499c:	f9000fe1 	str	x1, [sp, #24]
    400049a0:	f90013e0 	str	x0, [sp, #32]
    400049a4:	f90017e8 	str	x8, [sp, #40]
    400049a8:	f9001be1 	str	x1, [sp, #48]
    400049ac:	f9001fe2 	str	x2, [sp, #56]
        match self {
    400049b0:	f9400008 	ldr	x8, [x0]
    400049b4:	b4000188 	cbz	x8, 400049e4 <_ZN4core6option15Option$LT$T$GT$6expect17h8abef4a12cf226f6E+0x54>
    400049b8:	14000001 	b	400049bc <_ZN4core6option15Option$LT$T$GT$6expect17h8abef4a12cf226f6E+0x2c>
    400049bc:	f94017e9 	ldr	x9, [sp, #40]
    400049c0:	f94013eb 	ldr	x11, [sp, #32]
            Some(val) => val,
    400049c4:	f9400168 	ldr	x8, [x11]
    400049c8:	f940056a 	ldr	x10, [x11, #8]
    400049cc:	f940096b 	ldr	x11, [x11, #16]
    400049d0:	f900092b 	str	x11, [x9, #16]
    400049d4:	f900052a 	str	x10, [x9, #8]
    400049d8:	f9000128 	str	x8, [x9]
    }
    400049dc:	910103ff 	add	sp, sp, #0x40
    400049e0:	d65f03c0 	ret
    400049e4:	f94007e2 	ldr	x2, [sp, #8]
    400049e8:	f9400be1 	ldr	x1, [sp, #16]
    400049ec:	f9400fe0 	ldr	x0, [sp, #24]
            None => expect_failed(msg),
    400049f0:	94000b49 	bl	40007714 <_ZN4core6option13expect_failed17hcf6d0b343a2b6b98E>
	...

0000000040004a00 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE>:
    pub fn map_or<U, F>(self, default: U, f: F) -> U
    40004a00:	d10103ff 	sub	sp, sp, #0x40
    40004a04:	f9001bfe 	str	x30, [sp, #48]
    40004a08:	f90003e1 	str	x1, [sp]
    40004a0c:	f90007e0 	str	x0, [sp, #8]
    40004a10:	f9000fe1 	str	x1, [sp, #24]
        match self {
    40004a14:	f94007e8 	ldr	x8, [sp, #8]
    40004a18:	b40000e8 	cbz	x8, 40004a34 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE+0x34>
    40004a1c:	14000001 	b	40004a20 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE+0x20>
            Some(t) => f(t),
    40004a20:	f94007e0 	ldr	x0, [sp, #8]
    40004a24:	f90017e0 	str	x0, [sp, #40]
    40004a28:	940007da 	bl	40006990 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h4b810b97a51d00a8E>
    40004a2c:	f9000be0 	str	x0, [sp, #16]
    }
    40004a30:	14000008 	b	40004a50 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE+0x50>
    40004a34:	f94003e8 	ldr	x8, [sp]
            None => default,
    40004a38:	f9000be8 	str	x8, [sp, #16]
    }
    40004a3c:	14000001 	b	40004a40 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE+0x40>
    40004a40:	f9400be0 	ldr	x0, [sp, #16]
    40004a44:	f9401bfe 	ldr	x30, [sp, #48]
    40004a48:	910103ff 	add	sp, sp, #0x40
    40004a4c:	d65f03c0 	ret
    40004a50:	17fffffc 	b	40004a40 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE+0x40>
	...

0000000040004a60 <_ZN4core6option15Option$LT$T$GT$7replace17h6bcd1348183eef61E>:
    pub const fn replace(&mut self, value: T) -> Option<T> {
    40004a60:	d10083ff 	sub	sp, sp, #0x20
    40004a64:	aa0003e9 	mov	x9, x0
    40004a68:	f9000be9 	str	x9, [sp, #16]
    40004a6c:	f9000fe1 	str	x1, [sp, #24]
        mem::replace(self, Some(value))
    40004a70:	f90007e1 	str	x1, [sp, #8]
        crate::intrinsics::read_via_copy(src)
    40004a74:	f9400120 	ldr	x0, [x9]
        intrinsics::write_via_move(dst, src)
    40004a78:	f94007e8 	ldr	x8, [sp, #8]
    40004a7c:	f9000128 	str	x8, [x9]
    }
    40004a80:	910083ff 	add	sp, sp, #0x20
    40004a84:	d65f03c0 	ret
	...

0000000040004a90 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE>:
    pub fn ok(self) -> Option<T> {
    40004a90:	d10083ff 	sub	sp, sp, #0x20
    40004a94:	f90007e0 	str	x0, [sp, #8]
        match self {
    40004a98:	f94007e8 	ldr	x8, [sp, #8]
    40004a9c:	b50000a8 	cbnz	x8, 40004ab0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x20>
    40004aa0:	14000001 	b	40004aa4 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x14>
    40004aa4:	aa1f03e8 	mov	x8, xzr
            Err(_) => None,
    40004aa8:	f9000be8 	str	x8, [sp, #16]
    40004aac:	14000005 	b	40004ac0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x30>
            Ok(x) => Some(x),
    40004ab0:	f94007e8 	ldr	x8, [sp, #8]
    40004ab4:	f9000fe8 	str	x8, [sp, #24]
    40004ab8:	f9000be8 	str	x8, [sp, #16]
    40004abc:	14000001 	b	40004ac0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x30>
    }
    40004ac0:	f94007e8 	ldr	x8, [sp, #8]
    40004ac4:	b5000068 	cbnz	x8, 40004ad0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x40>
    40004ac8:	14000001 	b	40004acc <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x3c>
    40004acc:	14000001 	b	40004ad0 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE+0x40>
    40004ad0:	f9400be0 	ldr	x0, [sp, #16]
    40004ad4:	910083ff 	add	sp, sp, #0x20
    40004ad8:	d65f03c0 	ret

0000000040004adc <_ZN4core9panicking13assert_failed17hdc9e6bb73dba094bE>:
/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cfg_attr(not(feature = "panic_immediate_abort"), inline(never), cold, optimize(size))]
#[cfg_attr(feature = "panic_immediate_abort", inline)]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
    40004adc:	d10083ff 	sub	sp, sp, #0x20
    40004ae0:	aa0403e6 	mov	x6, x4
    40004ae4:	aa0303e5 	mov	x5, x3
    40004ae8:	f90007e1 	str	x1, [sp, #8]
    40004aec:	f9000be2 	str	x2, [sp, #16]
    40004af0:	39007fe0 	strb	w0, [sp, #31]
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
    40004af4:	d503201f 	nop
    40004af8:	10034404 	adr	x4, 4000b378 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x17b0>
    40004afc:	910023e1 	add	x1, sp, #0x8
    40004b00:	910043e3 	add	x3, sp, #0x10
    40004b04:	aa0403e2 	mov	x2, x4
    40004b08:	94000bbc 	bl	400079f8 <_ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E>
    40004b0c:	00000000 	udf	#0

0000000040004b10 <_ZN50_$LT$$BP$mut$u20$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h94cd9c871d706815E>:
        Pointer::fmt(self, f)
    }
}
#[stable(feature = "rust1", since = "1.0.0")]
impl<T: ?Sized> Debug for *mut T {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
    40004b10:	d10103ff 	sub	sp, sp, #0x40
    40004b14:	f9001bfe 	str	x30, [sp, #48]
    40004b18:	f9000be0 	str	x0, [sp, #16]
    40004b1c:	f9000fe1 	str	x1, [sp, #24]
        Pointer::fmt(&(*self as *const T), f)
    40004b20:	f9400000 	ldr	x0, [x0]
    40004b24:	f90013e0 	str	x0, [sp, #32]
    40004b28:	f90007e0 	str	x0, [sp, #8]
    40004b2c:	910023e8 	add	x8, sp, #0x8
    40004b30:	f90017e8 	str	x8, [sp, #40]
        pointer_fmt_inner(self.expose_provenance(), f)
    40004b34:	94000f81 	bl	40008938 <_ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE>
        Pointer::fmt(self, f)
    }
    40004b38:	f9401bfe 	ldr	x30, [sp, #48]
    40004b3c:	910103ff 	add	sp, sp, #0x40
    40004b40:	d65f03c0 	ret
	...

0000000040004b50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha38c34b891a7ea88E>:
    fn into_iter(self) -> I {
    40004b50:	d10043ff 	sub	sp, sp, #0x10
    40004b54:	f90003e0 	str	x0, [sp]
    40004b58:	f90007e1 	str	x1, [sp, #8]
    }
    40004b5c:	910043ff 	add	sp, sp, #0x10
    40004b60:	d65f03c0 	ret
	...

0000000040004b70 <_ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17ha9082298930d2036E>:
/// to `Layout::from_size_align`
/// or some other `Layout` constructor
/// do not satisfy its documented constraints.
#[stable(feature = "alloc_layout_error", since = "1.50.0")]
#[non_exhaustive]
#[derive(Clone, PartialEq, Eq, Debug)]
    40004b70:	d100c3ff 	sub	sp, sp, #0x30
    40004b74:	f90013fe 	str	x30, [sp, #32]
    40004b78:	f90007e1 	str	x1, [sp, #8]
    40004b7c:	aa0003e8 	mov	x8, x0
    40004b80:	f94007e0 	ldr	x0, [sp, #8]
    40004b84:	f9000be8 	str	x8, [sp, #16]
    40004b88:	f9000fe0 	str	x0, [sp, #24]
    40004b8c:	d503201f 	nop
    40004b90:	10034041 	adr	x1, 4000b398 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x17d0>
    40004b94:	52800168 	mov	w8, #0xb                   	// #11
    40004b98:	2a0803e2 	mov	w2, w8
    40004b9c:	94000f1a 	bl	40008804 <_ZN4core3fmt9Formatter9write_str17h38ea1b56a7d26f23E>
    40004ba0:	f94013fe 	ldr	x30, [sp, #32]
    40004ba4:	9100c3ff 	add	sp, sp, #0x30
    40004ba8:	d65f03c0 	ret
    40004bac:	00000000 	udf	#0

0000000040004bb0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
    40004bb0:	d10083ff 	sub	sp, sp, #0x20
    40004bb4:	f90007e0 	str	x0, [sp, #8]
        match self {
    40004bb8:	f94007e8 	ldr	x8, [sp, #8]
    40004bbc:	b40000c8 	cbz	x8, 40004bd4 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E+0x24>
    40004bc0:	14000001 	b	40004bc4 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E+0x14>
            Some(v) => ControlFlow::Continue(v),
    40004bc4:	f94007e8 	ldr	x8, [sp, #8]
    40004bc8:	f9000fe8 	str	x8, [sp, #24]
    40004bcc:	f9000be8 	str	x8, [sp, #16]
    }
    40004bd0:	14000004 	b	40004be0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E+0x30>
    40004bd4:	aa1f03e8 	mov	x8, xzr
            None => ControlFlow::Break(None),
    40004bd8:	f9000be8 	str	x8, [sp, #16]
    40004bdc:	14000001 	b	40004be0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E+0x30>
    }
    40004be0:	f9400be0 	ldr	x0, [sp, #16]
    40004be4:	910083ff 	add	sp, sp, #0x20
    40004be8:	d65f03c0 	ret
    40004bec:	00000000 	udf	#0

0000000040004bf0 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E>:

#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> PartialOrd for NonNull<T> {
    #[inline]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    40004bf0:	d10203ff 	sub	sp, sp, #0x80
    40004bf4:	f90023e0 	str	x0, [sp, #64]
    40004bf8:	f90027e1 	str	x1, [sp, #72]
        self.as_ptr().partial_cmp(&other.as_ptr())
    40004bfc:	f9400008 	ldr	x8, [x0]
    40004c00:	f9002be8 	str	x8, [sp, #80]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    40004c04:	f9000fe8 	str	x8, [sp, #24]
    40004c08:	910063e8 	add	x8, sp, #0x18
        self.as_ptr().partial_cmp(&other.as_ptr())
    40004c0c:	f9000be8 	str	x8, [sp, #16]
    40004c10:	f9400028 	ldr	x8, [x1]
    40004c14:	f9002fe8 	str	x8, [sp, #88]
        unsafe { mem::transmute::<Self, *mut T>(self) }
    40004c18:	f90017e8 	str	x8, [sp, #40]
    40004c1c:	9100a3e8 	add	x8, sp, #0x28
        self.as_ptr().partial_cmp(&other.as_ptr())
    40004c20:	f90013e8 	str	x8, [sp, #32]
    40004c24:	910043e9 	add	x9, sp, #0x10
#[stable(feature = "rust1", since = "1.0.0")]
impl<T: ?Sized> Ord for *mut T {
    #[inline]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn cmp(&self, other: &*mut T) -> Ordering {
        if self < other {
    40004c28:	f90033e9 	str	x9, [sp, #96]
    40004c2c:	f9001fe8 	str	x8, [sp, #56]
    40004c30:	9100e3e8 	add	x8, sp, #0x38
    40004c34:	f90037e8 	str	x8, [sp, #104]
    }

    #[inline(always)]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn lt(&self, other: &*mut T) -> bool {
        *self < *other
    40004c38:	f9400fe8 	ldr	x8, [sp, #24]
    40004c3c:	f94017e9 	ldr	x9, [sp, #40]
        if self < other {
    40004c40:	eb090108 	subs	x8, x8, x9
    40004c44:	54000163 	b.cc	40004c70 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0x80>  // b.lo, b.ul, b.last
    40004c48:	14000001 	b	40004c4c <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0x5c>
    40004c4c:	910043e8 	add	x8, sp, #0x10
        } else if self == other {
    40004c50:	f9003be8 	str	x8, [sp, #112]
    40004c54:	910083e8 	add	x8, sp, #0x20
    40004c58:	f9003fe8 	str	x8, [sp, #120]
        *self == *other
    40004c5c:	f9400fe8 	ldr	x8, [sp, #24]
    40004c60:	f94017e9 	ldr	x9, [sp, #40]
        } else if self == other {
    40004c64:	eb090108 	subs	x8, x8, x9
    40004c68:	54000100 	b.eq	40004c88 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0x98>  // b.none
    40004c6c:	14000004 	b	40004c7c <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0x8c>
    40004c70:	52801fe8 	mov	w8, #0xff                  	// #255
            Less
    40004c74:	3900dfe8 	strb	w8, [sp, #55]
        if self < other {
    40004c78:	14000008 	b	40004c98 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0xa8>
    40004c7c:	52800028 	mov	w8, #0x1                   	// #1
            Greater
    40004c80:	3900dfe8 	strb	w8, [sp, #55]
        } else if self == other {
    40004c84:	14000004 	b	40004c94 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0xa4>
    40004c88:	2a1f03e8 	mov	w8, wzr
            Equal
    40004c8c:	3900dfe8 	strb	w8, [sp, #55]
        } else if self == other {
    40004c90:	14000001 	b	40004c94 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0xa4>
        if self < other {
    40004c94:	14000001 	b	40004c98 <_ZN79_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..cmp..PartialOrd$GT$11partial_cmp17h2df2923764de37d6E+0xa8>
        Some(self.cmp(other))
    40004c98:	3940dfe8 	ldrb	w8, [sp, #55]
    40004c9c:	39003fe8 	strb	w8, [sp, #15]
    }
    40004ca0:	39403fe0 	ldrb	w0, [sp, #15]
    40004ca4:	910203ff 	add	sp, sp, #0x80
    40004ca8:	d65f03c0 	ret
    40004cac:	00000000 	udf	#0

0000000040004cb0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
    40004cb0:	d10083ff 	sub	sp, sp, #0x20
    40004cb4:	f90003e0 	str	x0, [sp]
        match self {
    40004cb8:	f94003e8 	ldr	x8, [sp]
    40004cbc:	b50000a8 	cbnz	x8, 40004cd0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E+0x20>
    40004cc0:	14000001 	b	40004cc4 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E+0x14>
    40004cc4:	aa1f03e8 	mov	x8, xzr
            Err(e) => ControlFlow::Break(Err(e)),
    40004cc8:	f90007e8 	str	x8, [sp, #8]
    40004ccc:	14000005 	b	40004ce0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E+0x30>
            Ok(v) => ControlFlow::Continue(v),
    40004cd0:	f94003e8 	ldr	x8, [sp]
    40004cd4:	f9000fe8 	str	x8, [sp, #24]
    40004cd8:	f90007e8 	str	x8, [sp, #8]
    40004cdc:	14000001 	b	40004ce0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E+0x30>
    }
    40004ce0:	f94007e0 	ldr	x0, [sp, #8]
    40004ce4:	910083ff 	add	sp, sp, #0x20
    40004ce8:	d65f03c0 	ret
    40004cec:	00000000 	udf	#0

0000000040004cf0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E>:
    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
    40004cf0:	d100c3ff 	sub	sp, sp, #0x30
    40004cf4:	f90003e0 	str	x0, [sp]
    40004cf8:	f90007e8 	str	x8, [sp, #8]
        match self {
    40004cfc:	f9400008 	ldr	x8, [x0]
    40004d00:	b50000c8 	cbnz	x8, 40004d18 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E+0x28>
    40004d04:	14000001 	b	40004d08 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E+0x18>
    40004d08:	f94007e9 	ldr	x9, [sp, #8]
    40004d0c:	aa1f03e8 	mov	x8, xzr
            Err(e) => ControlFlow::Break(Err(e)),
    40004d10:	f9000128 	str	x8, [x9]
    40004d14:	14000010 	b	40004d54 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E+0x64>
    40004d18:	f94007e9 	ldr	x9, [sp, #8]
    40004d1c:	f94003eb 	ldr	x11, [sp]
            Ok(v) => ControlFlow::Continue(v),
    40004d20:	f9400168 	ldr	x8, [x11]
    40004d24:	f940056a 	ldr	x10, [x11, #8]
    40004d28:	f940096b 	ldr	x11, [x11, #16]
    40004d2c:	f90013eb 	str	x11, [sp, #32]
    40004d30:	f9000fea 	str	x10, [sp, #24]
    40004d34:	f9000be8 	str	x8, [sp, #16]
    40004d38:	f9400be8 	ldr	x8, [sp, #16]
    40004d3c:	f9400fea 	ldr	x10, [sp, #24]
    40004d40:	f94013eb 	ldr	x11, [sp, #32]
    40004d44:	f900092b 	str	x11, [x9, #16]
    40004d48:	f900052a 	str	x10, [x9, #8]
    40004d4c:	f9000128 	str	x8, [x9]
    40004d50:	14000001 	b	40004d54 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E+0x64>
    }
    40004d54:	9100c3ff 	add	sp, sp, #0x30
    40004d58:	d65f03c0 	ret
    40004d5c:	00000000 	udf	#0

0000000040004d60 <_ZN82_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h539b820ac468e84fE>:
    }
}

impl<'a, R: RawMutex + 'a, T: ?Sized + 'a> Drop for MutexGuard<'a, R, T> {
    #[inline]
    fn drop(&mut self) {
    40004d60:	d10083ff 	sub	sp, sp, #0x20
    40004d64:	f9000bfe 	str	x30, [sp, #16]
    40004d68:	f90007e0 	str	x0, [sp, #8]
        // Safety: A MutexGuard always holds the lock.
        unsafe {
            self.mutex.raw.unlock();
    40004d6c:	f9400000 	ldr	x0, [x0]
    40004d70:	94000a1c 	bl	400075e0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h6cb7bfec9042e4eeE>
        }
    }
    40004d74:	f9400bfe 	ldr	x30, [sp, #16]
    40004d78:	910083ff 	add	sp, sp, #0x20
    40004d7c:	d65f03c0 	ret

0000000040004d80 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3026557fc2af9b6aE>:
    fn deref_mut(&mut self) -> &mut T {
    40004d80:	d10043ff 	sub	sp, sp, #0x10
    40004d84:	f90003e0 	str	x0, [sp]
        unsafe { &mut *self.mutex.data.get() }
    40004d88:	f9400008 	ldr	x8, [x0]
    40004d8c:	91002100 	add	x0, x8, #0x8
    40004d90:	f90007e0 	str	x0, [sp, #8]
    }
    40004d94:	910043ff 	add	sp, sp, #0x10
    40004d98:	d65f03c0 	ret
    40004d9c:	00000000 	udf	#0

0000000040004da0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE>:
    fn spec_next(&mut self) -> Option<T> {
    40004da0:	d10183ff 	sub	sp, sp, #0x60
    40004da4:	f9002bfe 	str	x30, [sp, #80]
    40004da8:	f9000fe0 	str	x0, [sp, #24]
    40004dac:	f9001be0 	str	x0, [sp, #48]
        if self.start < self.end {
    40004db0:	91002008 	add	x8, x0, #0x8
    40004db4:	f90023e0 	str	x0, [sp, #64]
    40004db8:	f90027e8 	str	x8, [sp, #72]
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    40004dbc:	f9400008 	ldr	x8, [x0]
    40004dc0:	f9400409 	ldr	x9, [x0, #8]
    40004dc4:	eb090108 	subs	x8, x8, x9
    40004dc8:	540000a3 	b.cc	40004ddc <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE+0x3c>  // b.lo, b.ul, b.last
    40004dcc:	14000001 	b	40004dd0 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE+0x30>
    40004dd0:	aa1f03e8 	mov	x8, xzr
            None
    40004dd4:	f90013e8 	str	x8, [sp, #32]
        if self.start < self.end {
    40004dd8:	14000010 	b	40004e18 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE+0x78>
    40004ddc:	f9400fe8 	ldr	x8, [sp, #24]
            let old = self.start;
    40004de0:	f9400100 	ldr	x0, [x8]
    40004de4:	f90007e0 	str	x0, [sp, #8]
    40004de8:	f9001fe0 	str	x0, [sp, #56]
    40004dec:	52800028 	mov	w8, #0x1                   	// #1
    40004df0:	2a0803e1 	mov	w1, w8
    40004df4:	f9000be1 	str	x1, [sp, #16]
            self.start = unsafe { Step::forward_unchecked(old, 1) };
    40004df8:	97fffc42 	bl	40003f00 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h2c2d5a2ccd7a56b9E>
    40004dfc:	f9400fea 	ldr	x10, [sp, #24]
    40004e00:	f94007e9 	ldr	x9, [sp, #8]
    40004e04:	f9400be8 	ldr	x8, [sp, #16]
    40004e08:	f9000140 	str	x0, [x10]
            Some(old)
    40004e0c:	f90017e9 	str	x9, [sp, #40]
    40004e10:	f90013e8 	str	x8, [sp, #32]
        if self.start < self.end {
    40004e14:	14000001 	b	40004e18 <_ZN89_$LT$core..ops..range..Range$LT$T$GT$$u20$as$u20$core..iter..range..RangeIteratorImpl$GT$9spec_next17h0b4b04d59583963bE+0x78>
    }
    40004e18:	f94013e0 	ldr	x0, [sp, #32]
    40004e1c:	f94017e1 	ldr	x1, [sp, #40]
    40004e20:	f9402bfe 	ldr	x30, [sp, #80]
    40004e24:	910183ff 	add	sp, sp, #0x60
    40004e28:	d65f03c0 	ret
    40004e2c:	00000000 	udf	#0

0000000040004e30 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$20make_guard_unchecked17hbc1c7d510f74f299E>:
    pub unsafe fn make_guard_unchecked(&self) -> MutexGuard<'_, R, T> {
    40004e30:	d10043ff 	sub	sp, sp, #0x10
    40004e34:	f90007e0 	str	x0, [sp, #8]
    }
    40004e38:	910043ff 	add	sp, sp, #0x10
    40004e3c:	d65f03c0 	ret

0000000040004e40 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17hb66dd1c03746e1feE>:
    pub fn lock(&self) -> MutexGuard<'_, R, T> {
    40004e40:	d10083ff 	sub	sp, sp, #0x20
    40004e44:	f9000bfe 	str	x30, [sp, #16]
    40004e48:	f90003e0 	str	x0, [sp]
    40004e4c:	f90007e0 	str	x0, [sp, #8]
        self.raw.lock();
    40004e50:	940009cc 	bl	40007580 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE>
    40004e54:	f94003e0 	ldr	x0, [sp]
        unsafe { self.make_guard_unchecked() }
    40004e58:	97fffff6 	bl	40004e30 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$20make_guard_unchecked17hbc1c7d510f74f299E>
    }
    40004e5c:	f9400bfe 	ldr	x30, [sp, #16]
    40004e60:	910083ff 	add	sp, sp, #0x20
    40004e64:	d65f03c0 	ret
	...

0000000040004e70 <_ZN21linked_list_allocator4hole6Cursor4next17h79d83ad6cd44f065E>:
    addr: *mut u8,
    size: usize,
}

impl Cursor {
    fn next(mut self) -> Option<Self> {
    40004e70:	d10083ff 	sub	sp, sp, #0x20
    40004e74:	f9000bfe 	str	x30, [sp, #16]
    40004e78:	aa0003e1 	mov	x1, x0
        unsafe {
            self.hole.as_mut().next.map(|nhole| Cursor {
    40004e7c:	91002029 	add	x9, x1, #0x8
    40004e80:	f90007e9 	str	x9, [sp, #8]
        unsafe { &mut *self.as_ptr() }
    40004e84:	f9400429 	ldr	x9, [x1, #8]
    40004e88:	f9400520 	ldr	x0, [x9, #8]
    40004e8c:	97fffe59 	bl	400047f0 <_ZN4core6option15Option$LT$T$GT$3map17hcb8c478f3682b361E>
                prev: self.hole,
                hole: nhole,
                top: self.top,
            })
        }
    }
    40004e90:	f9400bfe 	ldr	x30, [sp, #16]
    40004e94:	910083ff 	add	sp, sp, #0x20
    40004e98:	d65f03c0 	ret
    40004e9c:	00000000 	udf	#0

0000000040004ea0 <_ZN21linked_list_allocator4hole6Cursor4next28_$u7b$$u7b$closure$u7d$$u7d$17h8f09d6a52afa5c7cE>:
            self.hole.as_mut().next.map(|nhole| Cursor {
    40004ea0:	d10043ff 	sub	sp, sp, #0x10
    40004ea4:	aa0803e9 	mov	x9, x8
    40004ea8:	f90003e0 	str	x0, [sp]
    40004eac:	f90007e1 	str	x1, [sp, #8]
                prev: self.hole,
    40004eb0:	f94003e8 	ldr	x8, [sp]
    40004eb4:	f940050a 	ldr	x10, [x8, #8]
                top: self.top,
    40004eb8:	f9400908 	ldr	x8, [x8, #16]
            self.hole.as_mut().next.map(|nhole| Cursor {
    40004ebc:	f900012a 	str	x10, [x9]
    40004ec0:	f9000521 	str	x1, [x9, #8]
    40004ec4:	f9000928 	str	x8, [x9, #16]
            })
    40004ec8:	910043ff 	add	sp, sp, #0x10
    40004ecc:	d65f03c0 	ret

0000000040004ed0 <_ZN21linked_list_allocator4hole6Cursor7current17h51338f4c72902c63E>:

    fn current(&self) -> &Hole {
    40004ed0:	d10043ff 	sub	sp, sp, #0x10
    40004ed4:	f90003e0 	str	x0, [sp]
        unsafe { self.hole.as_ref() }
    40004ed8:	91002008 	add	x8, x0, #0x8
    40004edc:	f90007e8 	str	x8, [sp, #8]
        unsafe { &*self.as_ptr().cast_const() }
    40004ee0:	f9400400 	ldr	x0, [x0, #8]
    }
    40004ee4:	910043ff 	add	sp, sp, #0x10
    40004ee8:	d65f03c0 	ret
    40004eec:	00000000 	udf	#0

0000000040004ef0 <_ZN21linked_list_allocator4hole6Cursor8previous17hfa2f1107d7fea9eeE>:

    fn previous(&self) -> &Hole {
    40004ef0:	d10043ff 	sub	sp, sp, #0x10
    40004ef4:	f90003e0 	str	x0, [sp]
    40004ef8:	f90007e0 	str	x0, [sp, #8]
    40004efc:	f9400000 	ldr	x0, [x0]
        unsafe { self.prev.as_ref() }
    }
    40004f00:	910043ff 	add	sp, sp, #0x10
    40004f04:	d65f03c0 	ret
	...

0000000040004f10 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE>:

    // On success, it returns the new allocation, and the linked list has been updated
    // to accomodate any new holes and allocation. On error, it returns the cursor
    // unmodified, and has made no changes to the linked list of holes.
    fn split_current(self, required_layout: Layout) -> Result<(*mut u8, usize), Self> {
    40004f10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40004f14:	d10e43ff 	sub	sp, sp, #0x390
    40004f18:	f9003be0 	str	x0, [sp, #112]
    40004f1c:	f90037e8 	str	x8, [sp, #104]
    40004f20:	f9005be1 	str	x1, [sp, #176]
    40004f24:	f9005fe2 	str	x2, [sp, #184]
        let back_padding;

        // Here we create a scope, JUST to make sure that any created references do not
        // live to the point where we start doing pointer surgery below.
        {
            let hole_size = self.current().size;
    40004f28:	97ffffea 	bl	40004ed0 <_ZN21linked_list_allocator4hole6Cursor7current17h51338f4c72902c63E>
    40004f2c:	aa0003e8 	mov	x8, x0
    40004f30:	f9403be0 	ldr	x0, [sp, #112]
    40004f34:	f9400108 	ldr	x8, [x8]
    40004f38:	f9004fe8 	str	x8, [sp, #152]
    40004f3c:	aa0803e9 	mov	x9, x8
    40004f40:	f9003fe9 	str	x9, [sp, #120]
    40004f44:	f900efe8 	str	x8, [sp, #472]
            let hole_addr_u8 = self.hole.as_ptr().cast::<u8>();
    40004f48:	f9400408 	ldr	x8, [x0, #8]
    40004f4c:	aa0803e9 	mov	x9, x8
    40004f50:	f90043e9 	str	x9, [sp, #128]
    40004f54:	f901c7e8 	str	x8, [sp, #904]
    40004f58:	f9017fe8 	str	x8, [sp, #760]
    40004f5c:	f900f3e8 	str	x8, [sp, #480]
    40004f60:	9102c3e0 	add	x0, sp, #0xb0
    40004f64:	f90047e0 	str	x0, [sp, #136]
            let required_size = required_layout.size();
    40004f68:	97fffe12 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    40004f6c:	aa0003e8 	mov	x8, x0
    40004f70:	f94047e0 	ldr	x0, [sp, #136]
    40004f74:	f90053e8 	str	x8, [sp, #160]
    40004f78:	aa0803e9 	mov	x9, x8
    40004f7c:	f9004be9 	str	x9, [sp, #144]
    40004f80:	f900f7e8 	str	x8, [sp, #488]
            let required_align = required_layout.align();
    40004f84:	97fffe13 	bl	400047d0 <_ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE>
    40004f88:	f9404fe8 	ldr	x8, [sp, #152]
    40004f8c:	aa0003e9 	mov	x9, x0
    40004f90:	f94053e0 	ldr	x0, [sp, #160]
    40004f94:	aa0903e1 	mov	x1, x9
    40004f98:	f90057e1 	str	x1, [sp, #168]
    40004f9c:	f900fbe9 	str	x9, [sp, #496]

            // Quick check: If the new item is larger than the current hole, it's never gunna
            // work. Go ahead and bail early to save ourselves some math.
            if hole_size < required_size {
    40004fa0:	eb000108 	subs	x8, x8, x0
    40004fa4:	54000123 	b.cc	40004fc8 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0xb8>  // b.lo, b.ul, b.last
    40004fa8:	14000001 	b	40004fac <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x9c>
    40004fac:	f94043e0 	ldr	x0, [sp, #128]
    40004fb0:	f94057e1 	ldr	x1, [sp, #168]
            // The paddings are optional, and only placed if required.
            //
            // First, figure out if front padding is necessary. This would be necessary if the new
            // allocation has a larger alignment requirement than the current hole, and we didn't get
            // lucky that the current position was well-aligned enough for the new item.
            let aligned_addr = if hole_addr_u8 == align_up(hole_addr_u8, required_align) {
    40004fb4:	940006eb 	bl	40006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>
    40004fb8:	f94043e8 	ldr	x8, [sp, #128]
    40004fbc:	eb000108 	subs	x8, x8, x0
    40004fc0:	540003c0 	b.eq	40005038 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x128>  // b.none
    40004fc4:	1400000a 	b	40004fec <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0xdc>
    40004fc8:	f94037e9 	ldr	x9, [sp, #104]
    40004fcc:	f9403beb 	ldr	x11, [sp, #112]
                return Err(self);
    40004fd0:	f9400168 	ldr	x8, [x11]
    40004fd4:	f940056a 	ldr	x10, [x11, #8]
    40004fd8:	f940096b 	ldr	x11, [x11, #16]
    40004fdc:	f900092b 	str	x11, [x9, #16]
    40004fe0:	f900052a 	str	x10, [x9, #8]
    40004fe4:	f9000128 	str	x8, [x9]
    40004fe8:	140000c3 	b	400052f4 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3e4>
                hole_addr_u8
            } else {
                // Unfortunately, we did not get lucky. Instead: Push the "starting location" FORWARD the size
                // of a hole node, to guarantee there is at least enough room for the hole header, and
                // potentially additional space.
                let new_start = hole_addr_u8.wrapping_add(HoleList::min_size());
    40004fec:	94000391 	bl	40005e30 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE>
    40004ff0:	f94057e1 	ldr	x1, [sp, #168]
    40004ff4:	f94043e8 	ldr	x8, [sp, #128]
    40004ff8:	f9016fe8 	str	x8, [sp, #728]
    40004ffc:	f90173e0 	str	x0, [sp, #736]
        self.wrapping_offset(count as isize)
    40005000:	f90177e0 	str	x0, [sp, #744]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40005004:	8b000108 	add	x8, x8, x0
    40005008:	f9017be8 	str	x8, [sp, #752]
    4000500c:	f9417be0 	ldr	x0, [sp, #752]
    40005010:	f900ffe0 	str	x0, [sp, #504]

                let aligned_addr = align_up(new_start, required_align);
    40005014:	940006d3 	bl	40006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>
    40005018:	f94043e8 	ldr	x8, [sp, #128]
    4000501c:	aa0003e9 	mov	x9, x0
    40005020:	f9002fe9 	str	x9, [sp, #88]
    40005024:	f90103e0 	str	x0, [sp, #512]
                front_padding = Some(HoleInfo {
                    // Our new front padding will exist at the same location as the previous hole,
                    // it will just have a smaller size after we have chopped off the "tail" for
                    // the allocation.
                    addr: hole_addr_u8,
                    size: (aligned_addr as usize) - (hole_addr_u8 as usize),
    40005028:	eb080008 	subs	x8, x0, x8
    4000502c:	f90033e8 	str	x8, [sp, #96]
    40005030:	54000383 	b.cc	400050a0 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x190>  // b.lo, b.ul, b.last
    40005034:	1400000c 	b	40005064 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x154>
    40005038:	f94043e8 	ldr	x8, [sp, #128]
    4000503c:	aa1f03e9 	mov	x9, xzr
                front_padding = None;
    40005040:	f9007fe9 	str	x9, [sp, #248]
    40005044:	f9407fe9 	ldr	x9, [sp, #248]
    40005048:	f94083ea 	ldr	x10, [sp, #256]
    4000504c:	f94087eb 	ldr	x11, [sp, #264]
    40005050:	f9006beb 	str	x11, [sp, #208]
    40005054:	f90067ea 	str	x10, [sp, #200]
    40005058:	f90063e9 	str	x9, [sp, #192]
                hole_addr_u8
    4000505c:	f9007be8 	str	x8, [sp, #240]
            let aligned_addr = if hole_addr_u8 == align_up(hole_addr_u8, required_align) {
    40005060:	14000013 	b	400050ac <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x19c>
    40005064:	f9402fe8 	ldr	x8, [sp, #88]
    40005068:	f94033e9 	ldr	x9, [sp, #96]
    4000506c:	f94043ea 	ldr	x10, [sp, #128]
                front_padding = Some(HoleInfo {
    40005070:	f9008fea 	str	x10, [sp, #280]
    40005074:	f90093e9 	str	x9, [sp, #288]
    40005078:	52800029 	mov	w9, #0x1                   	// #1
    4000507c:	f9008be9 	str	x9, [sp, #272]
    40005080:	f9408be9 	ldr	x9, [sp, #272]
    40005084:	f9408fea 	ldr	x10, [sp, #280]
    40005088:	f94093eb 	ldr	x11, [sp, #288]
    4000508c:	f9006beb 	str	x11, [sp, #208]
    40005090:	f90067ea 	str	x10, [sp, #200]
    40005094:	f90063e9 	str	x9, [sp, #192]
                });
                aligned_addr
    40005098:	f9007be8 	str	x8, [sp, #240]
            let aligned_addr = if hole_addr_u8 == align_up(hole_addr_u8, required_align) {
    4000509c:	14000004 	b	400050ac <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x19c>
                    size: (aligned_addr as usize) - (hole_addr_u8 as usize),
    400050a0:	d503201f 	nop
    400050a4:	10031b20 	adr	x0, 4000b408 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1840>
    400050a8:	94000f9d 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    400050ac:	f94043e9 	ldr	x9, [sp, #128]
    400050b0:	f9403fea 	ldr	x10, [sp, #120]
    400050b4:	f9404beb 	ldr	x11, [sp, #144]
            };

            // Okay, now that we found space, we need to see if the decisions we just made
            // ACTUALLY fit in the previous hole space
            let allocation_end = aligned_addr.wrapping_add(required_size);
    400050b8:	f9407be8 	ldr	x8, [sp, #240]
    400050bc:	f9015fe8 	str	x8, [sp, #696]
    400050c0:	f90163eb 	str	x11, [sp, #704]
        self.wrapping_offset(count as isize)
    400050c4:	f90167eb 	str	x11, [sp, #712]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400050c8:	8b0b0108 	add	x8, x8, x11
    400050cc:	f9016be8 	str	x8, [sp, #720]
    400050d0:	f9416be8 	ldr	x8, [sp, #720]
    400050d4:	aa0803eb 	mov	x11, x8
    400050d8:	f90027eb 	str	x11, [sp, #72]
    400050dc:	f90107e8 	str	x8, [sp, #520]
    400050e0:	f9014fe9 	str	x9, [sp, #664]
    400050e4:	f90153ea 	str	x10, [sp, #672]
        self.wrapping_offset(count as isize)
    400050e8:	f90157ea 	str	x10, [sp, #680]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400050ec:	8b0a0129 	add	x9, x9, x10
    400050f0:	f9015be9 	str	x9, [sp, #688]
    400050f4:	f9415be9 	ldr	x9, [sp, #688]
    400050f8:	aa0903ea 	mov	x10, x9
    400050fc:	f9002bea 	str	x10, [sp, #80]
            let hole_end = hole_addr_u8.wrapping_add(hole_size);
    40005100:	f9010be9 	str	x9, [sp, #528]

            if allocation_end > hole_end {
    40005104:	eb090108 	subs	x8, x8, x9
    40005108:	54000188 	b.hi	40005138 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x228>  // b.pmore
    4000510c:	14000001 	b	40005110 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x200>
    40005110:	f9402be8 	ldr	x8, [sp, #80]
    40005114:	f94027e9 	ldr	x9, [sp, #72]
                // hole is too small
                return Err(self);
            }

            // Yes! We have successfully placed our allocation as well.
            alloc_ptr = aligned_addr;
    40005118:	f9407bea 	ldr	x10, [sp, #240]
    4000511c:	aa0a03eb 	mov	x11, x10
    40005120:	f9001feb 	str	x11, [sp, #56]
    40005124:	f9010fea 	str	x10, [sp, #536]
            alloc_size = required_size;

            // Okay, time to move onto the back padding.
            let back_padding_size = hole_end as usize - allocation_end as usize;
    40005128:	eb090108 	subs	x8, x8, x9
    4000512c:	f90023e8 	str	x8, [sp, #64]
    40005130:	540001e3 	b.cc	4000516c <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x25c>  // b.lo, b.ul, b.last
    40005134:	1400000a 	b	4000515c <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x24c>
    40005138:	f94037e9 	ldr	x9, [sp, #104]
    4000513c:	f9403beb 	ldr	x11, [sp, #112]
                return Err(self);
    40005140:	f9400168 	ldr	x8, [x11]
    40005144:	f940056a 	ldr	x10, [x11, #8]
    40005148:	f940096b 	ldr	x11, [x11, #16]
    4000514c:	f900092b 	str	x11, [x9, #16]
    40005150:	f900052a 	str	x10, [x9, #8]
    40005154:	f9000128 	str	x8, [x9]
    40005158:	14000067 	b	400052f4 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3e4>
    4000515c:	f94023e8 	ldr	x8, [sp, #64]
            let back_padding_size = hole_end as usize - allocation_end as usize;
    40005160:	f90113e8 	str	x8, [sp, #544]
            back_padding = if back_padding_size == 0 {
    40005164:	b40000a8 	cbz	x8, 40005178 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x268>
    40005168:	14000007 	b	40005184 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x274>
            let back_padding_size = hole_end as usize - allocation_end as usize;
    4000516c:	d503201f 	nop
    40005170:	10031580 	adr	x0, 4000b420 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1858>
    40005174:	94000f6a 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    40005178:	aa1f03e8 	mov	x8, xzr
                None
    4000517c:	f90097e8 	str	x8, [sp, #296]
            back_padding = if back_padding_size == 0 {
    40005180:	1400001e 	b	400051f8 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x2e8>
            } else {
                // NOTE: Because we always use `HoleList::align_layout`, the size of
                // the new allocation is always "rounded up" to cover any partial gaps that
                // would have occurred. For this reason, we DON'T need to "round up"
                // to account for an unaligned hole spot.
                let hole_layout = Layout::new::<Hole>();
    40005184:	97fffd77 	bl	40004760 <_ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE>
    40005188:	f900a3e0 	str	x0, [sp, #320]
    4000518c:	f900a7e1 	str	x1, [sp, #328]
    40005190:	910503e0 	add	x0, sp, #0x140
    40005194:	f90013e0 	str	x0, [sp, #32]
                let back_padding_start = align_up(allocation_end, hole_layout.align());
    40005198:	97fffd8e 	bl	400047d0 <_ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE>
    4000519c:	aa0003e1 	mov	x1, x0
    400051a0:	f94027e0 	ldr	x0, [sp, #72]
    400051a4:	9400066f 	bl	40006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>
    400051a8:	aa0003e8 	mov	x8, x0
    400051ac:	f94013e0 	ldr	x0, [sp, #32]
    400051b0:	f9001be8 	str	x8, [sp, #48]
    400051b4:	aa0803e9 	mov	x9, x8
    400051b8:	f90017e9 	str	x9, [sp, #40]
    400051bc:	f90117e8 	str	x8, [sp, #552]
                let back_padding_end = back_padding_start.wrapping_add(hole_layout.size());
    400051c0:	97fffd7c 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    400051c4:	f9402be9 	ldr	x9, [sp, #80]
    400051c8:	aa0003e8 	mov	x8, x0
    400051cc:	f9401be0 	ldr	x0, [sp, #48]
    400051d0:	f9013fe0 	str	x0, [sp, #632]
    400051d4:	f90143e8 	str	x8, [sp, #640]
        self.wrapping_offset(count as isize)
    400051d8:	f90147e8 	str	x8, [sp, #648]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400051dc:	8b080008 	add	x8, x0, x8
    400051e0:	f9014be8 	str	x8, [sp, #656]
    400051e4:	f9414be8 	ldr	x8, [sp, #656]
    400051e8:	f9011be8 	str	x8, [sp, #560]

                // Will the proposed new back padding actually fit in the old hole slot?
                if back_padding_end <= hole_end {
    400051ec:	eb090108 	subs	x8, x8, x9
    400051f0:	54000749 	b.ls	400052d8 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3c8>  // b.plast
    400051f4:	14000030 	b	400052b4 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3a4>
    400051f8:	f9403be8 	ldr	x8, [sp, #112]
            back_padding = if back_padding_size == 0 {
    400051fc:	f94097e9 	ldr	x9, [sp, #296]
    40005200:	f9409bea 	ldr	x10, [sp, #304]
    40005204:	f9409feb 	ldr	x11, [sp, #312]
    40005208:	f90077eb 	str	x11, [sp, #232]
    4000520c:	f90073ea 	str	x10, [sp, #224]
    40005210:	f9006fe9 	str	x9, [sp, #216]

        ////////////////////////////////////////////////////////////////////////////
        // This is where we actually perform surgery on the linked list.
        ////////////////////////////////////////////////////////////////////////////
        let Cursor {
            mut prev, mut hole, ..
    40005214:	f9400109 	ldr	x9, [x8]
    40005218:	f900abe9 	str	x9, [sp, #336]
    4000521c:	f9400508 	ldr	x8, [x8, #8]
    40005220:	f900afe8 	str	x8, [sp, #344]
    40005224:	aa1f03e8 	mov	x8, xzr
        } = self;
        // Remove the current location from the previous node
        unsafe {
            prev.as_mut().next = None;
    40005228:	f900b3e8 	str	x8, [sp, #352]
    4000522c:	910543e8 	add	x8, sp, #0x150
    40005230:	f901c3e8 	str	x8, [sp, #896]
        unsafe { &mut *self.as_ptr() }
    40005234:	f940abe9 	ldr	x9, [sp, #336]
    40005238:	f940b3e8 	ldr	x8, [sp, #352]
    4000523c:	f9000528 	str	x8, [x9, #8]
    40005240:	910563e8 	add	x8, sp, #0x158
    40005244:	f901bfe8 	str	x8, [sp, #888]
    40005248:	f940afe8 	ldr	x8, [sp, #344]
        }
        // Take the next node out of our current node
        let maybe_next_addr: Option<NonNull<Hole>> = unsafe { hole.as_mut().next.take() };
    4000524c:	91002100 	add	x0, x8, #0x8
    40005250:	97fffd88 	bl	40004870 <_ZN4core6option15Option$LT$T$GT$4take17h4cbffccbda50ffdeE>
    40005254:	aa0003e8 	mov	x8, x0
    40005258:	f9000fe8 	str	x8, [sp, #24]
    4000525c:	f9011fe0 	str	x0, [sp, #568]

        // As of now, the old `Hole` is no more. We are about to replace it with one or more of
        // the front padding, the allocation, and the back padding.

        match (front_padding, back_padding) {
    40005260:	f94063e8 	ldr	x8, [sp, #192]
    40005264:	f94067e9 	ldr	x9, [sp, #200]
    40005268:	f9406bea 	ldr	x10, [sp, #208]
    4000526c:	f900d7ea 	str	x10, [sp, #424]
    40005270:	f900d3e9 	str	x9, [sp, #416]
    40005274:	f900cfe8 	str	x8, [sp, #408]
    40005278:	f940cfe8 	ldr	x8, [sp, #408]
    4000527c:	f940d3e9 	ldr	x9, [sp, #416]
    40005280:	f940d7ea 	ldr	x10, [sp, #424]
    40005284:	f900bfea 	str	x10, [sp, #376]
    40005288:	f900bbe9 	str	x9, [sp, #368]
    4000528c:	f900b7e8 	str	x8, [sp, #360]
    40005290:	f9406fe8 	ldr	x8, [sp, #216]
    40005294:	f94073e9 	ldr	x9, [sp, #224]
    40005298:	f94077ea 	ldr	x10, [sp, #232]
    4000529c:	f900cbea 	str	x10, [sp, #400]
    400052a0:	f900c7e9 	str	x9, [sp, #392]
    400052a4:	f900c3e8 	str	x8, [sp, #384]
    400052a8:	b9416be8 	ldr	w8, [sp, #360]
    400052ac:	370002a8 	tbnz	w8, #0, 40005300 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3f0>
    400052b0:	14000017 	b	4000530c <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3fc>
    400052b4:	f94037e9 	ldr	x9, [sp, #104]
    400052b8:	f9403beb 	ldr	x11, [sp, #112]
                    return Err(self);
    400052bc:	f9400168 	ldr	x8, [x11]
    400052c0:	f940056a 	ldr	x10, [x11, #8]
    400052c4:	f940096b 	ldr	x11, [x11, #16]
    400052c8:	f900092b 	str	x11, [x9, #16]
    400052cc:	f900052a 	str	x10, [x9, #8]
    400052d0:	f9000128 	str	x8, [x9]
    400052d4:	14000008 	b	400052f4 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3e4>
    400052d8:	f94023e8 	ldr	x8, [sp, #64]
    400052dc:	f94017e9 	ldr	x9, [sp, #40]
                    Some(HoleInfo {
    400052e0:	f9009be9 	str	x9, [sp, #304]
    400052e4:	f9009fe8 	str	x8, [sp, #312]
    400052e8:	52800028 	mov	w8, #0x1                   	// #1
    400052ec:	f90097e8 	str	x8, [sp, #296]
            back_padding = if back_padding_size == 0 {
    400052f0:	17ffffc2 	b	400051f8 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x2e8>
            },
        }

        // Well that went swimmingly! Hand off the allocation, with surgery performed successfully!
        Ok((alloc_ptr, alloc_size))
    }
    400052f4:	910e43ff 	add	sp, sp, #0x390
    400052f8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    400052fc:	d65f03c0 	ret
        match (front_padding, back_padding) {
    40005300:	b94183e8 	ldr	w8, [sp, #384]
    40005304:	37000548 	tbnz	w8, #0, 400053ac <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x49c>
    40005308:	14000050 	b	40005448 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x538>
    4000530c:	b94183e8 	ldr	w8, [sp, #384]
    40005310:	360000e8 	tbz	w8, #0, 4000532c <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x41c>
    40005314:	14000001 	b	40005318 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x408>
            (None, Some(singlepad)) | (Some(singlepad), None) => unsafe {
    40005318:	f940c7e9 	ldr	x9, [sp, #392]
    4000531c:	f940cbe8 	ldr	x8, [sp, #400]
    40005320:	f900dbe9 	str	x9, [sp, #432]
    40005324:	f900dfe8 	str	x8, [sp, #440]
        match (front_padding, back_padding) {
    40005328:	1400000f 	b	40005364 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x454>
    4000532c:	f9400fe8 	ldr	x8, [sp, #24]
    40005330:	910543e9 	add	x9, sp, #0x150
    40005334:	f901bbe9 	str	x9, [sp, #880]
    40005338:	f940abe9 	ldr	x9, [sp, #336]
                    prev.as_mut().next = maybe_next_addr;
    4000533c:	f9000528 	str	x8, [x9, #8]
                unsafe {
    40005340:	14000001 	b	40005344 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x434>
    40005344:	f94037e9 	ldr	x9, [sp, #104]
    40005348:	f9404be8 	ldr	x8, [sp, #144]
    4000534c:	f9401fea 	ldr	x10, [sp, #56]
        Ok((alloc_ptr, alloc_size))
    40005350:	f900052a 	str	x10, [x9, #8]
    40005354:	f9000928 	str	x8, [x9, #16]
    40005358:	aa1f03e8 	mov	x8, xzr
    4000535c:	f9000128 	str	x8, [x9]
    }
    40005360:	17ffffe5 	b	400052f4 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x3e4>
    40005364:	f9400fe8 	ldr	x8, [sp, #24]
                let singlepad_ptr = singlepad.addr.cast::<Hole>();
    40005368:	f940dbe0 	ldr	x0, [sp, #432]
    4000536c:	f9018be0 	str	x0, [sp, #784]
    40005370:	f90123e0 	str	x0, [sp, #576]
                    size: singlepad.size,
    40005374:	f940dfe9 	ldr	x9, [sp, #440]
    40005378:	f901a7e0 	str	x0, [sp, #840]
    4000537c:	f901abe9 	str	x9, [sp, #848]
    40005380:	f901afe8 	str	x8, [sp, #856]
    40005384:	f9000009 	str	x9, [x0]
    40005388:	f9000408 	str	x8, [x0, #8]
                prev.as_mut().next = Some(NonNull::new_unchecked(singlepad_ptr));
    4000538c:	97fffc81 	bl	40004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>
    40005390:	f900e3e0 	str	x0, [sp, #448]
    40005394:	910543e8 	add	x8, sp, #0x150
    40005398:	f901b7e8 	str	x8, [sp, #872]
    4000539c:	f940abe9 	ldr	x9, [sp, #336]
    400053a0:	f940e3e8 	ldr	x8, [sp, #448]
    400053a4:	f9000528 	str	x8, [x9, #8]
            },
    400053a8:	17ffffe7 	b	40005344 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x434>
    400053ac:	f9400fe9 	ldr	x9, [sp, #24]
            (Some(frontpad), Some(backpad)) => unsafe {
    400053b0:	f940bbe8 	ldr	x8, [sp, #368]
    400053b4:	f9000be8 	str	x8, [sp, #16]
    400053b8:	f940bfea 	ldr	x10, [sp, #376]
    400053bc:	f90007ea 	str	x10, [sp, #8]
    400053c0:	f90127e8 	str	x8, [sp, #584]
    400053c4:	f9012bea 	str	x10, [sp, #592]
    400053c8:	f940c7e0 	ldr	x0, [sp, #392]
    400053cc:	f940cbea 	ldr	x10, [sp, #400]
    400053d0:	f9012fe0 	str	x0, [sp, #600]
    400053d4:	f90133ea 	str	x10, [sp, #608]
    400053d8:	f90187e0 	str	x0, [sp, #776]
                let backpad_ptr = backpad.addr.cast::<Hole>();
    400053dc:	f90137e0 	str	x0, [sp, #616]
    400053e0:	f9019be0 	str	x0, [sp, #816]
    400053e4:	f9019fea 	str	x10, [sp, #824]
    400053e8:	f901a3e9 	str	x9, [sp, #832]
    400053ec:	f900000a 	str	x10, [x0]
    400053f0:	f9000409 	str	x9, [x0, #8]
    400053f4:	f90183e8 	str	x8, [sp, #768]
                let frontpad_ptr = frontpad.addr.cast::<Hole>();
    400053f8:	f9013be8 	str	x8, [sp, #624]
                    next: Some(NonNull::new_unchecked(backpad_ptr)),
    400053fc:	97fffc65 	bl	40004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>
    40005400:	f94007e9 	ldr	x9, [sp, #8]
    40005404:	aa0003e8 	mov	x8, x0
    40005408:	f9400be0 	ldr	x0, [sp, #16]
    4000540c:	f900e7e8 	str	x8, [sp, #456]
                frontpad_ptr.write(Hole {
    40005410:	f940e7e8 	ldr	x8, [sp, #456]
    40005414:	f9018fe0 	str	x0, [sp, #792]
    40005418:	f90193e9 	str	x9, [sp, #800]
    4000541c:	f90197e8 	str	x8, [sp, #808]
    40005420:	f9000009 	str	x9, [x0]
    40005424:	f9000408 	str	x8, [x0, #8]
                prev.as_mut().next = Some(NonNull::new_unchecked(frontpad_ptr));
    40005428:	97fffc5a 	bl	40004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>
    4000542c:	f900ebe0 	str	x0, [sp, #464]
    40005430:	910543e8 	add	x8, sp, #0x150
    40005434:	f901b3e8 	str	x8, [sp, #864]
    40005438:	f940abe9 	ldr	x9, [sp, #336]
    4000543c:	f940ebe8 	ldr	x8, [sp, #464]
    40005440:	f9000528 	str	x8, [x9, #8]
            },
    40005444:	17ffffc0 	b	40005344 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x434>
            (None, Some(singlepad)) | (Some(singlepad), None) => unsafe {
    40005448:	f940bbe9 	ldr	x9, [sp, #368]
    4000544c:	f940bfe8 	ldr	x8, [sp, #376]
    40005450:	f900dbe9 	str	x9, [sp, #432]
    40005454:	f900dfe8 	str	x8, [sp, #440]
        match (front_padding, back_padding) {
    40005458:	17ffffc3 	b	40005364 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE+0x454>
    4000545c:	00000000 	udf	#0

0000000040005460 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE>:
}

// See if we can extend this hole towards the end of the allocation region
// If so: increase the size of the node. If no: keep the node as-is
fn check_merge_top(mut node: NonNull<Hole>, top: *mut u8) {
    40005460:	d10403ff 	sub	sp, sp, #0x100
    40005464:	f9007bfe 	str	x30, [sp, #240]
    40005468:	f90023e1 	str	x1, [sp, #64]
    4000546c:	f90027e0 	str	x0, [sp, #72]
    40005470:	f90033e1 	str	x1, [sp, #96]
    let node_u8 = node.as_ptr().cast::<u8>();
    40005474:	f94027e8 	ldr	x8, [sp, #72]
    40005478:	f90073e8 	str	x8, [sp, #224]
    4000547c:	f9006be8 	str	x8, [sp, #208]
    40005480:	f90037e8 	str	x8, [sp, #104]
    40005484:	910123e9 	add	x9, sp, #0x48
    40005488:	f90077e9 	str	x9, [sp, #232]
        unsafe { &*self.as_ptr().cast_const() }
    4000548c:	f94027e9 	ldr	x9, [sp, #72]
    let node_sz = unsafe { node.as_ref().size };
    40005490:	f9400129 	ldr	x9, [x9]
    40005494:	f9003be9 	str	x9, [sp, #112]
    40005498:	f9005be8 	str	x8, [sp, #176]
    4000549c:	f9005fe9 	str	x9, [sp, #184]
        self.wrapping_offset(count as isize)
    400054a0:	f90063e9 	str	x9, [sp, #192]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400054a4:	8b090108 	add	x8, x8, x9
    400054a8:	f90067e8 	str	x8, [sp, #200]
    400054ac:	f94067e8 	ldr	x8, [sp, #200]
    400054b0:	f9001fe8 	str	x8, [sp, #56]
    400054b4:	aa0803e9 	mov	x9, x8
    400054b8:	f9001be9 	str	x9, [sp, #48]

    // If this is the last node, we need to see if we need to merge to the end
    let end = node_u8.wrapping_add(node_sz);
    400054bc:	f9003fe8 	str	x8, [sp, #120]
    let hole_layout = Layout::new::<Hole>();
    400054c0:	97fffca8 	bl	40004760 <_ZN4core5alloc6layout6Layout3new17h923b0266cf0efe6dE>
    400054c4:	f9401fe8 	ldr	x8, [sp, #56]
    400054c8:	aa0103e9 	mov	x9, x1
    400054cc:	f94023e1 	ldr	x1, [sp, #64]
    400054d0:	f9002be0 	str	x0, [sp, #80]
    400054d4:	f9002fe9 	str	x9, [sp, #88]
    if end < top {
    400054d8:	eb010108 	subs	x8, x8, x1
    400054dc:	540000a3 	b.cc	400054f0 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x90>  // b.lo, b.ul, b.last
    400054e0:	14000001 	b	400054e4 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x84>
            unsafe {
                node.as_mut().size += offset;
            }
        }
    }
}
    400054e4:	f9407bfe 	ldr	x30, [sp, #240]
    400054e8:	910403ff 	add	sp, sp, #0x100
    400054ec:	d65f03c0 	ret
    400054f0:	910143e0 	add	x0, sp, #0x50
    400054f4:	f90013e0 	str	x0, [sp, #32]
        let next_hole_end = align_up(end, hole_layout.align()).wrapping_add(hole_layout.size());
    400054f8:	97fffcb6 	bl	400047d0 <_ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE>
    400054fc:	aa0003e1 	mov	x1, x0
    40005500:	f9401be0 	ldr	x0, [sp, #48]
    40005504:	94000597 	bl	40006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>
    40005508:	aa0003e8 	mov	x8, x0
    4000550c:	f94013e0 	ldr	x0, [sp, #32]
    40005510:	f90017e8 	str	x8, [sp, #40]
    40005514:	97fffca7 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    40005518:	f94023e9 	ldr	x9, [sp, #64]
    4000551c:	aa0003e8 	mov	x8, x0
    40005520:	f94017e0 	ldr	x0, [sp, #40]
    40005524:	f9004be0 	str	x0, [sp, #144]
    40005528:	f9004fe8 	str	x8, [sp, #152]
        self.wrapping_offset(count as isize)
    4000552c:	f90053e8 	str	x8, [sp, #160]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40005530:	8b080008 	add	x8, x0, x8
    40005534:	f90057e8 	str	x8, [sp, #168]
    40005538:	f94057e8 	ldr	x8, [sp, #168]
    4000553c:	f90043e8 	str	x8, [sp, #128]
        if next_hole_end > top {
    40005540:	eb090108 	subs	x8, x8, x9
    40005544:	54fffd09 	b.ls	400054e4 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x84>  // b.plast
    40005548:	14000001 	b	4000554c <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0xec>
    4000554c:	f94023e8 	ldr	x8, [sp, #64]
    40005550:	f9401be9 	ldr	x9, [sp, #48]
            let offset = (top as usize) - (end as usize);
    40005554:	eb090108 	subs	x8, x8, x9
    40005558:	f9000fe8 	str	x8, [sp, #24]
    4000555c:	540001e3 	b.cc	40005598 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x138>  // b.lo, b.ul, b.last
    40005560:	14000001 	b	40005564 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x104>
    40005564:	f9400fe9 	ldr	x9, [sp, #24]
    40005568:	f90047e9 	str	x9, [sp, #136]
    4000556c:	910123e8 	add	x8, sp, #0x48
    40005570:	f9006fe8 	str	x8, [sp, #216]
        unsafe { &mut *self.as_ptr() }
    40005574:	f94027e8 	ldr	x8, [sp, #72]
    40005578:	aa0803ea 	mov	x10, x8
    4000557c:	f90007ea 	str	x10, [sp, #8]
                node.as_mut().size += offset;
    40005580:	f9400108 	ldr	x8, [x8]
    40005584:	ab090109 	adds	x9, x8, x9
    40005588:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    4000558c:	f9000be9 	str	x9, [sp, #16]
    40005590:	37000128 	tbnz	w8, #0, 400055b4 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x154>
    40005594:	14000004 	b	400055a4 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x144>
            let offset = (top as usize) - (end as usize);
    40005598:	d503201f 	nop
    4000559c:	1002f4e0 	adr	x0, 4000b438 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1870>
    400055a0:	94000e5f 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    400055a4:	f9400be8 	ldr	x8, [sp, #16]
    400055a8:	f94007e9 	ldr	x9, [sp, #8]
                node.as_mut().size += offset;
    400055ac:	f9000128 	str	x8, [x9]
        if next_hole_end > top {
    400055b0:	17ffffcd 	b	400054e4 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE+0x84>
                node.as_mut().size += offset;
    400055b4:	d503201f 	nop
    400055b8:	1002f4c0 	adr	x0, 4000b450 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1888>
    400055bc:	94000e4b 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>

00000000400055c0 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E>:

// See if we can scoot this hole back to the bottom of the allocation region
// If so: create and return the new hole. If not: return the existing hole
fn check_merge_bottom(node: NonNull<Hole>, bottom: *mut u8) -> NonNull<Hole> {
    400055c0:	d103c3ff 	sub	sp, sp, #0xf0
    400055c4:	f90073fe 	str	x30, [sp, #224]
    400055c8:	f9000fe1 	str	x1, [sp, #24]
    400055cc:	f90017e0 	str	x0, [sp, #40]
    400055d0:	f9003fe1 	str	x1, [sp, #120]
    400055d4:	f90013e1 	str	x1, [sp, #32]
    400055d8:	2a1f03e8 	mov	w8, wzr
    debug_assert_eq!(bottom as usize % align_of::<Hole>(), 0);
    400055dc:	35000208 	cbnz	w8, 4000561c <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x5c>
    400055e0:	14000001 	b	400055e4 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x24>
    400055e4:	f94013e8 	ldr	x8, [sp, #32]
    400055e8:	92400908 	and	x8, x8, #0x7
    400055ec:	f9001fe8 	str	x8, [sp, #56]
    400055f0:	9100e3e8 	add	x8, sp, #0x38
    400055f4:	f90043e8 	str	x8, [sp, #128]
    400055f8:	b0000028 	adrp	x8, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    400055fc:	9123c108 	add	x8, x8, #0x8f0
    40005600:	f90047e8 	str	x8, [sp, #136]
    40005604:	b0000029 	adrp	x9, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005608:	f9401fe8 	ldr	x8, [sp, #56]
    4000560c:	f9447929 	ldr	x9, [x9, #2288]
    40005610:	eb090108 	subs	x8, x8, x9
    40005614:	54000220 	b.eq	40005658 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x98>  // b.none
    40005618:	14000004 	b	40005628 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x68>
    4000561c:	d503201f 	nop
    40005620:	1002f240 	adr	x0, 4000b468 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x18a0>
    40005624:	94000e65 	bl	40008fb8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h6ee5e17f2ceffb65E>
    40005628:	2a1f03e8 	mov	w8, wzr
    4000562c:	39011fe8 	strb	w8, [sp, #71]
    40005630:	aa1f03e8 	mov	x8, xzr
    40005634:	f90027e8 	str	x8, [sp, #72]
    40005638:	39411fe0 	ldrb	w0, [sp, #71]
    4000563c:	b0000022 	adrp	x2, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005640:	9123c042 	add	x2, x2, #0x8f0
    40005644:	d503201f 	nop
    40005648:	1002f1c4 	adr	x4, 4000b480 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x18b8>
    4000564c:	9100e3e1 	add	x1, sp, #0x38
    40005650:	910123e3 	add	x3, sp, #0x48
    40005654:	940008e2 	bl	400079dc <_ZN4core9panicking13assert_failed17h85c904e705525b01E>
    40005658:	f9400fe8 	ldr	x8, [sp, #24]
    4000565c:	f90053e8 	str	x8, [sp, #160]
    40005660:	52800209 	mov	w9, #0x10                  	// #16
    40005664:	f90057e9 	str	x9, [sp, #168]
        self.wrapping_offset(count as isize)
    40005668:	f9005be9 	str	x9, [sp, #176]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    4000566c:	91004108 	add	x8, x8, #0x10
    40005670:	f9005fe8 	str	x8, [sp, #184]
    40005674:	f9405fe8 	ldr	x8, [sp, #184]

    if bottom.wrapping_add(core::mem::size_of::<Hole>()) > node.as_ptr().cast::<u8>() {
    40005678:	f94017e9 	ldr	x9, [sp, #40]
    4000567c:	f9006be9 	str	x9, [sp, #208]
    40005680:	f90063e9 	str	x9, [sp, #192]
    40005684:	eb090108 	subs	x8, x8, x9
    40005688:	540000a8 	b.hi	4000569c <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0xdc>  // b.pmore
    4000568c:	14000001 	b	40005690 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0xd0>
        let offset = (node.as_ptr() as usize) - (bottom as usize);
        let size = unsafe { node.as_ref() }.size + offset;
        unsafe { make_hole(bottom, size) }
    } else {
        node
    40005690:	f94017e8 	ldr	x8, [sp, #40]
    40005694:	f9001be8 	str	x8, [sp, #48]
    if bottom.wrapping_add(core::mem::size_of::<Hole>()) > node.as_ptr().cast::<u8>() {
    40005698:	14000008 	b	400056b8 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0xf8>
    4000569c:	f9400fe9 	ldr	x9, [sp, #24]
        let offset = (node.as_ptr() as usize) - (bottom as usize);
    400056a0:	f94017e8 	ldr	x8, [sp, #40]
    400056a4:	f90067e8 	str	x8, [sp, #200]
    400056a8:	eb090108 	subs	x8, x8, x9
    400056ac:	f9000be8 	str	x8, [sp, #16]
    400056b0:	54000223 	b.cc	400056f4 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x134>  // b.lo, b.ul, b.last
    400056b4:	14000005 	b	400056c8 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x108>
    }
}
    400056b8:	f9401be0 	ldr	x0, [sp, #48]
    400056bc:	f94073fe 	ldr	x30, [sp, #224]
    400056c0:	9103c3ff 	add	sp, sp, #0xf0
    400056c4:	d65f03c0 	ret
    400056c8:	f9400be9 	ldr	x9, [sp, #16]
        let offset = (node.as_ptr() as usize) - (bottom as usize);
    400056cc:	f9004be9 	str	x9, [sp, #144]
    400056d0:	9100a3e8 	add	x8, sp, #0x28
    400056d4:	f9006fe8 	str	x8, [sp, #216]
        unsafe { &*self.as_ptr().cast_const() }
    400056d8:	f94017e8 	ldr	x8, [sp, #40]
        let size = unsafe { node.as_ref() }.size + offset;
    400056dc:	f9400108 	ldr	x8, [x8]
    400056e0:	ab090109 	adds	x9, x8, x9
    400056e4:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    400056e8:	f90007e9 	str	x9, [sp, #8]
    400056ec:	37000168 	tbnz	w8, #0, 40005718 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x158>
    400056f0:	14000004 	b	40005700 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0x140>
        let offset = (node.as_ptr() as usize) - (bottom as usize);
    400056f4:	d503201f 	nop
    400056f8:	1002ed00 	adr	x0, 4000b498 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x18d0>
    400056fc:	94000e08 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    40005700:	f94007e1 	ldr	x1, [sp, #8]
    40005704:	f9400fe0 	ldr	x0, [sp, #24]
        let size = unsafe { node.as_ref() }.size + offset;
    40005708:	f9004fe1 	str	x1, [sp, #152]
        unsafe { make_hole(bottom, size) }
    4000570c:	940001d9 	bl	40005e70 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E>
    40005710:	f9001be0 	str	x0, [sp, #48]
    40005714:	17ffffe9 	b	400056b8 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E+0xf8>
        let size = unsafe { node.as_ref() }.size + offset;
    40005718:	d503201f 	nop
    4000571c:	1002eca0 	adr	x0, 4000b4b0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x18e8>
    40005720:	94000df2 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
	...

0000000040005730 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE>:
            top: null_mut(),
            pending_extend: 0,
        }
    }

    pub(crate) fn cursor(&mut self) -> Option<Cursor> {
    40005730:	d101c3ff 	sub	sp, sp, #0x70
    40005734:	f90033fe 	str	x30, [sp, #96]
    40005738:	f9000be0 	str	x0, [sp, #16]
    4000573c:	f9000fe8 	str	x8, [sp, #24]
    40005740:	f90023e0 	str	x0, [sp, #64]
        if let Some(hole) = self.first.next {
    40005744:	f9400408 	ldr	x8, [x0, #8]
    40005748:	b40001a8 	cbz	x8, 4000577c <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0x4c>
    4000574c:	14000001 	b	40005750 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0x20>
    40005750:	f9400be0 	ldr	x0, [sp, #16]
    40005754:	f9400408 	ldr	x8, [x0, #8]
    40005758:	aa0803e9 	mov	x9, x8
    4000575c:	f90007e9 	str	x9, [sp, #8]
    40005760:	f9002be8 	str	x8, [sp, #80]
            Some(Cursor {
                hole,
                prev: NonNull::new(&mut self.first)?,
    40005764:	97fffba3 	bl	400045f0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3c91458c12e59e11E>
    40005768:	97fffd12 	bl	40004bb0 <_ZN75_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17hde6df36cf8e47123E>
    4000576c:	f9001fe0 	str	x0, [sp, #56]
    40005770:	f9401fe8 	ldr	x8, [sp, #56]
    40005774:	b40000c8 	cbz	x8, 4000578c <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0x5c>
    40005778:	14000008 	b	40005798 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0x68>
    4000577c:	f9400fe9 	ldr	x9, [sp, #24]
    40005780:	aa1f03e8 	mov	x8, xzr
                top: self.top,
            })
        } else {
            None
    40005784:	f9000128 	str	x8, [x9]
        if let Some(hole) = self.first.next {
    40005788:	14000014 	b	400057d8 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0xa8>
    4000578c:	f9400fe8 	ldr	x8, [sp, #24]
                prev: NonNull::new(&mut self.first)?,
    40005790:	97fff9c0 	bl	40003e90 <_ZN145_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..option..Option$LT$core..convert..Infallible$GT$$GT$$GT$13from_residual17hd31e6d64db8e0193E>
    40005794:	14000011 	b	400057d8 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0xa8>
    40005798:	f9400fe9 	ldr	x9, [sp, #24]
    4000579c:	f94007ea 	ldr	x10, [sp, #8]
    400057a0:	f9400be8 	ldr	x8, [sp, #16]
    400057a4:	f9401feb 	ldr	x11, [sp, #56]
    400057a8:	f9002feb 	str	x11, [sp, #88]
                top: self.top,
    400057ac:	f9400d08 	ldr	x8, [x8, #24]
            Some(Cursor {
    400057b0:	f90013eb 	str	x11, [sp, #32]
    400057b4:	f90017ea 	str	x10, [sp, #40]
    400057b8:	f9001be8 	str	x8, [sp, #48]
    400057bc:	f94013e8 	ldr	x8, [sp, #32]
    400057c0:	f94017ea 	ldr	x10, [sp, #40]
    400057c4:	f9401beb 	ldr	x11, [sp, #48]
    400057c8:	f900092b 	str	x11, [x9, #16]
    400057cc:	f900052a 	str	x10, [x9, #8]
    400057d0:	f9000128 	str	x8, [x9]
        if let Some(hole) = self.first.next {
    400057d4:	14000001 	b	400057d8 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE+0xa8>
        }
    }
    400057d8:	f94033fe 	ldr	x30, [sp, #96]
    400057dc:	9101c3ff 	add	sp, sp, #0x70
    400057e0:	d65f03c0 	ret
	...

00000000400057f0 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E>:
    /// # Safety
    ///
    /// This function is unsafe because it creates a hole at the given `hole_addr`.
    /// This can cause undefined behavior if this address is invalid or if memory from the
    /// `[hole_addr, hole_addr+size)` range is used somewhere else.
    pub unsafe fn new(hole_addr: *mut u8, hole_size: usize) -> HoleList {
    400057f0:	d10703ff 	sub	sp, sp, #0x1c0
    400057f4:	a91b7bfd 	stp	x29, x30, [sp, #432]
    400057f8:	f9001fe1 	str	x1, [sp, #56]
    400057fc:	f90023e0 	str	x0, [sp, #64]
    40005800:	f90027e8 	str	x8, [sp, #72]
    40005804:	f90077e0 	str	x0, [sp, #232]
    40005808:	f9007be1 	str	x1, [sp, #240]
        assert_eq!(size_of::<Hole>(), Self::min_size());
    4000580c:	94000189 	bl	40005e30 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE>
    40005810:	f9002be0 	str	x0, [sp, #80]
    40005814:	b0000028 	adrp	x8, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005818:	91244108 	add	x8, x8, #0x910
    4000581c:	f9007fe8 	str	x8, [sp, #248]
    40005820:	b0000028 	adrp	x8, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005824:	910143e9 	add	x9, sp, #0x50
    40005828:	f90083e9 	str	x9, [sp, #256]
    4000582c:	f9448908 	ldr	x8, [x8, #2320]
    40005830:	f9402be9 	ldr	x9, [sp, #80]
    40005834:	eb090108 	subs	x8, x8, x9
    40005838:	540001c0 	b.eq	40005870 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x80>  // b.none
    4000583c:	14000001 	b	40005840 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x50>
    40005840:	2a1f03e8 	mov	w8, wzr
    40005844:	39017fe8 	strb	w8, [sp, #95]
    40005848:	aa1f03e8 	mov	x8, xzr
    4000584c:	f90033e8 	str	x8, [sp, #96]
    40005850:	39417fe0 	ldrb	w0, [sp, #95]
    40005854:	b0000021 	adrp	x1, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005858:	91244021 	add	x1, x1, #0x910
    4000585c:	d503201f 	nop
    40005860:	1002e344 	adr	x4, 4000b4c8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1900>
    40005864:	910143e2 	add	x2, sp, #0x50
    40005868:	910183e3 	add	x3, sp, #0x60
    4000586c:	9400085c 	bl	400079dc <_ZN4core9panicking13assert_failed17h85c904e705525b01E>
    40005870:	f9401fe8 	ldr	x8, [sp, #56]
        assert!(hole_size >= size_of::<Hole>());
    40005874:	f1003d08 	subs	x8, x8, #0xf
    40005878:	54000128 	b.hi	4000589c <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0xac>  // b.pmore
    4000587c:	14000001 	b	40005880 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x90>
    40005880:	d503201f 	nop
    40005884:	1002e2e0 	adr	x0, 4000b4e0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1918>
    40005888:	d503201f 	nop
    4000588c:	1002e422 	adr	x2, 4000b510 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1948>
    40005890:	52800608 	mov	w8, #0x30                  	// #48
    40005894:	2a0803e1 	mov	w1, w8
    40005898:	94000813 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
    4000589c:	f94023e0 	ldr	x0, [sp, #64]
    400058a0:	52800108 	mov	w8, #0x8                   	// #8
    400058a4:	2a0803e1 	mov	w1, w8

        let aligned_hole_addr = align_up(hole_addr, align_of::<Hole>());
    400058a8:	940004ae 	bl	40006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>
    400058ac:	f94023e8 	ldr	x8, [sp, #64]
    400058b0:	aa0003e9 	mov	x9, x0
    400058b4:	f90017e9 	str	x9, [sp, #40]
    400058b8:	f90087e0 	str	x0, [sp, #264]
        let requested_hole_size = hole_size - ((aligned_hole_addr as usize) - (hole_addr as usize));
    400058bc:	eb080008 	subs	x8, x0, x8
    400058c0:	f9001be8 	str	x8, [sp, #48]
    400058c4:	54000103 	b.cc	400058e4 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0xf4>  // b.lo, b.ul, b.last
    400058c8:	14000001 	b	400058cc <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0xdc>
    400058cc:	f9401fe8 	ldr	x8, [sp, #56]
    400058d0:	f9401be9 	ldr	x9, [sp, #48]
    400058d4:	eb090108 	subs	x8, x8, x9
    400058d8:	f90013e8 	str	x8, [sp, #32]
    400058dc:	54000203 	b.cc	4000591c <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x12c>  // b.lo, b.ul, b.last
    400058e0:	14000004 	b	400058f0 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x100>
    400058e4:	d503201f 	nop
    400058e8:	1002e200 	adr	x0, 4000b528 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1960>
    400058ec:	94000d8c 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    400058f0:	f94013e0 	ldr	x0, [sp, #32]
    400058f4:	f9008be0 	str	x0, [sp, #272]
    400058f8:	52800108 	mov	w8, #0x8                   	// #8
    400058fc:	2a0803e1 	mov	w1, w8
        let aligned_hole_size = align_down_size(requested_hole_size, align_of::<Hole>());
    40005900:	94000448 	bl	40006a20 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E>
    40005904:	aa0003e8 	mov	x8, x0
    40005908:	f9000fe8 	str	x8, [sp, #24]
    4000590c:	f9008fe0 	str	x0, [sp, #280]
        assert!(aligned_hole_size >= size_of::<Hole>());
    40005910:	f1003c08 	subs	x8, x0, #0xf
    40005914:	54000188 	b.hi	40005944 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x154>  // b.pmore
    40005918:	14000004 	b	40005928 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x138>
        let requested_hole_size = hole_size - ((aligned_hole_addr as usize) - (hole_addr as usize));
    4000591c:	d503201f 	nop
    40005920:	1002e100 	adr	x0, 4000b540 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1978>
    40005924:	94000d7e 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
        assert!(aligned_hole_size >= size_of::<Hole>());
    40005928:	d503201f 	nop
    4000592c:	1002e160 	adr	x0, 4000b558 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1990>
    40005930:	d503201f 	nop
    40005934:	1002e2e2 	adr	x2, 4000b590 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x19c8>
    40005938:	52800708 	mov	w8, #0x38                  	// #56
    4000593c:	2a0803e1 	mov	w1, w8
    40005940:	940007e9 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
    40005944:	f94017e8 	ldr	x8, [sp, #40]
    40005948:	f94013e9 	ldr	x9, [sp, #32]
    4000594c:	f94023ea 	ldr	x10, [sp, #64]
    40005950:	f9401feb 	ldr	x11, [sp, #56]
    40005954:	f9400fed 	ldr	x13, [sp, #24]

        let ptr = aligned_hole_addr as *mut Hole;
    40005958:	f90093e8 	str	x8, [sp, #288]
    4000595c:	aa1f03ec 	mov	x12, xzr
        ptr.write(Hole {
            size: aligned_hole_size,
            next: None,
    40005960:	f9004bec 	str	x12, [sp, #144]
        ptr.write(Hole {
    40005964:	f9404bec 	ldr	x12, [sp, #144]
    40005968:	f900cfe8 	str	x8, [sp, #408]
    4000596c:	f900d3ed 	str	x13, [sp, #416]
    40005970:	f900d7ec 	str	x12, [sp, #424]
    40005974:	f900010d 	str	x13, [x8]
    40005978:	f900050c 	str	x12, [x8, #8]
    4000597c:	f900bfea 	str	x10, [sp, #376]
    40005980:	f900c3eb 	str	x11, [sp, #384]
        self.wrapping_offset(count as isize)
    40005984:	f900c7eb 	str	x11, [sp, #392]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40005988:	8b0b014a 	add	x10, x10, x11
    4000598c:	f900cbea 	str	x10, [sp, #400]
    40005990:	f940cbea 	ldr	x10, [sp, #400]
        });

        assert_eq!(
            hole_addr.wrapping_add(hole_size),
    40005994:	f9004fea 	str	x10, [sp, #152]
    40005998:	f900afe8 	str	x8, [sp, #344]
    4000599c:	f900b3e9 	str	x9, [sp, #352]
        self.wrapping_offset(count as isize)
    400059a0:	f900b7e9 	str	x9, [sp, #360]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400059a4:	8b090108 	add	x8, x8, x9
    400059a8:	f900bbe8 	str	x8, [sp, #368]
    400059ac:	f940bbe8 	ldr	x8, [sp, #368]
            aligned_hole_addr.wrapping_add(requested_hole_size)
    400059b0:	f90053e8 	str	x8, [sp, #160]
    400059b4:	910263e8 	add	x8, sp, #0x98
        assert_eq!(
    400059b8:	f90097e8 	str	x8, [sp, #296]
    400059bc:	910283e8 	add	x8, sp, #0xa0
    400059c0:	f9009be8 	str	x8, [sp, #304]
    400059c4:	f9404fe8 	ldr	x8, [sp, #152]
    400059c8:	f94053e9 	ldr	x9, [sp, #160]
    400059cc:	eb090108 	subs	x8, x8, x9
    400059d0:	540001a0 	b.eq	40005a04 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x214>  // b.none
    400059d4:	14000001 	b	400059d8 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x1e8>
    400059d8:	2a1f03e8 	mov	w8, wzr
    400059dc:	3902bfe8 	strb	w8, [sp, #175]
    400059e0:	aa1f03e8 	mov	x8, xzr
    400059e4:	f9005be8 	str	x8, [sp, #176]
    400059e8:	3942bfe0 	ldrb	w0, [sp, #175]
    400059ec:	d503201f 	nop
    400059f0:	1002ddc4 	adr	x4, 4000b5a8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x19e0>
    400059f4:	910263e1 	add	x1, sp, #0x98
    400059f8:	910283e2 	add	x2, sp, #0xa0
    400059fc:	9102c3e3 	add	x3, sp, #0xb0
    40005a00:	97fffc37 	bl	40004adc <_ZN4core9panicking13assert_failed17hdc9e6bb73dba094bE>
    40005a04:	f94017e0 	ldr	x0, [sp, #40]
        );

        HoleList {
            first: Hole {
                size: 0,
                next: Some(NonNull::new_unchecked(ptr)),
    40005a08:	97fffae2 	bl	40004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>
    40005a0c:	f94017ea 	ldr	x10, [sp, #40]
    40005a10:	f9400fe9 	ldr	x9, [sp, #24]
    40005a14:	f94013e8 	ldr	x8, [sp, #32]
    40005a18:	f90073e0 	str	x0, [sp, #224]
            first: Hole {
    40005a1c:	f94073eb 	ldr	x11, [sp, #224]
    40005a20:	f90003eb 	str	x11, [sp]
    40005a24:	f9009fea 	str	x10, [sp, #312]
    40005a28:	f900a3e9 	str	x9, [sp, #320]
        self.wrapping_offset(count as isize)
    40005a2c:	f900a7e9 	str	x9, [sp, #328]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40005a30:	8b09014a 	add	x10, x10, x9
    40005a34:	f900abea 	str	x10, [sp, #336]
    40005a38:	f940abea 	ldr	x10, [sp, #336]
    40005a3c:	f90007ea 	str	x10, [sp, #8]
            },
            bottom: aligned_hole_addr,
            top: aligned_hole_addr.wrapping_add(aligned_hole_size),
            pending_extend: (requested_hole_size - aligned_hole_size) as u8,
    40005a40:	eb090100 	subs	x0, x8, x9
    40005a44:	f9000be0 	str	x0, [sp, #16]
    40005a48:	54000223 	b.cc	40005a8c <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x29c>  // b.lo, b.ul, b.last
    40005a4c:	14000001 	b	40005a50 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E+0x260>
    40005a50:	f94027e9 	ldr	x9, [sp, #72]
    40005a54:	f9400be0 	ldr	x0, [sp, #16]
    40005a58:	f94007e8 	ldr	x8, [sp, #8]
    40005a5c:	f94017ea 	ldr	x10, [sp, #40]
    40005a60:	f94003eb 	ldr	x11, [sp]
    40005a64:	aa1f03ec 	mov	x12, xzr
        HoleList {
    40005a68:	f900012c 	str	x12, [x9]
    40005a6c:	f900052b 	str	x11, [x9, #8]
    40005a70:	f900092a 	str	x10, [x9, #16]
    40005a74:	f9000d28 	str	x8, [x9, #24]
    40005a78:	2a0003e8 	mov	w8, w0
    40005a7c:	39008128 	strb	w8, [x9, #32]
        }
    }
    40005a80:	a95b7bfd 	ldp	x29, x30, [sp, #432]
    40005a84:	910703ff 	add	sp, sp, #0x1c0
    40005a88:	d65f03c0 	ret
            pending_extend: (requested_hole_size - aligned_hole_size) as u8,
    40005a8c:	d503201f 	nop
    40005a90:	1002d980 	adr	x0, 4000b5c0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x19f8>
    40005a94:	94000d22 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
	...

0000000040005aa0 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE>:
    /// alignment of a `Hole`.
    ///
    /// The [`allocate_first_fit`][HoleList::allocate_first_fit] and
    /// [`deallocate`][HoleList::deallocate] methods perform the required alignment
    /// themselves, so calling this function manually is not necessary.
    pub fn align_layout(layout: Layout) -> Layout {
    40005aa0:	d101c3ff 	sub	sp, sp, #0x70
    40005aa4:	f90033fe 	str	x30, [sp, #96]
    40005aa8:	f9000fe0 	str	x0, [sp, #24]
    40005aac:	f90013e1 	str	x1, [sp, #32]
    40005ab0:	910063e0 	add	x0, sp, #0x18
        let mut size = layout.size();
    40005ab4:	97fffb3f 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    40005ab8:	f90017e0 	str	x0, [sp, #40]
        if size < Self::min_size() {
    40005abc:	f94017e8 	ldr	x8, [sp, #40]
    40005ac0:	f9000be8 	str	x8, [sp, #16]
    40005ac4:	940000db 	bl	40005e30 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE>
    40005ac8:	f9400be8 	ldr	x8, [sp, #16]
    40005acc:	eb000108 	subs	x8, x8, x0
    40005ad0:	54000463 	b.cc	40005b5c <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE+0xbc>  // b.lo, b.ul, b.last
    40005ad4:	14000001 	b	40005ad8 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE+0x38>
            size = Self::min_size();
        }
        let size = align_up_size(size, mem::align_of::<Hole>());
    40005ad8:	f94017e0 	ldr	x0, [sp, #40]
    40005adc:	52800108 	mov	w8, #0x8                   	// #8
    40005ae0:	2a0803e1 	mov	w1, w8
    40005ae4:	94000403 	bl	40006af0 <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E>
    40005ae8:	f90007e0 	str	x0, [sp, #8]
    40005aec:	f9001be0 	str	x0, [sp, #48]
    40005af0:	910063e0 	add	x0, sp, #0x18
        Layout::from_size_align(size, layout.align()).unwrap()
    40005af4:	97fffb37 	bl	400047d0 <_ZN4core5alloc6layout6Layout5align17hd092a94dafe9bf0fE>
    40005af8:	aa0003e1 	mov	x1, x0
    40005afc:	f94007e0 	ldr	x0, [sp, #8]
    40005b00:	97fffaec 	bl	400046b0 <_ZN4core5alloc6layout6Layout15from_size_align17h870e450cd35b496dE>
    40005b04:	f9001fe0 	str	x0, [sp, #56]
    40005b08:	f90023e1 	str	x1, [sp, #64]
        match self {
    40005b0c:	f9401fe8 	ldr	x8, [sp, #56]
    40005b10:	b5000188 	cbnz	x8, 40005b40 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE+0xa0>
    40005b14:	14000001 	b	40005b18 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE+0x78>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    40005b18:	d503201f 	nop
    40005b1c:	1002c160 	adr	x0, 4000b348 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1780>
    40005b20:	d503201f 	nop
    40005b24:	1002c023 	adr	x3, 4000b328 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1760>
    40005b28:	d503201f 	nop
    40005b2c:	1002d564 	adr	x4, 4000b5d8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a10>
    40005b30:	52800568 	mov	w8, #0x2b                  	// #43
    40005b34:	2a0803e1 	mov	w1, w8
    40005b38:	91013fe2 	add	x2, sp, #0x4f
    40005b3c:	940007ea 	bl	40007ae4 <_ZN4core6result13unwrap_failed17hd6f48f9c0600905bE>
            Ok(t) => t,
    40005b40:	f9401fe0 	ldr	x0, [sp, #56]
    40005b44:	f94023e1 	ldr	x1, [sp, #64]
    40005b48:	f9002be0 	str	x0, [sp, #80]
    40005b4c:	f9002fe1 	str	x1, [sp, #88]
    }
    40005b50:	f94033fe 	ldr	x30, [sp, #96]
    40005b54:	9101c3ff 	add	sp, sp, #0x70
    40005b58:	d65f03c0 	ret
            size = Self::min_size();
    40005b5c:	940000b5 	bl	40005e30 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE>
    40005b60:	f90017e0 	str	x0, [sp, #40]
        if size < Self::min_size() {
    40005b64:	17ffffdd 	b	40005ad8 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE+0x38>
	...

0000000040005b70 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E>:
    /// enough. Thus the runtime is in O(n) but it should be reasonably fast for small allocations.
    //
    // NOTE: We could probably replace this with an `Option` instead of a `Result` in a later
    // release to remove this clippy warning
    #[allow(clippy::result_unit_err)]
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<(NonNull<u8>, Layout), ()> {
    40005b70:	d107c3ff 	sub	sp, sp, #0x1f0
    40005b74:	a91e7bfd 	stp	x29, x30, [sp, #480]
    40005b78:	f9000fe2 	str	x2, [sp, #24]
    40005b7c:	aa0103e9 	mov	x9, x1
    40005b80:	f9400fe1 	ldr	x1, [sp, #24]
    40005b84:	f90013e9 	str	x9, [sp, #32]
    40005b88:	aa0003e9 	mov	x9, x0
    40005b8c:	f94013e0 	ldr	x0, [sp, #32]
    40005b90:	f9001be9 	str	x9, [sp, #48]
    40005b94:	aa0803e9 	mov	x9, x8
    40005b98:	f9401be8 	ldr	x8, [sp, #48]
    40005b9c:	f90017e9 	str	x9, [sp, #40]
    40005ba0:	f900cfe8 	str	x8, [sp, #408]
    40005ba4:	f900d3e0 	str	x0, [sp, #416]
    40005ba8:	f900d7e1 	str	x1, [sp, #424]
        let aligned_layout = Self::align_layout(layout);
    40005bac:	97ffffbd 	bl	40005aa0 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE>
    40005bb0:	aa0003e8 	mov	x8, x0
    40005bb4:	f9401be0 	ldr	x0, [sp, #48]
    40005bb8:	aa0803e9 	mov	x9, x8
    40005bbc:	f9001fe9 	str	x9, [sp, #56]
    40005bc0:	aa0103e9 	mov	x9, x1
    40005bc4:	f90023e9 	str	x9, [sp, #64]
    40005bc8:	f900dfe8 	str	x8, [sp, #440]
    40005bcc:	f900e3e1 	str	x1, [sp, #448]
    40005bd0:	910283e8 	add	x8, sp, #0xa0
    40005bd4:	f90027e8 	str	x8, [sp, #72]
        let mut cursor = self.cursor().ok_or(())?;
    40005bd8:	97fffed6 	bl	40005730 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE>
    40005bdc:	f94027e0 	ldr	x0, [sp, #72]
    40005be0:	910223e8 	add	x8, sp, #0x88
    40005be4:	f9002be8 	str	x8, [sp, #80]
    40005be8:	97fffb2e 	bl	400048a0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE>
    40005bec:	f9402be0 	ldr	x0, [sp, #80]
    40005bf0:	9101c3e8 	add	x8, sp, #0x70
    40005bf4:	97fffc3f 	bl	40004cf0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E>
    40005bf8:	f9403be8 	ldr	x8, [sp, #112]
    40005bfc:	b50000e8 	cbnz	x8, 40005c18 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0xa8>
    40005c00:	14000001 	b	40005c04 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x94>
    40005c04:	f94017e8 	ldr	x8, [sp, #40]
    40005c08:	d503201f 	nop
    40005c0c:	1002d0a0 	adr	x0, 4000b620 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a58>
    40005c10:	97fff8a8 	bl	40003eb0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h21c1842975e73179E>
    40005c14:	1400004f 	b	40005d50 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1e0>
    40005c18:	f9403be8 	ldr	x8, [sp, #112]
    40005c1c:	f9403fe9 	ldr	x9, [sp, #120]
    40005c20:	f94043ea 	ldr	x10, [sp, #128]
    40005c24:	f90067ea 	str	x10, [sp, #200]
    40005c28:	f90063e9 	str	x9, [sp, #192]
    40005c2c:	f9005fe8 	str	x8, [sp, #184]
    40005c30:	f9405fe8 	ldr	x8, [sp, #184]
    40005c34:	f94063e9 	ldr	x9, [sp, #192]
    40005c38:	f94067ea 	ldr	x10, [sp, #200]
    40005c3c:	f90037ea 	str	x10, [sp, #104]
    40005c40:	f90033e9 	str	x9, [sp, #96]
    40005c44:	f9002fe8 	str	x8, [sp, #88]

        loop {
    40005c48:	14000001 	b	40005c4c <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0xdc>
    40005c4c:	f94023e2 	ldr	x2, [sp, #64]
    40005c50:	f9401fe1 	ldr	x1, [sp, #56]
            match cursor.split_current(aligned_layout) {
    40005c54:	f9402fe8 	ldr	x8, [sp, #88]
    40005c58:	f94033e9 	ldr	x9, [sp, #96]
    40005c5c:	f94037ea 	ldr	x10, [sp, #104]
    40005c60:	f9007fea 	str	x10, [sp, #248]
    40005c64:	f9007be9 	str	x9, [sp, #240]
    40005c68:	f90077e8 	str	x8, [sp, #232]
    40005c6c:	910343e8 	add	x8, sp, #0xd0
    40005c70:	9103a3e0 	add	x0, sp, #0xe8
    40005c74:	97fffca7 	bl	40004f10 <_ZN21linked_list_allocator4hole6Cursor13split_current17h3a9eab936035393bE>
    40005c78:	f9406be8 	ldr	x8, [sp, #208]
    40005c7c:	b40002c8 	cbz	x8, 40005cd4 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x164>
    40005c80:	14000001 	b	40005c84 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x114>
                Ok((ptr, _len)) => {
                    return Ok((NonNull::new(ptr).ok_or(())?, aligned_layout));
                }
                Err(curs) => {
    40005c84:	f9406be8 	ldr	x8, [sp, #208]
    40005c88:	f9406fe9 	ldr	x9, [sp, #216]
    40005c8c:	f94073ea 	ldr	x10, [sp, #224]
    40005c90:	f9009bea 	str	x10, [sp, #304]
    40005c94:	f90097e9 	str	x9, [sp, #296]
    40005c98:	f90093e8 	str	x8, [sp, #288]
    40005c9c:	9105a3e8 	add	x8, sp, #0x168
    40005ca0:	f90007e8 	str	x8, [sp, #8]
    40005ca4:	910483e0 	add	x0, sp, #0x120
                    cursor = curs.next().ok_or(())?;
    40005ca8:	97fffc72 	bl	40004e70 <_ZN21linked_list_allocator4hole6Cursor4next17h79d83ad6cd44f065E>
    40005cac:	f94007e0 	ldr	x0, [sp, #8]
    40005cb0:	910543e8 	add	x8, sp, #0x150
    40005cb4:	f9000be8 	str	x8, [sp, #16]
    40005cb8:	97fffafa 	bl	400048a0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h964960d513d6c2fdE>
    40005cbc:	f9400be0 	ldr	x0, [sp, #16]
    40005cc0:	9104e3e8 	add	x8, sp, #0x138
    40005cc4:	97fffc0b 	bl	40004cf0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h8dc42f61d3be4a55E>
    40005cc8:	f9409fe8 	ldr	x8, [sp, #312]
    40005ccc:	b4000488 	cbz	x8, 40005d5c <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1ec>
    40005cd0:	14000028 	b	40005d70 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x200>
                Ok((ptr, _len)) => {
    40005cd4:	f9406fe0 	ldr	x0, [sp, #216]
    40005cd8:	f900e7e0 	str	x0, [sp, #456]
    40005cdc:	f94073e8 	ldr	x8, [sp, #224]
    40005ce0:	f900ebe8 	str	x8, [sp, #464]
                    return Ok((NonNull::new(ptr).ok_or(())?, aligned_layout));
    40005ce4:	97fffa57 	bl	40004640 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h7f301b3f332becf5E>
    40005ce8:	97fffb0a 	bl	40004910 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfdc61af8fe4d5a77E>
    40005cec:	97fffbf1 	bl	40004cb0 <_ZN79_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try_trait..Try$GT$6branch17h141dccb058505494E>
    40005cf0:	f9008fe0 	str	x0, [sp, #280]
    40005cf4:	f9408fe8 	ldr	x8, [sp, #280]
    40005cf8:	b50000e8 	cbnz	x8, 40005d14 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1a4>
    40005cfc:	14000001 	b	40005d00 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x190>
    40005d00:	f94017e8 	ldr	x8, [sp, #40]
    40005d04:	d503201f 	nop
    40005d08:	1002c740 	adr	x0, 4000b5f0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a28>
    40005d0c:	97fff869 	bl	40003eb0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h21c1842975e73179E>
    40005d10:	14000010 	b	40005d50 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1e0>
    40005d14:	f94017e9 	ldr	x9, [sp, #40]
    40005d18:	f94023e8 	ldr	x8, [sp, #64]
    40005d1c:	f9401fea 	ldr	x10, [sp, #56]
    40005d20:	f9408feb 	ldr	x11, [sp, #280]
    40005d24:	f900efeb 	str	x11, [sp, #472]
    40005d28:	f90083eb 	str	x11, [sp, #256]
    40005d2c:	f90087ea 	str	x10, [sp, #264]
    40005d30:	f9008be8 	str	x8, [sp, #272]
    40005d34:	f94083e8 	ldr	x8, [sp, #256]
    40005d38:	f94087ea 	ldr	x10, [sp, #264]
    40005d3c:	f9408beb 	ldr	x11, [sp, #272]
    40005d40:	f900092b 	str	x11, [x9, #16]
    40005d44:	f900052a 	str	x10, [x9, #8]
    40005d48:	f9000128 	str	x8, [x9]
    40005d4c:	14000001 	b	40005d50 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1e0>
                }
            }
        }
    }
    40005d50:	a95e7bfd 	ldp	x29, x30, [sp, #480]
    40005d54:	9107c3ff 	add	sp, sp, #0x1f0
    40005d58:	d65f03c0 	ret
    40005d5c:	f94017e8 	ldr	x8, [sp, #40]
                    cursor = curs.next().ok_or(())?;
    40005d60:	d503201f 	nop
    40005d64:	1002c520 	adr	x0, 4000b608 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a40>
    40005d68:	97fff852 	bl	40003eb0 <_ZN153_$LT$core..result..Result$LT$T$C$F$GT$$u20$as$u20$core..ops..try_trait..FromResidual$LT$core..result..Result$LT$core..convert..Infallible$C$E$GT$$GT$$GT$13from_residual17h21c1842975e73179E>
    40005d6c:	17fffff9 	b	40005d50 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0x1e0>
    40005d70:	f9409fe8 	ldr	x8, [sp, #312]
    40005d74:	f940a3e9 	ldr	x9, [sp, #320]
    40005d78:	f940a7ea 	ldr	x10, [sp, #328]
    40005d7c:	f900cbea 	str	x10, [sp, #400]
    40005d80:	f900c7e9 	str	x9, [sp, #392]
    40005d84:	f900c3e8 	str	x8, [sp, #384]
    40005d88:	f940c3e8 	ldr	x8, [sp, #384]
    40005d8c:	f940c7e9 	ldr	x9, [sp, #392]
    40005d90:	f940cbea 	ldr	x10, [sp, #400]
    40005d94:	f90037ea 	str	x10, [sp, #104]
    40005d98:	f90033e9 	str	x9, [sp, #96]
    40005d9c:	f9002fe8 	str	x8, [sp, #88]
        loop {
    40005da0:	17ffffab 	b	40005c4c <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E+0xdc>
	...

0000000040005db0 <_ZN21linked_list_allocator4hole8HoleList10deallocate17h8ba191b999c8c650E>:
    ///
    /// `ptr` must be a pointer returned by a call to the [`allocate_first_fit`] function with
    /// identical layout. Undefined behavior may occur for invalid arguments.
    /// The function performs exactly the same layout adjustments as [`allocate_first_fit`] and
    /// returns the aligned layout.
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) -> Layout {
    40005db0:	d101c3ff 	sub	sp, sp, #0x70
    40005db4:	f90033fe 	str	x30, [sp, #96]
    40005db8:	f90007e3 	str	x3, [sp, #8]
    40005dbc:	f9000be2 	str	x2, [sp, #16]
    40005dc0:	aa0103e8 	mov	x8, x1
    40005dc4:	f94007e1 	ldr	x1, [sp, #8]
    40005dc8:	f9000fe8 	str	x8, [sp, #24]
    40005dcc:	aa0003e9 	mov	x9, x0
    40005dd0:	f9400be0 	ldr	x0, [sp, #16]
    40005dd4:	f90013e9 	str	x9, [sp, #32]
    40005dd8:	f9001fe9 	str	x9, [sp, #56]
    40005ddc:	f90023e8 	str	x8, [sp, #64]
    40005de0:	f90027e0 	str	x0, [sp, #72]
    40005de4:	f9002be1 	str	x1, [sp, #80]
        let aligned_layout = Self::align_layout(layout);
    40005de8:	97ffff2e 	bl	40005aa0 <_ZN21linked_list_allocator4hole8HoleList12align_layout17hf0c70398181f6eceE>
    40005dec:	aa0103e8 	mov	x8, x1
    40005df0:	f9400fe1 	ldr	x1, [sp, #24]
    40005df4:	f90017e0 	str	x0, [sp, #40]
    40005df8:	f9001be8 	str	x8, [sp, #48]
    40005dfc:	f9002fe1 	str	x1, [sp, #88]
    40005e00:	9100a3e0 	add	x0, sp, #0x28
        deallocate(self, ptr.as_ptr(), aligned_layout.size());
    40005e04:	97fffa6b 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    40005e08:	f9400fe1 	ldr	x1, [sp, #24]
    40005e0c:	aa0003e2 	mov	x2, x0
    40005e10:	f94013e0 	ldr	x0, [sp, #32]
    40005e14:	940001cb 	bl	40006540 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E>
        aligned_layout
    40005e18:	f94017e0 	ldr	x0, [sp, #40]
    40005e1c:	f9401be1 	ldr	x1, [sp, #48]
    }
    40005e20:	f94033fe 	ldr	x30, [sp, #96]
    40005e24:	9101c3ff 	add	sp, sp, #0x70
    40005e28:	d65f03c0 	ret
    40005e2c:	00000000 	udf	#0

0000000040005e30 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE>:

    /// Returns the minimal allocation size. Smaller allocations or deallocations are not allowed.
    pub fn min_size() -> usize {
    40005e30:	d10043ff 	sub	sp, sp, #0x10
    40005e34:	52800208 	mov	w8, #0x10                  	// #16
    40005e38:	2a0803e0 	mov	w0, w8
    40005e3c:	f90007e0 	str	x0, [sp, #8]
    40005e40:	2a1f03e8 	mov	w8, wzr
        size_of::<usize>() * 2
    40005e44:	350000a8 	cbnz	w8, 40005e58 <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE+0x28>
    40005e48:	14000001 	b	40005e4c <_ZN21linked_list_allocator4hole8HoleList8min_size17h696ad29a43e3aefeE+0x1c>
    40005e4c:	f94007e0 	ldr	x0, [sp, #8]
    }
    40005e50:	910043ff 	add	sp, sp, #0x10
    40005e54:	d65f03c0 	ret
        size_of::<usize>() * 2
    40005e58:	d503201f 	nop
    40005e5c:	1002bee0 	adr	x0, 4000b638 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a70>
    40005e60:	94000c3c 	bl	40008f50 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h1f122e531ebb3929E>
	...

0000000040005e70 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E>:
        // save extra bytes given to extend that weren't aligned to the hole size
        self.pending_extend = (extend_by - new_hole_size) as u8;
    }
}

unsafe fn make_hole(addr: *mut u8, size: usize) -> NonNull<Hole> {
    40005e70:	d10403ff 	sub	sp, sp, #0x100
    40005e74:	f9007bfe 	str	x30, [sp, #240]
    40005e78:	f9000fe1 	str	x1, [sp, #24]
    40005e7c:	f90013e0 	str	x0, [sp, #32]
    40005e80:	f90057e0 	str	x0, [sp, #168]
    40005e84:	f9005be1 	str	x1, [sp, #176]
    40005e88:	f9006be0 	str	x0, [sp, #208]
    let hole_addr = addr.cast::<Hole>();
    40005e8c:	f9005fe0 	str	x0, [sp, #184]
    40005e90:	f90017e0 	str	x0, [sp, #40]
    40005e94:	2a1f03e8 	mov	w8, wzr
    debug_assert_eq!(
        addr as usize % align_of::<Hole>(),
    40005e98:	35000208 	cbnz	w8, 40005ed8 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E+0x68>
    40005e9c:	14000001 	b	40005ea0 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E+0x30>
    40005ea0:	f94017e8 	ldr	x8, [sp, #40]
    40005ea4:	92400908 	and	x8, x8, #0x7
    40005ea8:	f9001be8 	str	x8, [sp, #48]
    40005eac:	9100c3e8 	add	x8, sp, #0x30
    debug_assert_eq!(
    40005eb0:	f90063e8 	str	x8, [sp, #192]
    40005eb4:	b0000028 	adrp	x8, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005eb8:	9123c108 	add	x8, x8, #0x8f0
    40005ebc:	f90067e8 	str	x8, [sp, #200]
    40005ec0:	b0000029 	adrp	x9, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005ec4:	f9401be8 	ldr	x8, [sp, #48]
    40005ec8:	f9447929 	ldr	x9, [x9, #2288]
    40005ecc:	eb090108 	subs	x8, x8, x9
    40005ed0:	54000340 	b.eq	40005f38 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E+0xc8>  // b.none
    40005ed4:	14000004 	b	40005ee4 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E+0x74>
        addr as usize % align_of::<Hole>(),
    40005ed8:	d503201f 	nop
    40005edc:	1002bba0 	adr	x0, 4000b650 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1a88>
    40005ee0:	94000c36 	bl	40008fb8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h6ee5e17f2ceffb65E>
    40005ee4:	2a1f03e8 	mov	w8, wzr
    debug_assert_eq!(
    40005ee8:	3900ffe8 	strb	w8, [sp, #63]
    40005eec:	d503201f 	nop
    40005ef0:	1002bcc0 	adr	x0, 4000b688 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1ac0>
    40005ef4:	9101c3e8 	add	x8, sp, #0x70
    40005ef8:	f90007e8 	str	x8, [sp, #8]
    40005efc:	97fff875 	bl	400040d0 <_ZN4core3fmt9Arguments9new_const17had94a843bd82d75dE>
    40005f00:	f94007e1 	ldr	x1, [sp, #8]
    40005f04:	52800608 	mov	w8, #0x30                  	// #48
    40005f08:	2a0803e2 	mov	w2, w8
    40005f0c:	910103e0 	add	x0, sp, #0x40
    40005f10:	f9000be0 	str	x0, [sp, #16]
    40005f14:	94000e31 	bl	400097d8 <memcpy>
    40005f18:	f9400be3 	ldr	x3, [sp, #16]
    40005f1c:	3940ffe0 	ldrb	w0, [sp, #63]
    40005f20:	b0000022 	adrp	x2, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40005f24:	9123c042 	add	x2, x2, #0x8f0
    40005f28:	d503201f 	nop
    40005f2c:	1002bb64 	adr	x4, 4000b698 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1ad0>
    40005f30:	9100c3e1 	add	x1, sp, #0x30
    40005f34:	940006aa 	bl	400079dc <_ZN4core9panicking13assert_failed17h85c904e705525b01E>
    40005f38:	f94013e0 	ldr	x0, [sp, #32]
    40005f3c:	f9400fe9 	ldr	x9, [sp, #24]
    40005f40:	aa1f03e8 	mov	x8, xzr
        0,
        "Hole address not aligned!",
    );
    hole_addr.write(Hole { size, next: None });
    40005f44:	f90053e8 	str	x8, [sp, #160]
    40005f48:	f94053e8 	ldr	x8, [sp, #160]
    40005f4c:	f9006fe0 	str	x0, [sp, #216]
    40005f50:	f90073e9 	str	x9, [sp, #224]
    40005f54:	f90077e8 	str	x8, [sp, #232]
    40005f58:	f9000009 	str	x9, [x0]
    40005f5c:	f9000408 	str	x8, [x0, #8]
    NonNull::new_unchecked(hole_addr)
    40005f60:	97fff98c 	bl	40004590 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17haf9aa58a78df74f8E>
}
    40005f64:	f9407bfe 	ldr	x30, [sp, #240]
    40005f68:	910403ff 	add	sp, sp, #0x100
    40005f6c:	d65f03c0 	ret

0000000040005f70 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE>:

impl Cursor {
    fn try_insert_back(self, node: NonNull<Hole>, bottom: *mut u8) -> Result<Self, Self> {
    40005f70:	d10543ff 	sub	sp, sp, #0x150
    40005f74:	a9147bfd 	stp	x29, x30, [sp, #320]
    40005f78:	f9000fe2 	str	x2, [sp, #24]
    40005f7c:	f90013e0 	str	x0, [sp, #32]
    40005f80:	f90017e8 	str	x8, [sp, #40]
    40005f84:	f9001be1 	str	x1, [sp, #48]
    40005f88:	f90057e2 	str	x2, [sp, #168]
        // Covers the case where the new hole exists BEFORE the current pointer,
        // which only happens when previous is the stub pointer
        if node < self.hole {
    40005f8c:	91002001 	add	x1, x0, #0x8
    40005f90:	9100c3e0 	add	x0, sp, #0x30
    40005f94:	97fff7ef 	bl	40003f50 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E>
    40005f98:	370001a0 	tbnz	w0, #0, 40005fcc <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0x5c>
    40005f9c:	14000001 	b	40005fa0 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0x30>
    40005fa0:	f94017e9 	ldr	x9, [sp, #40]
    40005fa4:	f94013eb 	ldr	x11, [sp, #32]
                prev,
                hole: node,
                top,
            })
        } else {
            Err(self)
    40005fa8:	f9400168 	ldr	x8, [x11]
    40005fac:	f940056a 	ldr	x10, [x11, #8]
    40005fb0:	f940096b 	ldr	x11, [x11, #16]
    40005fb4:	f9000d2b 	str	x11, [x9, #24]
    40005fb8:	f900092a 	str	x10, [x9, #16]
    40005fbc:	f9000528 	str	x8, [x9, #8]
    40005fc0:	52800028 	mov	w8, #0x1                   	// #1
    40005fc4:	f9000128 	str	x8, [x9]
        if node < self.hole {
    40005fc8:	14000018 	b	40006028 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0xb8>
    40005fcc:	f94013e9 	ldr	x9, [sp, #32]
            let node_u8 = node.as_ptr().cast::<u8>();
    40005fd0:	f9401be8 	ldr	x8, [sp, #48]
    40005fd4:	f9009be8 	str	x8, [sp, #304]
    40005fd8:	f9008be8 	str	x8, [sp, #272]
    40005fdc:	f9005be8 	str	x8, [sp, #176]
    40005fe0:	9100c3ea 	add	x10, sp, #0x30
    40005fe4:	f9009fea 	str	x10, [sp, #312]
    40005fe8:	f9401bea 	ldr	x10, [sp, #48]
            let node_size = unsafe { node.as_ref().size };
    40005fec:	f940014a 	ldr	x10, [x10]
    40005ff0:	f9005fea 	str	x10, [sp, #184]
            let hole_u8 = self.hole.as_ptr().cast::<u8>();
    40005ff4:	f9400529 	ldr	x9, [x9, #8]
    40005ff8:	f90097e9 	str	x9, [sp, #296]
    40005ffc:	f90087e9 	str	x9, [sp, #264]
    40006000:	f90063e9 	str	x9, [sp, #192]
    40006004:	f90077e8 	str	x8, [sp, #232]
    40006008:	f9007bea 	str	x10, [sp, #240]
        self.wrapping_offset(count as isize)
    4000600c:	f9007fea 	str	x10, [sp, #248]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40006010:	8b0a0108 	add	x8, x8, x10
    40006014:	f90083e8 	str	x8, [sp, #256]
    40006018:	f94083e8 	ldr	x8, [sp, #256]
                node_u8.wrapping_add(node_size) <= hole_u8,
    4000601c:	eb090108 	subs	x8, x8, x9
    40006020:	54000189 	b.ls	40006050 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0xe0>  // b.plast
    40006024:	14000004 	b	40006034 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0xc4>
        }
    }
    40006028:	a9547bfd 	ldp	x29, x30, [sp, #320]
    4000602c:	910543ff 	add	sp, sp, #0x150
    40006030:	d65f03c0 	ret
            assert!(
    40006034:	d503201f 	nop
    40006038:	1002b3c0 	adr	x0, 4000b6b0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1ae8>
    4000603c:	d503201f 	nop
    40006040:	1002b502 	adr	x2, 4000b6e0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1b18>
    40006044:	52800568 	mov	w8, #0x2b                  	// #43
    40006048:	2a0803e1 	mov	w1, w8
    4000604c:	94000626 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
    40006050:	f94013e0 	ldr	x0, [sp, #32]
            debug_assert_eq!(self.previous().size, 0);
    40006054:	97fffba7 	bl	40004ef0 <_ZN21linked_list_allocator4hole6Cursor8previous17hfa2f1107d7fea9eeE>
    40006058:	aa0003e1 	mov	x1, x0
    4000605c:	f9000be1 	str	x1, [sp, #16]
    40006060:	f90067e0 	str	x0, [sp, #200]
    40006064:	90000028 	adrp	x8, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40006068:	9123c108 	add	x8, x8, #0x8f0
    4000606c:	f9006be8 	str	x8, [sp, #208]
    40006070:	90000029 	adrp	x9, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    40006074:	f9400008 	ldr	x8, [x0]
    40006078:	f9447929 	ldr	x9, [x9, #2288]
    4000607c:	eb090108 	subs	x8, x8, x9
    40006080:	540001c0 	b.eq	400060b8 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0x148>  // b.none
    40006084:	14000001 	b	40006088 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0x118>
    40006088:	f9400be1 	ldr	x1, [sp, #16]
    4000608c:	2a1f03e8 	mov	w8, wzr
    40006090:	3900ffe8 	strb	w8, [sp, #63]
    40006094:	aa1f03e8 	mov	x8, xzr
    40006098:	f90023e8 	str	x8, [sp, #64]
    4000609c:	3940ffe0 	ldrb	w0, [sp, #63]
    400060a0:	90000022 	adrp	x2, 4000a000 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x438>
    400060a4:	9123c042 	add	x2, x2, #0x8f0
    400060a8:	d503201f 	nop
    400060ac:	1002b264 	adr	x4, 4000b6f8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1b30>
    400060b0:	910103e3 	add	x3, sp, #0x40
    400060b4:	9400064a 	bl	400079dc <_ZN4core9panicking13assert_failed17h85c904e705525b01E>
    400060b8:	f9400fe1 	ldr	x1, [sp, #24]
    400060bc:	f94013e8 	ldr	x8, [sp, #32]
                mut prev,
    400060c0:	f9400109 	ldr	x9, [x8]
    400060c4:	f9003be9 	str	x9, [sp, #112]
                hole,
    400060c8:	f9400509 	ldr	x9, [x8, #8]
    400060cc:	f90003e9 	str	x9, [sp]
    400060d0:	f9006fe9 	str	x9, [sp, #216]
                top,
    400060d4:	f9400908 	ldr	x8, [x8, #16]
    400060d8:	f90007e8 	str	x8, [sp, #8]
    400060dc:	f90073e8 	str	x8, [sp, #224]
                let mut node = check_merge_bottom(node, bottom);
    400060e0:	f9401be0 	ldr	x0, [sp, #48]
    400060e4:	97fffd37 	bl	400055c0 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E>
    400060e8:	f94003ea 	ldr	x10, [sp]
    400060ec:	f94007e8 	ldr	x8, [sp, #8]
    400060f0:	f94017e9 	ldr	x9, [sp, #40]
    400060f4:	f9003fe0 	str	x0, [sp, #120]
                prev.as_mut().next = Some(node);
    400060f8:	f9403feb 	ldr	x11, [sp, #120]
    400060fc:	f90043eb 	str	x11, [sp, #128]
    40006100:	9101c3eb 	add	x11, sp, #0x70
    40006104:	f90093eb 	str	x11, [sp, #288]
        unsafe { &mut *self.as_ptr() }
    40006108:	f9403bec 	ldr	x12, [sp, #112]
    4000610c:	f94043eb 	ldr	x11, [sp, #128]
    40006110:	f900058b 	str	x11, [x12, #8]
                node.as_mut().next = Some(hole);
    40006114:	f90047ea 	str	x10, [sp, #136]
    40006118:	9101e3ea 	add	x10, sp, #0x78
    4000611c:	f9008fea 	str	x10, [sp, #280]
    40006120:	f9403feb 	ldr	x11, [sp, #120]
    40006124:	f94047ea 	ldr	x10, [sp, #136]
    40006128:	f900056a 	str	x10, [x11, #8]
                prev,
    4000612c:	f9403bea 	ldr	x10, [sp, #112]
            Ok(Cursor {
    40006130:	f9004bea 	str	x10, [sp, #144]
    40006134:	f9401bea 	ldr	x10, [sp, #48]
    40006138:	f9004fea 	str	x10, [sp, #152]
    4000613c:	f90053e8 	str	x8, [sp, #160]
    40006140:	f9404be8 	ldr	x8, [sp, #144]
    40006144:	f9404fea 	ldr	x10, [sp, #152]
    40006148:	f94053eb 	ldr	x11, [sp, #160]
    4000614c:	f9000d2b 	str	x11, [x9, #24]
    40006150:	f900092a 	str	x10, [x9, #16]
    40006154:	f9000528 	str	x8, [x9, #8]
    40006158:	aa1f03e8 	mov	x8, xzr
    4000615c:	f9000128 	str	x8, [x9]
        if node < self.hole {
    40006160:	17ffffb2 	b	40006028 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE+0xb8>
	...

0000000040006170 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E>:

    fn try_insert_after(&mut self, mut node: NonNull<Hole>) -> Result<(), ()> {
    40006170:	d10683ff 	sub	sp, sp, #0x1a0
    40006174:	a9197bfd 	stp	x29, x30, [sp, #400]
    40006178:	f9000be0 	str	x0, [sp, #16]
    4000617c:	f90013e1 	str	x1, [sp, #32]
    40006180:	f90073e0 	str	x0, [sp, #224]
        let node_u8 = node.as_ptr().cast::<u8>();
    40006184:	f94013e8 	ldr	x8, [sp, #32]
    40006188:	f900b3e8 	str	x8, [sp, #352]
    4000618c:	f9009fe8 	str	x8, [sp, #312]
    40006190:	f9001be8 	str	x8, [sp, #48]
    40006194:	910083e8 	add	x8, sp, #0x20
    40006198:	f900b7e8 	str	x8, [sp, #360]
        unsafe { &*self.as_ptr().cast_const() }
    4000619c:	f94013e8 	ldr	x8, [sp, #32]
        let node_size = unsafe { node.as_ref().size };
    400061a0:	f9400108 	ldr	x8, [x8]
    400061a4:	aa0803e9 	mov	x9, x8
    400061a8:	f9000fe9 	str	x9, [sp, #24]
    400061ac:	f90077e8 	str	x8, [sp, #232]

        // If we have a next, does the node overlap next?
        if let Some(next) = self.current().next.as_ref() {
    400061b0:	97fffb48 	bl	40004ed0 <_ZN21linked_list_allocator4hole6Cursor7current17h51338f4c72902c63E>
    400061b4:	91002000 	add	x0, x0, #0x8
    400061b8:	97fff9e6 	bl	40004950 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE>
    400061bc:	f9001fe0 	str	x0, [sp, #56]
    400061c0:	f9401fe8 	ldr	x8, [sp, #56]
    400061c4:	b4000148 	cbz	x8, 400061ec <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x7c>
    400061c8:	14000001 	b	400061cc <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x5c>
    400061cc:	f9401fe1 	ldr	x1, [sp, #56]
    400061d0:	aa0103e8 	mov	x8, x1
    400061d4:	f90007e8 	str	x8, [sp, #8]
    400061d8:	f9007be1 	str	x1, [sp, #240]
    400061dc:	910083e0 	add	x0, sp, #0x20
            if node < *next {
    400061e0:	97fff75c 	bl	40003f50 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E>
    400061e4:	37000160 	tbnz	w0, #0, 40006210 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0xa0>
    400061e8:	14000007 	b	40006204 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x94>
    400061ec:	f9400be8 	ldr	x8, [sp, #16]
        }

        // At this point, we either have no "next" pointer, or the hole is
        // between current and "next". The following assert can only trigger
        // if we've gotten our list out of order.
        debug_assert!(self.hole < node, "Hole list out of order?");
    400061f0:	91002100 	add	x0, x8, #0x8
    400061f4:	910083e1 	add	x1, sp, #0x20
    400061f8:	97fff756 	bl	40003f50 <_ZN4core3cmp10PartialOrd2lt17h21c704e694e638c3E>
    400061fc:	370004e0 	tbnz	w0, #0, 40006298 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x128>
    40006200:	1400001f 	b	4000627c <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x10c>
    40006204:	52800028 	mov	w8, #0x1                   	// #1
                return Err(());
    40006208:	3900bfe8 	strb	w8, [sp, #47]
            let maybe_next = self.hole.as_mut().next.replace(node);
            node.as_mut().next = maybe_next;
        }

        Ok(())
    }
    4000620c:	14000011 	b	40006250 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0xe0>
    40006210:	f94007e9 	ldr	x9, [sp, #8]
    40006214:	f9400fea 	ldr	x10, [sp, #24]
                let node_u8 = node_u8 as *const u8;
    40006218:	f9401be8 	ldr	x8, [sp, #48]
    4000621c:	f9007fe8 	str	x8, [sp, #248]
    40006220:	f900bbe8 	str	x8, [sp, #368]
    40006224:	f900bfea 	str	x10, [sp, #376]
        self.wrapping_offset(count as isize)
    40006228:	f900c3ea 	str	x10, [sp, #384]
        unsafe { intrinsics::arith_offset(self, count) }
    4000622c:	8b0a0108 	add	x8, x8, x10
    40006230:	f900c7e8 	str	x8, [sp, #392]
    40006234:	f940c7e8 	ldr	x8, [sp, #392]
                    node_u8.wrapping_add(node_size) <= next.as_ptr().cast::<u8>(),
    40006238:	f9400129 	ldr	x9, [x9]
    4000623c:	f900afe9 	str	x9, [sp, #344]
    40006240:	f9009be9 	str	x9, [sp, #304]
    40006244:	eb090108 	subs	x8, x8, x9
    40006248:	54fffd29 	b.ls	400061ec <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x7c>  // b.plast
    4000624c:	14000005 	b	40006260 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0xf0>
    }
    40006250:	3940bfe0 	ldrb	w0, [sp, #47]
    40006254:	a9597bfd 	ldp	x29, x30, [sp, #400]
    40006258:	910683ff 	add	sp, sp, #0x1a0
    4000625c:	d65f03c0 	ret
                assert!(
    40006260:	d503201f 	nop
    40006264:	1002a260 	adr	x0, 4000b6b0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1ae8>
    40006268:	d503201f 	nop
    4000626c:	1002a522 	adr	x2, 4000b710 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1b48>
    40006270:	52800568 	mov	w8, #0x2b                  	// #43
    40006274:	2a0803e1 	mov	w1, w8
    40006278:	9400059b 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
        debug_assert!(self.hole < node, "Hole list out of order?");
    4000627c:	d503201f 	nop
    40006280:	1002a540 	adr	x0, 4000b728 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1b60>
    40006284:	d503201f 	nop
    40006288:	1002a5c2 	adr	x2, 4000b740 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1b78>
    4000628c:	528002e8 	mov	w8, #0x17                  	// #23
    40006290:	2a0803e1 	mov	w1, w8
    40006294:	94000594 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
    40006298:	f9400be0 	ldr	x0, [sp, #16]
        let hole_u8 = self.hole.as_ptr().cast::<u8>();
    4000629c:	f9400408 	ldr	x8, [x0, #8]
    400062a0:	f900abe8 	str	x8, [sp, #336]
    400062a4:	f90097e8 	str	x8, [sp, #296]
    400062a8:	f90023e8 	str	x8, [sp, #64]
        let hole_size = self.current().size;
    400062ac:	97fffb09 	bl	40004ed0 <_ZN21linked_list_allocator4hole6Cursor7current17h51338f4c72902c63E>
    400062b0:	f9400008 	ldr	x8, [x0]
    400062b4:	f90027e8 	str	x8, [sp, #72]
            hole_u8.wrapping_add(hole_size) <= node_u8,
    400062b8:	f94023e8 	ldr	x8, [sp, #64]
    400062bc:	f94027e9 	ldr	x9, [sp, #72]
    400062c0:	f90087e8 	str	x8, [sp, #264]
    400062c4:	f9008be9 	str	x9, [sp, #272]
        self.wrapping_offset(count as isize)
    400062c8:	f9008fe9 	str	x9, [sp, #280]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    400062cc:	8b090108 	add	x8, x8, x9
    400062d0:	f90093e8 	str	x8, [sp, #288]
    400062d4:	f94093e8 	ldr	x8, [sp, #288]
    400062d8:	f9401be9 	ldr	x9, [sp, #48]
    400062dc:	eb090108 	subs	x8, x8, x9
    400062e0:	54000429 	b.ls	40006364 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x1f4>  // b.plast
    400062e4:	14000001 	b	400062e8 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0x178>
    400062e8:	9102c3e8 	add	x8, sp, #0xb0
    400062ec:	9100c3e0 	add	x0, sp, #0x30
        assert!(
    400062f0:	97fff740 	bl	40003ff0 <_ZN4core3fmt2rt8Argument9new_debug17h57844f5ebc65bce2E>
    400062f4:	910303e8 	add	x8, sp, #0xc0
    400062f8:	910103e0 	add	x0, sp, #0x40
    400062fc:	97fff73d 	bl	40003ff0 <_ZN4core3fmt2rt8Argument9new_debug17h57844f5ebc65bce2E>
    40006300:	910343e8 	add	x8, sp, #0xd0
    40006304:	910123e0 	add	x0, sp, #0x48
    40006308:	97fff72a 	bl	40003fb0 <_ZN4core3fmt2rt8Argument11new_display17hfc9c18f209b5b7adE>
    4000630c:	f9405be8 	ldr	x8, [sp, #176]
    40006310:	f9405fe9 	ldr	x9, [sp, #184]
    40006314:	f90047e9 	str	x9, [sp, #136]
    40006318:	f90043e8 	str	x8, [sp, #128]
    4000631c:	f94063e8 	ldr	x8, [sp, #192]
    40006320:	f94067e9 	ldr	x9, [sp, #200]
    40006324:	f9004fe9 	str	x9, [sp, #152]
    40006328:	f9004be8 	str	x8, [sp, #144]
    4000632c:	f9406be8 	ldr	x8, [sp, #208]
    40006330:	f9406fe9 	ldr	x9, [sp, #216]
    40006334:	f90057e9 	str	x9, [sp, #168]
    40006338:	f90053e8 	str	x8, [sp, #160]
    4000633c:	d503201f 	nop
    40006340:	1002a280 	adr	x0, 4000b790 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1bc8>
    40006344:	910143e8 	add	x8, sp, #0x50
    40006348:	f90003e8 	str	x8, [sp]
    4000634c:	910203e1 	add	x1, sp, #0x80
    40006350:	97fff738 	bl	40004030 <_ZN4core3fmt9Arguments6new_v117h645cec9f4d6a1ab0E>
    40006354:	f94003e0 	ldr	x0, [sp]
    40006358:	d503201f 	nop
    4000635c:	1002a3a1 	adr	x1, 4000b7d0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1c08>
    40006360:	94000548 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40006364:	f9400be8 	ldr	x8, [sp, #16]
            let maybe_next = self.hole.as_mut().next.replace(node);
    40006368:	91002109 	add	x9, x8, #0x8
    4000636c:	f900a7e9 	str	x9, [sp, #328]
        unsafe { &mut *self.as_ptr() }
    40006370:	f9400508 	ldr	x8, [x8, #8]
    40006374:	91002100 	add	x0, x8, #0x8
    40006378:	f94013e1 	ldr	x1, [sp, #32]
    4000637c:	97fff9b9 	bl	40004a60 <_ZN4core6option15Option$LT$T$GT$7replace17h6bcd1348183eef61E>
    40006380:	f90083e0 	str	x0, [sp, #256]
    40006384:	910083e8 	add	x8, sp, #0x20
    40006388:	f900a3e8 	str	x8, [sp, #320]
    4000638c:	f94013e8 	ldr	x8, [sp, #32]
            node.as_mut().next = maybe_next;
    40006390:	f9000500 	str	x0, [x8, #8]
    40006394:	2a1f03e8 	mov	w8, wzr
        Ok(())
    40006398:	3900bfe8 	strb	w8, [sp, #47]
    }
    4000639c:	17ffffad 	b	40006250 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E+0xe0>

00000000400063a0 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE>:

    // Merge the current node with up to n following nodes
    fn try_merge_next_n(self, max: usize) {
    400063a0:	d104c3ff 	sub	sp, sp, #0x130
    400063a4:	a9127bfd 	stp	x29, x30, [sp, #288]
    400063a8:	f90033e1 	str	x1, [sp, #96]
        let Cursor {
            prev: _,
            mut hole,
    400063ac:	f9400408 	ldr	x8, [x0, #8]
    400063b0:	f90017e8 	str	x8, [sp, #40]
            top,
    400063b4:	f9400808 	ldr	x8, [x0, #16]
    400063b8:	aa0803e0 	mov	x0, x8
    400063bc:	f90013e0 	str	x0, [sp, #32]
    400063c0:	f90037e8 	str	x8, [sp, #104]
    400063c4:	aa1f03e0 	mov	x0, xzr
            ..
        } = self;

        for _ in 0..max {
    400063c8:	97fff9e2 	bl	40004b50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha38c34b891a7ea88E>
    400063cc:	f9001be0 	str	x0, [sp, #48]
    400063d0:	f9001fe1 	str	x1, [sp, #56]
    400063d4:	14000001 	b	400063d8 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x38>
    400063d8:	9100c3e0 	add	x0, sp, #0x30
    400063dc:	97fff8ad 	bl	40004690 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd636b4095ab66d23E>
    400063e0:	f90023e0 	str	x0, [sp, #64]
    400063e4:	f90027e1 	str	x1, [sp, #72]
    400063e8:	b94043e8 	ldr	w8, [sp, #64]
    400063ec:	36000168 	tbz	w8, #0, 40006418 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x78>
    400063f0:	14000001 	b	400063f4 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x54>
    400063f4:	9100a3e8 	add	x8, sp, #0x28
    400063f8:	f90083e8 	str	x8, [sp, #256]
    400063fc:	f94017e8 	ldr	x8, [sp, #40]
            // Is there a next node?
            let mut next = if let Some(next) = unsafe { hole.as_mut() }.next.as_ref() {
    40006400:	91002100 	add	x0, x8, #0x8
    40006404:	97fff953 	bl	40004950 <_ZN4core6option15Option$LT$T$GT$6as_ref17hdc7cd1419ae0a7afE>
    40006408:	f9002fe0 	str	x0, [sp, #88]
    4000640c:	f9402fe8 	ldr	x8, [sp, #88]
    40006410:	b50000c8 	cbnz	x8, 40006428 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x88>
    40006414:	14000022 	b	4000649c <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0xfc>
            } else {
                // Welp, not touching, can't merge. Move to the next node.
                hole = next;
            }
        }
    }
    40006418:	14000001 	b	4000641c <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x7c>
    4000641c:	a9527bfd 	ldp	x29, x30, [sp, #288]
    40006420:	9104c3ff 	add	sp, sp, #0x130
    40006424:	d65f03c0 	ret
            let mut next = if let Some(next) = unsafe { hole.as_mut() }.next.as_ref() {
    40006428:	f9402fe8 	ldr	x8, [sp, #88]
    4000642c:	f9003be8 	str	x8, [sp, #112]
                *next
    40006430:	f9400108 	ldr	x8, [x8]
    40006434:	f9002be8 	str	x8, [sp, #80]
            let hole_u8 = hole.as_ptr().cast::<u8>();
    40006438:	f94017e8 	ldr	x8, [sp, #40]
    4000643c:	f9008be8 	str	x8, [sp, #272]
    40006440:	f90077e8 	str	x8, [sp, #232]
    40006444:	f9003fe8 	str	x8, [sp, #120]
    40006448:	9100a3e9 	add	x9, sp, #0x28
    4000644c:	f9008fe9 	str	x9, [sp, #280]
        unsafe { &*self.as_ptr().cast_const() }
    40006450:	f94017e9 	ldr	x9, [sp, #40]
            let hole_sz = unsafe { hole.as_ref().size };
    40006454:	f940012a 	ldr	x10, [x9]
    40006458:	f90043ea 	str	x10, [sp, #128]
            let next_u8 = next.as_ptr().cast::<u8>();
    4000645c:	f9402be9 	ldr	x9, [sp, #80]
    40006460:	f90087e9 	str	x9, [sp, #264]
    40006464:	f90073e9 	str	x9, [sp, #224]
    40006468:	f90047e9 	str	x9, [sp, #136]
    4000646c:	f90063e8 	str	x8, [sp, #192]
    40006470:	f90067ea 	str	x10, [sp, #200]
        self.wrapping_offset(count as isize)
    40006474:	f9006bea 	str	x10, [sp, #208]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40006478:	8b0a0108 	add	x8, x8, x10
    4000647c:	f9006fe8 	str	x8, [sp, #216]
    40006480:	f9406fe8 	ldr	x8, [sp, #216]
            let end = hole_u8.wrapping_add(hole_sz);
    40006484:	f9004be8 	str	x8, [sp, #144]
            let touching = end == next_u8;
    40006488:	eb090108 	subs	x8, x8, x9
    4000648c:	1a9f17e8 	cset	w8, eq	// eq = none
    40006490:	39027fe8 	strb	w8, [sp, #159]
            if touching {
    40006494:	54000140 	b.eq	400064bc <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x11c>  // b.none
    40006498:	14000005 	b	400064ac <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x10c>
    4000649c:	f94013e1 	ldr	x1, [sp, #32]
                check_merge_top(hole, top);
    400064a0:	f94017e0 	ldr	x0, [sp, #40]
    400064a4:	97fffbef 	bl	40005460 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE>
    400064a8:	17ffffdd 	b	4000641c <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x7c>
                hole = next;
    400064ac:	f9402be8 	ldr	x8, [sp, #80]
    400064b0:	f90017e8 	str	x8, [sp, #40]
            if touching {
    400064b4:	14000001 	b	400064b8 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x118>
        for _ in 0..max {
    400064b8:	17ffffc8 	b	400063d8 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x38>
    400064bc:	910143e8 	add	x8, sp, #0x50
    400064c0:	f9007fe8 	str	x8, [sp, #248]
        unsafe { &mut *self.as_ptr() }
    400064c4:	f9402be0 	ldr	x0, [sp, #80]
                    let next_mut = next.as_mut();
    400064c8:	f90053e0 	str	x0, [sp, #160]
                    next_sz = next_mut.size;
    400064cc:	f8408408 	ldr	x8, [x0], #8
    400064d0:	f90007e8 	str	x8, [sp, #8]
    400064d4:	f90057e8 	str	x8, [sp, #168]
                    next_next = next_mut.next.take();
    400064d8:	97fff8e6 	bl	40004870 <_ZN4core6option15Option$LT$T$GT$4take17h4cbffccbda50ffdeE>
    400064dc:	f94007e9 	ldr	x9, [sp, #8]
    400064e0:	f9005be0 	str	x0, [sp, #176]
    400064e4:	9100a3e8 	add	x8, sp, #0x28
    400064e8:	f9007be8 	str	x8, [sp, #240]
    400064ec:	f94017e8 	ldr	x8, [sp, #40]
    400064f0:	aa0803ea 	mov	x10, x8
    400064f4:	f9000bea 	str	x10, [sp, #16]
                    let hole_mut = hole.as_mut();
    400064f8:	f9005fe8 	str	x8, [sp, #184]
                    hole_mut.next = next_next;
    400064fc:	f9000500 	str	x0, [x8, #8]
                    hole_mut.size += next_sz;
    40006500:	f9400108 	ldr	x8, [x8]
    40006504:	ab090109 	adds	x9, x8, x9
    40006508:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    4000650c:	f9000fe9 	str	x9, [sp, #24]
    40006510:	370000c8 	tbnz	w8, #0, 40006528 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x188>
    40006514:	14000001 	b	40006518 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x178>
    40006518:	f9400fe8 	ldr	x8, [sp, #24]
    4000651c:	f9400be9 	ldr	x9, [sp, #16]
    40006520:	f9000128 	str	x8, [x9]
            if touching {
    40006524:	17ffffe5 	b	400064b8 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE+0x118>
                    hole_mut.size += next_sz;
    40006528:	d503201f 	nop
    4000652c:	100295e0 	adr	x0, 4000b7e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1c20>
    40006530:	94000a6e 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
	...

0000000040006540 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E>:
}

/// Frees the allocation given by `(addr, size)`. It starts at the given hole and walks the list to
/// find the correct place (the list is sorted by address).
fn deallocate(list: &mut HoleList, addr: *mut u8, size: usize) {
    40006540:	d10683ff 	sub	sp, sp, #0x1a0
    40006544:	a9197bfd 	stp	x29, x30, [sp, #400]
    40006548:	f9000fe2 	str	x2, [sp, #24]
    4000654c:	aa0103e8 	mov	x8, x1
    40006550:	f9400fe1 	ldr	x1, [sp, #24]
    40006554:	f90013e8 	str	x8, [sp, #32]
    40006558:	aa0003e8 	mov	x8, x0
    4000655c:	f94013e0 	ldr	x0, [sp, #32]
    40006560:	f90017e8 	str	x8, [sp, #40]
    40006564:	f900b3e8 	str	x8, [sp, #352]
    40006568:	f900b7e0 	str	x0, [sp, #360]
    4000656c:	f900bbe1 	str	x1, [sp, #368]
    // Start off by just making this allocation a hole where it stands.
    // We'll attempt to merge it with other nodes once we figure out where
    // it should live
    let hole = unsafe { make_hole(addr, size) };
    40006570:	97fffe40 	bl	40005e70 <_ZN21linked_list_allocator4hole9make_hole17h0bac6b6e9056bc80E>
    40006574:	aa0003e8 	mov	x8, x0
    40006578:	f94017e0 	ldr	x0, [sp, #40]
    4000657c:	aa0803e1 	mov	x1, x8
    40006580:	f9001be1 	str	x1, [sp, #48]
    40006584:	f900bfe8 	str	x8, [sp, #376]
    40006588:	9100e3e8 	add	x8, sp, #0x38

    // Now, try to get a cursor to the list - this only works if we have at least
    // one non-"dummy" hole in the list
    let cursor = if let Some(cursor) = list.cursor() {
    4000658c:	97fffc69 	bl	40005730 <_ZN21linked_list_allocator4hole8HoleList6cursor17he1e79546c8c4b0eeE>
    40006590:	f9401fe8 	ldr	x8, [sp, #56]
    40006594:	b4000228 	cbz	x8, 400065d8 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x98>
    40006598:	14000001 	b	4000659c <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x5c>
    4000659c:	f9401be1 	ldr	x1, [sp, #48]
    400065a0:	f94017e8 	ldr	x8, [sp, #40]
    400065a4:	f9401fe9 	ldr	x9, [sp, #56]
    400065a8:	f94023ea 	ldr	x10, [sp, #64]
    400065ac:	f94027eb 	ldr	x11, [sp, #72]
    400065b0:	f90033eb 	str	x11, [sp, #96]
    400065b4:	f9002fea 	str	x10, [sp, #88]
    400065b8:	f9002be9 	str	x9, [sp, #80]
    // First, check if we can just insert this node at the top of the list. If the
    // insertion succeeded, then our cursor now points to the NEW node, behind the
    // previous location the cursor was pointing to.
    //
    // Otherwise, our cursor will point at the current non-"dummy" head of the list
    let (cursor, n) = match cursor.try_insert_back(hole, list.bottom) {
    400065bc:	f9400902 	ldr	x2, [x8, #16]
    400065c0:	9102a3e8 	add	x8, sp, #0xa8
    400065c4:	910143e0 	add	x0, sp, #0x50
    400065c8:	97fffe6a 	bl	40005f70 <_ZN21linked_list_allocator4hole6Cursor15try_insert_back17h04f43fa1150e863fE>
    400065cc:	b940abe8 	ldr	w8, [sp, #168]
    400065d0:	37000228 	tbnz	w8, #0, 40006614 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0xd4>
    400065d4:	14000017 	b	40006630 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0xf0>
    400065d8:	f94017e8 	ldr	x8, [sp, #40]
    400065dc:	f9401be0 	ldr	x0, [sp, #48]
        let hole = check_merge_bottom(hole, list.bottom);
    400065e0:	f9400901 	ldr	x1, [x8, #16]
    400065e4:	97fffbf7 	bl	400055c0 <_ZN21linked_list_allocator4hole18check_merge_bottom17h12c163f6e148e3a7E>
    400065e8:	f94017e8 	ldr	x8, [sp, #40]
    400065ec:	f9000be0 	str	x0, [sp, #16]
    400065f0:	f900c7e0 	str	x0, [sp, #392]
        check_merge_top(hole, list.top);
    400065f4:	f9400d01 	ldr	x1, [x8, #24]
    400065f8:	97fffb9a 	bl	40005460 <_ZN21linked_list_allocator4hole15check_merge_top17hd7399b8e1abcdd7cE>
    400065fc:	f9400be0 	ldr	x0, [sp, #16]
    40006600:	f94017e9 	ldr	x9, [sp, #40]
        list.first.next = Some(hole);
    40006604:	f90037e0 	str	x0, [sp, #104]
    40006608:	f94037e8 	ldr	x8, [sp, #104]
    4000660c:	f9000528 	str	x8, [x9, #8]
    };

    // We now need to merge up to two times to combine the current node with the next
    // two nodes.
    cursor.try_merge_next_n(n);
}
    40006610:	14000052 	b	40006758 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x218>
        Err(mut cursor) => {
    40006614:	f9405be8 	ldr	x8, [sp, #176]
    40006618:	f9405fe9 	ldr	x9, [sp, #184]
    4000661c:	f94063ea 	ldr	x10, [sp, #192]
    40006620:	f9007bea 	str	x10, [sp, #240]
    40006624:	f90077e9 	str	x9, [sp, #232]
    40006628:	f90073e8 	str	x8, [sp, #224]
            while let Err(()) = cursor.try_insert_after(hole) {
    4000662c:	1400001b 	b	40006698 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x158>
        Ok(cursor) => {
    40006630:	f9405be8 	ldr	x8, [sp, #176]
    40006634:	f9405fe9 	ldr	x9, [sp, #184]
    40006638:	f94063ea 	ldr	x10, [sp, #192]
    4000663c:	f9006fea 	str	x10, [sp, #216]
    40006640:	f9006be9 	str	x9, [sp, #208]
    40006644:	f90067e8 	str	x8, [sp, #200]
            (cursor, 1)
    40006648:	f94067e8 	ldr	x8, [sp, #200]
    4000664c:	f9406be9 	ldr	x9, [sp, #208]
    40006650:	f9406fea 	ldr	x10, [sp, #216]
    40006654:	f9004fea 	str	x10, [sp, #152]
    40006658:	f9004be9 	str	x9, [sp, #144]
    4000665c:	f90047e8 	str	x8, [sp, #136]
    40006660:	52800028 	mov	w8, #0x1                   	// #1
    40006664:	f90053e8 	str	x8, [sp, #160]
        }
    40006668:	14000001 	b	4000666c <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x12c>
    let (cursor, n) = match cursor.try_insert_back(hole, list.bottom) {
    4000666c:	f94047e8 	ldr	x8, [sp, #136]
    40006670:	f9404be9 	ldr	x9, [sp, #144]
    40006674:	f9404fea 	ldr	x10, [sp, #152]
    40006678:	f90043ea 	str	x10, [sp, #128]
    4000667c:	f9003fe9 	str	x9, [sp, #120]
    40006680:	f9003be8 	str	x8, [sp, #112]
    40006684:	f94053e1 	ldr	x1, [sp, #160]
    40006688:	f900c3e1 	str	x1, [sp, #384]
    4000668c:	9101c3e0 	add	x0, sp, #0x70
    cursor.try_merge_next_n(n);
    40006690:	97ffff44 	bl	400063a0 <_ZN21linked_list_allocator4hole6Cursor16try_merge_next_n17h06dedaf44821f65aE>
    40006694:	14000031 	b	40006758 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x218>
    40006698:	f9401be1 	ldr	x1, [sp, #48]
    4000669c:	910383e0 	add	x0, sp, #0xe0
            while let Err(()) = cursor.try_insert_after(hole) {
    400066a0:	97fffeb4 	bl	40006170 <_ZN21linked_list_allocator4hole6Cursor16try_insert_after17h48a6b6cf1889c8c7E>
    400066a4:	3903ffe0 	strb	w0, [sp, #255]
    400066a8:	3943ffe8 	ldrb	w8, [sp, #255]
    400066ac:	36000388 	tbz	w8, #0, 4000671c <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x1dc>
    400066b0:	14000001 	b	400066b4 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x174>
                cursor = cursor
    400066b4:	f94073e8 	ldr	x8, [sp, #224]
    400066b8:	f94077e9 	ldr	x9, [sp, #232]
    400066bc:	f9407bea 	ldr	x10, [sp, #240]
    400066c0:	f900a3ea 	str	x10, [sp, #320]
    400066c4:	f9009fe9 	str	x9, [sp, #312]
    400066c8:	f9009be8 	str	x8, [sp, #304]
    400066cc:	910463e8 	add	x8, sp, #0x118
    400066d0:	f90007e8 	str	x8, [sp, #8]
    400066d4:	9104c3e0 	add	x0, sp, #0x130
    400066d8:	97fff9e6 	bl	40004e70 <_ZN21linked_list_allocator4hole6Cursor4next17h79d83ad6cd44f065E>
    400066dc:	f94007e0 	ldr	x0, [sp, #8]
    400066e0:	d503201f 	nop
    400066e4:	100288e1 	adr	x1, 4000b800 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1c38>
    400066e8:	d503201f 	nop
    400066ec:	10028a63 	adr	x3, 4000b838 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1c70>
    400066f0:	528006e8 	mov	w8, #0x37                  	// #55
    400066f4:	2a0803e2 	mov	w2, w8
    400066f8:	910403e8 	add	x8, sp, #0x100
    400066fc:	97fff8a5 	bl	40004990 <_ZN4core6option15Option$LT$T$GT$6expect17h8abef4a12cf226f6E>
    40006700:	f94083e8 	ldr	x8, [sp, #256]
    40006704:	f94087e9 	ldr	x9, [sp, #264]
    40006708:	f9408bea 	ldr	x10, [sp, #272]
    4000670c:	f9007bea 	str	x10, [sp, #240]
    40006710:	f90077e9 	str	x9, [sp, #232]
    40006714:	f90073e8 	str	x8, [sp, #224]
            while let Err(()) = cursor.try_insert_after(hole) {
    40006718:	17ffffe0 	b	40006698 <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x158>
            (cursor, 2)
    4000671c:	f94073e8 	ldr	x8, [sp, #224]
    40006720:	f94077e9 	ldr	x9, [sp, #232]
    40006724:	f9407bea 	ldr	x10, [sp, #240]
    40006728:	f900afea 	str	x10, [sp, #344]
    4000672c:	f900abe9 	str	x9, [sp, #336]
    40006730:	f900a7e8 	str	x8, [sp, #328]
    40006734:	f940a7e8 	ldr	x8, [sp, #328]
    40006738:	f940abe9 	ldr	x9, [sp, #336]
    4000673c:	f940afea 	ldr	x10, [sp, #344]
    40006740:	f9004fea 	str	x10, [sp, #152]
    40006744:	f9004be9 	str	x9, [sp, #144]
    40006748:	f90047e8 	str	x8, [sp, #136]
    4000674c:	52800048 	mov	w8, #0x2                   	// #2
    40006750:	f90053e8 	str	x8, [sp, #160]
        }
    40006754:	17ffffc6 	b	4000666c <_ZN21linked_list_allocator4hole10deallocate17h48b5d15fef69b778E+0x12c>
}
    40006758:	a9597bfd 	ldp	x29, x30, [sp, #400]
    4000675c:	910683ff 	add	sp, sp, #0x1a0
    40006760:	d65f03c0 	ret
	...

0000000040006770 <_ZN21linked_list_allocator4Heap4init17h1d7f8382229cd8e6E>:
    /// `[heap_bottom, heap_bottom + heap_size)` range must not be used for anything else.
    /// This function is unsafe because it can cause undefined behavior if the given address
    /// is invalid.
    ///
    /// The provided memory range must be valid for the `'static` lifetime.
    pub unsafe fn init(&mut self, heap_bottom: *mut u8, heap_size: usize) {
    40006770:	d101c3ff 	sub	sp, sp, #0x70
    40006774:	f90033fe 	str	x30, [sp, #96]
    40006778:	f90003e2 	str	x2, [sp]
    4000677c:	aa0103e8 	mov	x8, x1
    40006780:	f94003e1 	ldr	x1, [sp]
    40006784:	f90007e8 	str	x8, [sp, #8]
    40006788:	aa0003e8 	mov	x8, x0
    4000678c:	f94007e0 	ldr	x0, [sp, #8]
    40006790:	f90027e8 	str	x8, [sp, #72]
    40006794:	f9002be0 	str	x0, [sp, #80]
    40006798:	f9002fe1 	str	x1, [sp, #88]
    4000679c:	aa1f03e9 	mov	x9, xzr
        self.used = 0;
    400067a0:	f8008509 	str	x9, [x8], #8
    400067a4:	f9000be8 	str	x8, [sp, #16]
    400067a8:	910083e8 	add	x8, sp, #0x20
    400067ac:	f9000fe8 	str	x8, [sp, #24]
        self.holes = HoleList::new(heap_bottom, heap_size);
    400067b0:	97fffc10 	bl	400057f0 <_ZN21linked_list_allocator4hole8HoleList3new17hc5a17d296b740000E>
    400067b4:	f9400be0 	ldr	x0, [sp, #16]
    400067b8:	f9400fe1 	ldr	x1, [sp, #24]
    400067bc:	52800508 	mov	w8, #0x28                  	// #40
    400067c0:	2a0803e2 	mov	w2, w8
    400067c4:	94000c05 	bl	400097d8 <memcpy>
    }
    400067c8:	f94033fe 	ldr	x30, [sp, #96]
    400067cc:	9101c3ff 	add	sp, sp, #0x70
    400067d0:	d65f03c0 	ret
	...

00000000400067e0 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E>:
    /// reasonably fast for small allocations.
    //
    // NOTE: We could probably replace this with an `Option` instead of a `Result` in a later
    // release to remove this clippy warning
    #[allow(clippy::result_unit_err)]
    pub fn allocate_first_fit(&mut self, layout: Layout) -> Result<NonNull<u8>, ()> {
    400067e0:	d10203ff 	sub	sp, sp, #0x80
    400067e4:	f9003bfe 	str	x30, [sp, #112]
    400067e8:	f9000be0 	str	x0, [sp, #16]
    400067ec:	f90027e0 	str	x0, [sp, #72]
    400067f0:	f9002be1 	str	x1, [sp, #80]
    400067f4:	f9002fe2 	str	x2, [sp, #88]
        match self.holes.allocate_first_fit(layout) {
    400067f8:	91002000 	add	x0, x0, #0x8
    400067fc:	910083e8 	add	x8, sp, #0x20
    40006800:	97fffcdc 	bl	40005b70 <_ZN21linked_list_allocator4hole8HoleList18allocate_first_fit17h988b43acedb96d14E>
    40006804:	f94017e8 	ldr	x8, [sp, #40]
    40006808:	b50000a8 	cbnz	x8, 4000681c <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0x3c>
    4000680c:	14000001 	b	40006810 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0x30>
    40006810:	aa1f03e8 	mov	x8, xzr
            Ok((ptr, aligned_layout)) => {
                self.used += aligned_layout.size();
                Ok(ptr)
            }
            Err(err) => Err(err),
    40006814:	f9000fe8 	str	x8, [sp, #24]
    40006818:	1400001b 	b	40006884 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0xa4>
            Ok((ptr, aligned_layout)) => {
    4000681c:	f94013e8 	ldr	x8, [sp, #32]
    40006820:	aa0803e9 	mov	x9, x8
    40006824:	f90003e9 	str	x9, [sp]
    40006828:	f90037e8 	str	x8, [sp, #104]
    4000682c:	f94017e9 	ldr	x9, [sp, #40]
    40006830:	f9401be8 	ldr	x8, [sp, #48]
    40006834:	f9001fe9 	str	x9, [sp, #56]
    40006838:	f90023e8 	str	x8, [sp, #64]
    4000683c:	9100e3e0 	add	x0, sp, #0x38
                self.used += aligned_layout.size();
    40006840:	97fff7dc 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    40006844:	f9400be8 	ldr	x8, [sp, #16]
    40006848:	f9400108 	ldr	x8, [x8]
    4000684c:	ab000109 	adds	x9, x8, x0
    40006850:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    40006854:	f90007e9 	str	x9, [sp, #8]
    40006858:	37000108 	tbnz	w8, #0, 40006878 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0x98>
    4000685c:	14000001 	b	40006860 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0x80>
    40006860:	f94003e8 	ldr	x8, [sp]
    40006864:	f94007e9 	ldr	x9, [sp, #8]
    40006868:	f9400bea 	ldr	x10, [sp, #16]
    4000686c:	f9000149 	str	x9, [x10]
                Ok(ptr)
    40006870:	f9000fe8 	str	x8, [sp, #24]
            }
    40006874:	14000004 	b	40006884 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E+0xa4>
                self.used += aligned_layout.size();
    40006878:	d503201f 	nop
    4000687c:	100281e0 	adr	x0, 4000b8b8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1cf0>
    40006880:	9400099a 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
        }
    }
    40006884:	f9400fe0 	ldr	x0, [sp, #24]
    40006888:	f9403bfe 	ldr	x30, [sp, #112]
    4000688c:	910203ff 	add	sp, sp, #0x80
    40006890:	d65f03c0 	ret
	...

00000000400068a0 <_ZN21linked_list_allocator4Heap10deallocate17h1810af9eb65d489aE>:
    ///
    /// # Safety
    ///
    /// `ptr` must be a pointer returned by a call to the [`allocate_first_fit`] function with
    /// identical layout. Undefined behavior may occur for invalid arguments.
    pub unsafe fn deallocate(&mut self, ptr: NonNull<u8>, layout: Layout) {
    400068a0:	d10143ff 	sub	sp, sp, #0x50
    400068a4:	f90023fe 	str	x30, [sp, #64]
    400068a8:	f90003e0 	str	x0, [sp]
    400068ac:	f90013e0 	str	x0, [sp, #32]
    400068b0:	f90017e1 	str	x1, [sp, #40]
    400068b4:	f9001be2 	str	x2, [sp, #48]
    400068b8:	f9001fe3 	str	x3, [sp, #56]
        self.used -= self.holes.deallocate(ptr, layout).size();
    400068bc:	91002000 	add	x0, x0, #0x8
    400068c0:	97fffd3c 	bl	40005db0 <_ZN21linked_list_allocator4hole8HoleList10deallocate17h8ba191b999c8c650E>
    400068c4:	f9000be0 	str	x0, [sp, #16]
    400068c8:	f9000fe1 	str	x1, [sp, #24]
    400068cc:	910043e0 	add	x0, sp, #0x10
    400068d0:	97fff7b8 	bl	400047b0 <_ZN4core5alloc6layout6Layout4size17h142a672f273c6ca3E>
    400068d4:	f94003e8 	ldr	x8, [sp]
    400068d8:	f9400108 	ldr	x8, [x8]
    400068dc:	eb000108 	subs	x8, x8, x0
    400068e0:	f90007e8 	str	x8, [sp, #8]
    400068e4:	54000103 	b.cc	40006904 <_ZN21linked_list_allocator4Heap10deallocate17h1810af9eb65d489aE+0x64>  // b.lo, b.ul, b.last
    400068e8:	14000001 	b	400068ec <_ZN21linked_list_allocator4Heap10deallocate17h1810af9eb65d489aE+0x4c>
    400068ec:	f94007e8 	ldr	x8, [sp, #8]
    400068f0:	f94003e9 	ldr	x9, [sp]
    400068f4:	f9000128 	str	x8, [x9]
    }
    400068f8:	f94023fe 	ldr	x30, [sp, #64]
    400068fc:	910143ff 	add	sp, sp, #0x50
    40006900:	d65f03c0 	ret
        self.used -= self.holes.deallocate(ptr, layout).size();
    40006904:	d503201f 	nop
    40006908:	10027e40 	adr	x0, 4000b8d0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d08>
    4000690c:	94000984 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>

0000000040006910 <_ZN77_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..ops..deref..Deref$GT$5deref17h6e9cf018ae81c0b0E>:

#[cfg(feature = "use_spin")]
impl Deref for LockedHeap {
    type Target = Spinlock<Heap>;

    fn deref(&self) -> &Spinlock<Heap> {
    40006910:	d10043ff 	sub	sp, sp, #0x10
    40006914:	f90007e0 	str	x0, [sp, #8]
        &self.0
    }
    40006918:	910043ff 	add	sp, sp, #0x10
    4000691c:	d65f03c0 	ret

0000000040006920 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17hb663306ab11275a8E>:
}

#[cfg(feature = "use_spin")]
unsafe impl GlobalAlloc for LockedHeap {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
    40006920:	d10143ff 	sub	sp, sp, #0x50
    40006924:	f90023fe 	str	x30, [sp, #64]
    40006928:	f90007e2 	str	x2, [sp, #8]
    4000692c:	f90003e1 	str	x1, [sp]
    40006930:	f90017e0 	str	x0, [sp, #40]
    40006934:	f9001be1 	str	x1, [sp, #48]
    40006938:	f9001fe2 	str	x2, [sp, #56]
        self.0
    4000693c:	97fff941 	bl	40004e40 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17hb66dd1c03746e1feE>
    40006940:	f90013e0 	str	x0, [sp, #32]
    40006944:	910083e0 	add	x0, sp, #0x20
    40006948:	f9000be0 	str	x0, [sp, #16]
    4000694c:	97fff90d 	bl	40004d80 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3026557fc2af9b6aE>
    40006950:	f94003e1 	ldr	x1, [sp]
    40006954:	f94007e2 	ldr	x2, [sp, #8]
    40006958:	97ffffa2 	bl	400067e0 <_ZN21linked_list_allocator4Heap18allocate_first_fit17h8ac4b87fdd38fd01E>
    4000695c:	97fff84d 	bl	40004a90 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hfb096f6bebe5dc5fE>
    40006960:	aa1f03e1 	mov	x1, xzr
    40006964:	97fff827 	bl	40004a00 <_ZN4core6option15Option$LT$T$GT$6map_or17hb5d971004623dcbeE>
    40006968:	aa0003e1 	mov	x1, x0
    4000696c:	f9400be0 	ldr	x0, [sp, #16]
    40006970:	f9000fe1 	str	x1, [sp, #24]
            .lock()
            .allocate_first_fit(layout)
            .ok()
            .map_or(core::ptr::null_mut(), |allocation| allocation.as_ptr())
    }
    40006974:	97fff5fb 	bl	40004160 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17h4c49ed86627f65aaE>
    40006978:	f9400fe0 	ldr	x0, [sp, #24]
    4000697c:	f94023fe 	ldr	x30, [sp, #64]
    40006980:	910143ff 	add	sp, sp, #0x50
    40006984:	d65f03c0 	ret
	...

0000000040006990 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc28_$u7b$$u7b$closure$u7d$$u7d$17h4b810b97a51d00a8E>:
            .map_or(core::ptr::null_mut(), |allocation| allocation.as_ptr())
    40006990:	d10083ff 	sub	sp, sp, #0x20
    40006994:	f9000be0 	str	x0, [sp, #16]
    40006998:	f9000fe0 	str	x0, [sp, #24]
    4000699c:	910083ff 	add	sp, sp, #0x20
    400069a0:	d65f03c0 	ret
	...

00000000400069b0 <_ZN86_$LT$linked_list_allocator..LockedHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17h420aa5dfb9add41cE>:

    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
    400069b0:	d10183ff 	sub	sp, sp, #0x60
    400069b4:	f9002bfe 	str	x30, [sp, #80]
    400069b8:	f9000be3 	str	x3, [sp, #16]
    400069bc:	f90007e2 	str	x2, [sp, #8]
    400069c0:	f90003e1 	str	x1, [sp]
    400069c4:	f9001be0 	str	x0, [sp, #48]
    400069c8:	f9001fe1 	str	x1, [sp, #56]
    400069cc:	f90023e2 	str	x2, [sp, #64]
    400069d0:	f90027e3 	str	x3, [sp, #72]
        self.0
    400069d4:	97fff91b 	bl	40004e40 <_ZN8lock_api5mutex18Mutex$LT$R$C$T$GT$4lock17hb66dd1c03746e1feE>
    400069d8:	f90017e0 	str	x0, [sp, #40]
    400069dc:	9100a3e0 	add	x0, sp, #0x28
    400069e0:	f90013e0 	str	x0, [sp, #32]
    400069e4:	97fff8e7 	bl	40004d80 <_ZN87_$LT$lock_api..mutex..MutexGuard$LT$R$C$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3026557fc2af9b6aE>
    400069e8:	aa0003e1 	mov	x1, x0
    400069ec:	f94003e0 	ldr	x0, [sp]
    400069f0:	f9000fe1 	str	x1, [sp, #24]
            .lock()
            .deallocate(NonNull::new_unchecked(ptr), layout)
    400069f4:	97fff6db 	bl	40004560 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h03c29f654dbe1ab0E>
    400069f8:	f94007e2 	ldr	x2, [sp, #8]
    400069fc:	f9400be3 	ldr	x3, [sp, #16]
    40006a00:	aa0003e1 	mov	x1, x0
    40006a04:	f9400fe0 	ldr	x0, [sp, #24]
        self.0
    40006a08:	97ffffa6 	bl	400068a0 <_ZN21linked_list_allocator4Heap10deallocate17h1810af9eb65d489aE>
    40006a0c:	f94013e0 	ldr	x0, [sp, #32]
    }
    40006a10:	97fff5d4 	bl	40004160 <_ZN4core3ptr121drop_in_place$LT$lock_api..mutex..MutexGuard$LT$spinning_top..spinlock..RawSpinlock$C$linked_list_allocator..Heap$GT$$GT$17h4c49ed86627f65aaE>
    40006a14:	f9402bfe 	ldr	x30, [sp, #80]
    40006a18:	910183ff 	add	sp, sp, #0x60
    40006a1c:	d65f03c0 	ret

0000000040006a20 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E>:
}

/// Align downwards. Returns the greatest x with alignment `align`
/// so that x <= addr. The alignment must be a power of 2.
pub fn align_down_size(size: usize, align: usize) -> usize {
    40006a20:	d10103ff 	sub	sp, sp, #0x40
    40006a24:	f90007e1 	str	x1, [sp, #8]
    40006a28:	f9000be0 	str	x0, [sp, #16]
    40006a2c:	f90013e0 	str	x0, [sp, #32]
    40006a30:	f90017e1 	str	x1, [sp, #40]
    40006a34:	f9001be1 	str	x1, [sp, #48]
    40006a38:	d341fc28 	lsr	x8, x1, #1
    40006a3c:	9200f108 	and	x8, x8, #0x5555555555555555
    40006a40:	eb080029 	subs	x9, x1, x8
    40006a44:	9200e528 	and	x8, x9, #0x3333333333333333
    40006a48:	d342fd29 	lsr	x9, x9, #2
    40006a4c:	9200e529 	and	x9, x9, #0x3333333333333333
    40006a50:	8b090108 	add	x8, x8, x9
    40006a54:	8b481108 	add	x8, x8, x8, lsr #4
    40006a58:	9200cd08 	and	x8, x8, #0xf0f0f0f0f0f0f0f
    40006a5c:	b200c3e9 	mov	x9, #0x101010101010101     	// #72340172838076673
    40006a60:	9b097d08 	mul	x8, x8, x9
    40006a64:	d378fd08 	lsr	x8, x8, #56
    40006a68:	b9003fe8 	str	w8, [sp, #60]
    40006a6c:	b9403fe8 	ldr	w8, [sp, #60]
    if align.is_power_of_two() {
    40006a70:	71000508 	subs	w8, w8, #0x1
    40006a74:	540000a0 	b.eq	40006a88 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0x68>  // b.none
    40006a78:	14000001 	b	40006a7c <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0x5c>
    40006a7c:	f94007e8 	ldr	x8, [sp, #8]
        size & !(align - 1)
    } else if align == 0 {
    40006a80:	b40000e8 	cbz	x8, 40006a9c <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0x7c>
    40006a84:	14000009 	b	40006aa8 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0x88>
    40006a88:	f94007e8 	ldr	x8, [sp, #8]
        size & !(align - 1)
    40006a8c:	f1000509 	subs	x9, x8, #0x1
    40006a90:	f90003e9 	str	x9, [sp]
    40006a94:	b4000288 	cbz	x8, 40006ae4 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0xc4>
    40006a98:	1400000e 	b	40006ad0 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0xb0>
    40006a9c:	f9400be8 	ldr	x8, [sp, #16]
        size
    40006aa0:	f9000fe8 	str	x8, [sp, #24]
    if align.is_power_of_two() {
    40006aa4:	14000008 	b	40006ac4 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0xa4>
    } else {
        panic!("`align` must be a power of 2");
    40006aa8:	d503201f 	nop
    40006aac:	100271e0 	adr	x0, 4000b8e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d20>
    40006ab0:	d503201f 	nop
    40006ab4:	100272a2 	adr	x2, 4000b908 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d40>
    40006ab8:	52800388 	mov	w8, #0x1c                  	// #28
    40006abc:	2a0803e1 	mov	w1, w8
    40006ac0:	94000389 	bl	400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>
    }
}
    40006ac4:	f9400fe0 	ldr	x0, [sp, #24]
    40006ac8:	910103ff 	add	sp, sp, #0x40
    40006acc:	d65f03c0 	ret
    40006ad0:	f9400be8 	ldr	x8, [sp, #16]
    40006ad4:	f94003e9 	ldr	x9, [sp]
        size & !(align - 1)
    40006ad8:	8a290108 	bic	x8, x8, x9
    40006adc:	f9000fe8 	str	x8, [sp, #24]
    if align.is_power_of_two() {
    40006ae0:	17fffff9 	b	40006ac4 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E+0xa4>
        size & !(align - 1)
    40006ae4:	d503201f 	nop
    40006ae8:	100271c0 	adr	x0, 4000b920 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d58>
    40006aec:	9400090c 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>

0000000040006af0 <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E>:

pub fn align_up_size(size: usize, align: usize) -> usize {
    40006af0:	d10103ff 	sub	sp, sp, #0x40
    40006af4:	f9001bfe 	str	x30, [sp, #48]
    40006af8:	f9000be1 	str	x1, [sp, #16]
    40006afc:	f90013e0 	str	x0, [sp, #32]
    40006b00:	f90017e1 	str	x1, [sp, #40]
    align_down_size(size + align - 1, align)
    40006b04:	ab010009 	adds	x9, x0, x1
    40006b08:	1a9f37e8 	cset	w8, cs	// cs = hs, nlast
    40006b0c:	f9000fe9 	str	x9, [sp, #24]
    40006b10:	370000e8 	tbnz	w8, #0, 40006b2c <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E+0x3c>
    40006b14:	14000001 	b	40006b18 <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E+0x28>
    40006b18:	f9400fe8 	ldr	x8, [sp, #24]
    40006b1c:	f1000500 	subs	x0, x8, #0x1
    40006b20:	f90007e0 	str	x0, [sp, #8]
    40006b24:	b4000168 	cbz	x8, 40006b50 <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E+0x60>
    40006b28:	14000004 	b	40006b38 <_ZN21linked_list_allocator13align_up_size17hebdd4d63fc34d095E+0x48>
    40006b2c:	d503201f 	nop
    40006b30:	10027040 	adr	x0, 4000b938 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d70>
    40006b34:	940008ed 	bl	40008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>
    40006b38:	f9400be1 	ldr	x1, [sp, #16]
    40006b3c:	f94007e0 	ldr	x0, [sp, #8]
    40006b40:	97ffffb8 	bl	40006a20 <_ZN21linked_list_allocator15align_down_size17hea2dd0cf196bbf30E>
}
    40006b44:	f9401bfe 	ldr	x30, [sp, #48]
    40006b48:	910103ff 	add	sp, sp, #0x40
    40006b4c:	d65f03c0 	ret
    align_down_size(size + align - 1, align)
    40006b50:	d503201f 	nop
    40006b54:	10026f20 	adr	x0, 4000b938 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1d70>
    40006b58:	940008f1 	bl	40008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>
    40006b5c:	00000000 	udf	#0

0000000040006b60 <_ZN21linked_list_allocator8align_up17hd1c79338025b4907E>:

/// Align upwards. Returns the smallest x with alignment `align`
/// so that x >= addr. The alignment must be a power of 2.
pub fn align_up(addr: *mut u8, align: usize) -> *mut u8 {
    40006b60:	d10143ff 	sub	sp, sp, #0x50
    40006b64:	f90023fe 	str	x30, [sp, #64]
    40006b68:	f90003e0 	str	x0, [sp]
    40006b6c:	f90007e0 	str	x0, [sp, #8]
    40006b70:	f9000be1 	str	x1, [sp, #16]
    let offset = addr.align_offset(align);
    40006b74:	97fff647 	bl	40004490 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12align_offset17h7d32ec1bd5a83319E>
    40006b78:	aa0003e8 	mov	x8, x0
    40006b7c:	f94003e0 	ldr	x0, [sp]
    40006b80:	f9000fe8 	str	x8, [sp, #24]
    40006b84:	f90013e0 	str	x0, [sp, #32]
    40006b88:	f90017e8 	str	x8, [sp, #40]
        self.wrapping_offset(count as isize)
    40006b8c:	f9001be8 	str	x8, [sp, #48]
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    40006b90:	8b080008 	add	x8, x0, x8
    40006b94:	f9001fe8 	str	x8, [sp, #56]
    40006b98:	f9401fe0 	ldr	x0, [sp, #56]
    addr.wrapping_add(offset)
}
    40006b9c:	f94023fe 	ldr	x30, [sp, #64]
    40006ba0:	910143ff 	add	sp, sp, #0x50
    40006ba4:	d65f03c0 	ret
	...

0000000040006bb0 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E>:
    #[inline]
    #[stable(feature = "extended_compare_and_swap", since = "1.10.0")]
    #[doc(alias = "compare_and_swap")]
    #[cfg(target_has_atomic = "8")]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    pub fn compare_exchange_weak(
    40006bb0:	d10143ff 	sub	sp, sp, #0x50
    40006bb4:	f90023fe 	str	x30, [sp, #64]
    40006bb8:	f90007e0 	str	x0, [sp, #8]
    40006bbc:	390053e1 	strb	w1, [sp, #20]
    40006bc0:	390057e2 	strb	w2, [sp, #21]
    40006bc4:	39005be3 	strb	w3, [sp, #22]
    40006bc8:	39005fe4 	strb	w4, [sp, #23]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40006bcc:	d503201f 	nop
    40006bd0:	10026dc8 	adr	x8, 4000b988 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1dc0>
    40006bd4:	f9000fe8 	str	x8, [sp, #24]
    40006bd8:	d503201f 	nop
    40006bdc:	10026fe8 	adr	x8, 4000b9d8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e10>
    40006be0:	f90013e8 	str	x8, [sp, #32]
    40006be4:	2a1f03e8 	mov	w8, wzr
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg(target_has_atomic = "8")]
    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
    pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {
    40006be8:	3900abe8 	strb	w8, [sp, #42]
}

#[inline]
#[cfg(target_has_atomic)]
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    40006bec:	3900afe8 	strb	w8, [sp, #43]
    40006bf0:	52800029 	mov	w9, #0x1                   	// #1
    pub fn fetch_or(&self, val: bool, order: Ordering) -> bool {
    40006bf4:	3900b3e9 	strb	w9, [sp, #44]
unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    40006bf8:	3900b7e9 	strb	w9, [sp, #45]
    pub fn fetch_and(&self, val: bool, order: Ordering) -> bool {
    40006bfc:	3900bbe8 	strb	w8, [sp, #46]
unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    40006c00:	3900bfe8 	strb	w8, [sp, #47]
            atomic_compare_exchange_weak(self.v.get(), current as u8, new as u8, success, failure)
    40006c04:	f9001be0 	str	x0, [sp, #48]
    40006c08:	940000de 	bl	40006f80 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E>
    40006c0c:	12000008 	and	w8, w0, #0x1
    40006c10:	39001be8 	strb	w8, [sp, #6]
    40006c14:	39001fe1 	strb	w1, [sp, #7]
        match unsafe {
    40006c18:	39401be8 	ldrb	w8, [sp, #6]
    40006c1c:	36000148 	tbz	w8, #0, 40006c44 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E+0x94>
    40006c20:	14000001 	b	40006c24 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E+0x74>
            Err(x) => Err(x != 0),
    40006c24:	39401fe8 	ldrb	w8, [sp, #7]
    40006c28:	3900ffe8 	strb	w8, [sp, #63]
    40006c2c:	71000108 	subs	w8, w8, #0x0
    40006c30:	1a9f07e8 	cset	w8, ne	// ne = any
    40006c34:	390017e8 	strb	w8, [sp, #5]
    40006c38:	52800028 	mov	w8, #0x1                   	// #1
    40006c3c:	390013e8 	strb	w8, [sp, #4]
    40006c40:	14000009 	b	40006c64 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E+0xb4>
            Ok(x) => Ok(x != 0),
    40006c44:	39401fe8 	ldrb	w8, [sp, #7]
    40006c48:	3900fbe8 	strb	w8, [sp, #62]
    40006c4c:	71000108 	subs	w8, w8, #0x0
    40006c50:	1a9f07e8 	cset	w8, ne	// ne = any
    40006c54:	390017e8 	strb	w8, [sp, #5]
    40006c58:	2a1f03e8 	mov	w8, wzr
    40006c5c:	390013e8 	strb	w8, [sp, #4]
    40006c60:	14000001 	b	40006c64 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E+0xb4>
    }
    40006c64:	394013e0 	ldrb	w0, [sp, #4]
    40006c68:	394017e1 	ldrb	w1, [sp, #5]
    40006c6c:	f94023fe 	ldr	x30, [sp, #64]
    40006c70:	910143ff 	add	sp, sp, #0x50
    40006c74:	d65f03c0 	ret
	...

0000000040006c80 <_ZN4core4sync6atomic10AtomicBool4load17hf6fa5b3dfb1f1fdfE>:
    pub fn load(&self, order: Ordering) -> bool {
    40006c80:	d100c3ff 	sub	sp, sp, #0x30
    40006c84:	f90013fe 	str	x30, [sp, #32]
    40006c88:	f90007e0 	str	x0, [sp, #8]
    40006c8c:	39005fe1 	strb	w1, [sp, #23]
        unsafe { atomic_load(self.v.get(), order) != 0 }
    40006c90:	f9000fe0 	str	x0, [sp, #24]
    40006c94:	94000013 	bl	40006ce0 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E>
    40006c98:	72001c08 	ands	w8, w0, #0xff
    40006c9c:	1a9f07e0 	cset	w0, ne	// ne = any
    }
    40006ca0:	f94013fe 	ldr	x30, [sp, #32]
    40006ca4:	9100c3ff 	add	sp, sp, #0x30
    40006ca8:	d65f03c0 	ret
    40006cac:	00000000 	udf	#0

0000000040006cb0 <_ZN4core4sync6atomic10AtomicBool5store17hc8a377027172c982E>:
    pub fn store(&self, val: bool, order: Ordering) {
    40006cb0:	d100c3ff 	sub	sp, sp, #0x30
    40006cb4:	f90013fe 	str	x30, [sp, #32]
    40006cb8:	f90007e0 	str	x0, [sp, #8]
    40006cbc:	39005be1 	strb	w1, [sp, #22]
    40006cc0:	39005fe2 	strb	w2, [sp, #23]
            atomic_store(self.v.get(), val as u8, order);
    40006cc4:	f9000fe0 	str	x0, [sp, #24]
    40006cc8:	9400005a 	bl	40006e30 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E>
    }
    40006ccc:	f94013fe 	ldr	x30, [sp, #32]
    40006cd0:	9100c3ff 	add	sp, sp, #0x30
    40006cd4:	d65f03c0 	ret
	...

0000000040006ce0 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    40006ce0:	d10243ff 	sub	sp, sp, #0x90
    40006ce4:	f90003e0 	str	x0, [sp]
    40006ce8:	39005be1 	strb	w1, [sp, #22]
    40006cec:	f9003fe0 	str	x0, [sp, #120]
    40006cf0:	d503201f 	nop
    40006cf4:	10026968 	adr	x8, 4000ba20 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e58>
    40006cf8:	f90043e8 	str	x8, [sp, #128]
    40006cfc:	d503201f 	nop
    40006d00:	10026ac8 	adr	x8, 4000ba58 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e90>
    40006d04:	f90047e8 	str	x8, [sp, #136]
        match order {
    40006d08:	39405be8 	ldrb	w8, [sp, #22]
    40006d0c:	f90007e8 	str	x8, [sp, #8]
    40006d10:	34000208 	cbz	w8, 40006d50 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x70>
    40006d14:	14000001 	b	40006d18 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x38>
    40006d18:	f94007e8 	ldr	x8, [sp, #8]
    40006d1c:	f1000508 	subs	x8, x8, #0x1
    40006d20:	54000200 	b.eq	40006d60 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x80>  // b.none
    40006d24:	14000001 	b	40006d28 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x48>
    40006d28:	f94007e8 	ldr	x8, [sp, #8]
    40006d2c:	f1000908 	subs	x8, x8, #0x2
    40006d30:	540003e0 	b.eq	40006dac <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0xcc>  // b.none
    40006d34:	14000001 	b	40006d38 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x58>
    40006d38:	f94007e8 	ldr	x8, [sp, #8]
    40006d3c:	f1000d08 	subs	x8, x8, #0x3
    40006d40:	540003e0 	b.eq	40006dbc <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0xdc>  // b.none
    40006d44:	14000001 	b	40006d48 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x68>
    40006d48:	14000030 	b	40006e08 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x128>
    40006d4c:	d4200020 	brk	#0x1
    40006d50:	f94003e8 	ldr	x8, [sp]
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    40006d54:	39400108 	ldrb	w8, [x8]
    40006d58:	39005fe8 	strb	w8, [sp, #23]
    40006d5c:	1400002f 	b	40006e18 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x138>
        Arguments { pieces, fmt: None, args: &[] }
    40006d60:	d503201f 	nop
    40006d64:	100267a8 	adr	x8, 4000ba58 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e90>
    40006d68:	f9000fe8 	str	x8, [sp, #24]
    40006d6c:	52800028 	mov	w8, #0x1                   	// #1
    40006d70:	f90013e8 	str	x8, [sp, #32]
    40006d74:	d503201f 	nop
    40006d78:	100162c8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40006d7c:	f9400109 	ldr	x9, [x8]
    40006d80:	f9400508 	ldr	x8, [x8, #8]
    40006d84:	f9001fe9 	str	x9, [sp, #56]
    40006d88:	f90023e8 	str	x8, [sp, #64]
    40006d8c:	52800108 	mov	w8, #0x8                   	// #8
    40006d90:	f90017e8 	str	x8, [sp, #40]
    40006d94:	aa1f03e8 	mov	x8, xzr
    40006d98:	f9001be8 	str	x8, [sp, #48]
            Release => panic!("there is no such thing as a release load"),
    40006d9c:	d503201f 	nop
    40006da0:	10026a01 	adr	x1, 4000bae0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1f18>
    40006da4:	910063e0 	add	x0, sp, #0x18
    40006da8:	940002b6 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40006dac:	f94003e8 	ldr	x8, [sp]
            Acquire => intrinsics::atomic_load_acquire(dst),
    40006db0:	08dffd08 	ldarb	w8, [x8]
    40006db4:	39005fe8 	strb	w8, [sp, #23]
    40006db8:	14000018 	b	40006e18 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x138>
    40006dbc:	d503201f 	nop
    40006dc0:	10026308 	adr	x8, 4000ba20 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e58>
    40006dc4:	f90027e8 	str	x8, [sp, #72]
    40006dc8:	52800028 	mov	w8, #0x1                   	// #1
    40006dcc:	f9002be8 	str	x8, [sp, #80]
    40006dd0:	d503201f 	nop
    40006dd4:	10015fe8 	adr	x8, 400099d0 <memcpy+0x1f8>
    40006dd8:	f9400109 	ldr	x9, [x8]
    40006ddc:	f9400508 	ldr	x8, [x8, #8]
    40006de0:	f90037e9 	str	x9, [sp, #104]
    40006de4:	f9003be8 	str	x8, [sp, #112]
    40006de8:	52800108 	mov	w8, #0x8                   	// #8
    40006dec:	f9002fe8 	str	x8, [sp, #88]
    40006df0:	aa1f03e8 	mov	x8, xzr
    40006df4:	f90033e8 	str	x8, [sp, #96]
            AcqRel => panic!("there is no such thing as an acquire-release load"),
    40006df8:	d503201f 	nop
    40006dfc:	100267e1 	adr	x1, 4000baf8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1f30>
    40006e00:	910123e0 	add	x0, sp, #0x48
    40006e04:	9400029f 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40006e08:	f94003e8 	ldr	x8, [sp]
            SeqCst => intrinsics::atomic_load_seqcst(dst),
    40006e0c:	08dffd08 	ldarb	w8, [x8]
    40006e10:	39005fe8 	strb	w8, [sp, #23]
    40006e14:	14000001 	b	40006e18 <_ZN4core4sync6atomic11atomic_load17h6c296654e85be5a8E+0x138>
}
    40006e18:	39405fe0 	ldrb	w0, [sp, #23]
    40006e1c:	910243ff 	add	sp, sp, #0x90
    40006e20:	d65f03c0 	ret
	...

0000000040006e30 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    40006e30:	d10283ff 	sub	sp, sp, #0xa0
    40006e34:	f90003e0 	str	x0, [sp]
    40006e38:	2a0103e8 	mov	w8, w1
    40006e3c:	b9000fe8 	str	w8, [sp, #12]
    40006e40:	39007fe2 	strb	w2, [sp, #31]
    40006e44:	f90043e0 	str	x0, [sp, #128]
    40006e48:	39023fe1 	strb	w1, [sp, #143]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40006e4c:	d503201f 	nop
    40006e50:	100267c8 	adr	x8, 4000bb48 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1f80>
    40006e54:	f9004be8 	str	x8, [sp, #144]
    40006e58:	d503201f 	nop
    40006e5c:	10026968 	adr	x8, 4000bb88 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1fc0>
    40006e60:	f9004fe8 	str	x8, [sp, #152]
        match order {
    40006e64:	39407fe8 	ldrb	w8, [sp, #31]
    40006e68:	f9000be8 	str	x8, [sp, #16]
    40006e6c:	34000208 	cbz	w8, 40006eac <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x7c>
    40006e70:	14000001 	b	40006e74 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x44>
    40006e74:	f9400be8 	ldr	x8, [sp, #16]
    40006e78:	f1000508 	subs	x8, x8, #0x1
    40006e7c:	54000200 	b.eq	40006ebc <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x8c>  // b.none
    40006e80:	14000001 	b	40006e84 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x54>
    40006e84:	f9400be8 	ldr	x8, [sp, #16]
    40006e88:	f1000908 	subs	x8, x8, #0x2
    40006e8c:	54000200 	b.eq	40006ecc <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x9c>  // b.none
    40006e90:	14000001 	b	40006e94 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x64>
    40006e94:	f9400be8 	ldr	x8, [sp, #16]
    40006e98:	f1000d08 	subs	x8, x8, #0x3
    40006e9c:	540003e0 	b.eq	40006f18 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0xe8>  // b.none
    40006ea0:	14000001 	b	40006ea4 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x74>
    40006ea4:	14000030 	b	40006f64 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x134>
    40006ea8:	d4200020 	brk	#0x1
    40006eac:	b9400fe8 	ldr	w8, [sp, #12]
    40006eb0:	f94003e9 	ldr	x9, [sp]
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    40006eb4:	39000128 	strb	w8, [x9]
    40006eb8:	1400002f 	b	40006f74 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x144>
    40006ebc:	b9400fe8 	ldr	w8, [sp, #12]
    40006ec0:	f94003e9 	ldr	x9, [sp]
            Release => intrinsics::atomic_store_release(dst, val),
    40006ec4:	089ffd28 	stlrb	w8, [x9]
    40006ec8:	1400002b 	b	40006f74 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x144>
        Arguments { pieces, fmt: None, args: &[] }
    40006ecc:	d503201f 	nop
    40006ed0:	100265c8 	adr	x8, 4000bb88 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1fc0>
    40006ed4:	f90013e8 	str	x8, [sp, #32]
    40006ed8:	52800028 	mov	w8, #0x1                   	// #1
    40006edc:	f90017e8 	str	x8, [sp, #40]
    40006ee0:	d503201f 	nop
    40006ee4:	10015768 	adr	x8, 400099d0 <memcpy+0x1f8>
    40006ee8:	f9400109 	ldr	x9, [x8]
    40006eec:	f9400508 	ldr	x8, [x8, #8]
    40006ef0:	f90023e9 	str	x9, [sp, #64]
    40006ef4:	f90027e8 	str	x8, [sp, #72]
    40006ef8:	52800108 	mov	w8, #0x8                   	// #8
    40006efc:	f9001be8 	str	x8, [sp, #48]
    40006f00:	aa1f03e8 	mov	x8, xzr
    40006f04:	f9001fe8 	str	x8, [sp, #56]
            Acquire => panic!("there is no such thing as an acquire store"),
    40006f08:	d503201f 	nop
    40006f0c:	10026461 	adr	x1, 4000bb98 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1fd0>
    40006f10:	910083e0 	add	x0, sp, #0x20
    40006f14:	9400025b 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40006f18:	d503201f 	nop
    40006f1c:	10026168 	adr	x8, 4000bb48 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1f80>
    40006f20:	f9002be8 	str	x8, [sp, #80]
    40006f24:	52800028 	mov	w8, #0x1                   	// #1
    40006f28:	f9002fe8 	str	x8, [sp, #88]
    40006f2c:	d503201f 	nop
    40006f30:	10015508 	adr	x8, 400099d0 <memcpy+0x1f8>
    40006f34:	f9400109 	ldr	x9, [x8]
    40006f38:	f9400508 	ldr	x8, [x8, #8]
    40006f3c:	f9003be9 	str	x9, [sp, #112]
    40006f40:	f9003fe8 	str	x8, [sp, #120]
    40006f44:	52800108 	mov	w8, #0x8                   	// #8
    40006f48:	f90033e8 	str	x8, [sp, #96]
    40006f4c:	aa1f03e8 	mov	x8, xzr
    40006f50:	f90037e8 	str	x8, [sp, #104]
            AcqRel => panic!("there is no such thing as an acquire-release store"),
    40006f54:	d503201f 	nop
    40006f58:	100262c1 	adr	x1, 4000bbb0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1fe8>
    40006f5c:	910143e0 	add	x0, sp, #0x50
    40006f60:	94000248 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    40006f64:	b9400fe8 	ldr	w8, [sp, #12]
    40006f68:	f94003e9 	ldr	x9, [sp]
            SeqCst => intrinsics::atomic_store_seqcst(dst, val),
    40006f6c:	089ffd28 	stlrb	w8, [x9]
    40006f70:	14000001 	b	40006f74 <_ZN4core4sync6atomic12atomic_store17hbfade45b7e4b8828E+0x144>
}
    40006f74:	910283ff 	add	sp, sp, #0xa0
    40006f78:	d65f03c0 	ret
    40006f7c:	00000000 	udf	#0

0000000040006f80 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E>:
unsafe fn atomic_compare_exchange_weak<T: Copy>(
    40006f80:	d10383ff 	sub	sp, sp, #0xe0
    40006f84:	f9001fe0 	str	x0, [sp, #56]
    40006f88:	2a0203e8 	mov	w8, w2
    40006f8c:	b90043e8 	str	w8, [sp, #64]
    40006f90:	2a0103e8 	mov	w8, w1
    40006f94:	b90047e8 	str	w8, [sp, #68]
    40006f98:	39014be3 	strb	w3, [sp, #82]
    40006f9c:	39014fe4 	strb	w4, [sp, #83]
    40006fa0:	f9005fe0 	str	x0, [sp, #184]
    40006fa4:	39031be1 	strb	w1, [sp, #198]
    40006fa8:	39031fe2 	strb	w2, [sp, #199]
    pub const fn new_const<const N: usize>(pieces: &'a [&'static str; N]) -> Self {
    40006fac:	d503201f 	nop
    40006fb0:	10024ec8 	adr	x8, 4000b988 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1dc0>
    40006fb4:	f90067e8 	str	x8, [sp, #200]
    40006fb8:	d503201f 	nop
    40006fbc:	100250e8 	adr	x8, 4000b9d8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e10>
    40006fc0:	f9006be8 	str	x8, [sp, #208]
        match (success, failure) {
    40006fc4:	39414be8 	ldrb	w8, [sp, #82]
    40006fc8:	f90027e8 	str	x8, [sp, #72]
    40006fcc:	34000208 	cbz	w8, 4000700c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x8c>
    40006fd0:	14000001 	b	40006fd4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x54>
    40006fd4:	f94027e8 	ldr	x8, [sp, #72]
    40006fd8:	f1000508 	subs	x8, x8, #0x1
    40006fdc:	54000300 	b.eq	4000703c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xbc>  // b.none
    40006fe0:	14000001 	b	40006fe4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x64>
    40006fe4:	f94027e8 	ldr	x8, [sp, #72]
    40006fe8:	f1000908 	subs	x8, x8, #0x2
    40006fec:	54000400 	b.eq	4000706c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xec>  // b.none
    40006ff0:	14000001 	b	40006ff4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x74>
    40006ff4:	f94027e8 	ldr	x8, [sp, #72]
    40006ff8:	f1000d08 	subs	x8, x8, #0x3
    40006ffc:	54000500 	b.eq	4000709c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x11c>  // b.none
    40007000:	14000001 	b	40007004 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x84>
    40007004:	14000032 	b	400070cc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x14c>
    40007008:	d4200020 	brk	#0x1
    4000700c:	39414fe8 	ldrb	w8, [sp, #83]
    40007010:	f9001be8 	str	x8, [sp, #48]
    40007014:	340007c8 	cbz	w8, 4000710c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x18c>
    40007018:	14000001 	b	4000701c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x9c>
    4000701c:	f9401be8 	ldr	x8, [sp, #48]
    40007020:	f1000908 	subs	x8, x8, #0x2
    40007024:	540008e0 	b.eq	40007140 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x1c0>  // b.none
    40007028:	14000001 	b	4000702c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xac>
    4000702c:	f9401be8 	ldr	x8, [sp, #48]
    40007030:	f1001108 	subs	x8, x8, #0x4
    40007034:	54000a00 	b.eq	40007174 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x1f4>  // b.none
    40007038:	14000031 	b	400070fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x17c>
    4000703c:	39414fe8 	ldrb	w8, [sp, #83]
    40007040:	f90017e8 	str	x8, [sp, #40]
    40007044:	34000c28 	cbz	w8, 400071c8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x248>
    40007048:	14000001 	b	4000704c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xcc>
    4000704c:	f94017e8 	ldr	x8, [sp, #40]
    40007050:	f1000908 	subs	x8, x8, #0x2
    40007054:	54000d40 	b.eq	400071fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x27c>  // b.none
    40007058:	14000001 	b	4000705c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xdc>
    4000705c:	f94017e8 	ldr	x8, [sp, #40]
    40007060:	f1001108 	subs	x8, x8, #0x4
    40007064:	54000e60 	b.eq	40007230 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x2b0>  // b.none
    40007068:	14000025 	b	400070fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x17c>
    4000706c:	39414fe8 	ldrb	w8, [sp, #83]
    40007070:	f90013e8 	str	x8, [sp, #32]
    40007074:	34000f88 	cbz	w8, 40007264 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x2e4>
    40007078:	14000001 	b	4000707c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0xfc>
    4000707c:	f94013e8 	ldr	x8, [sp, #32]
    40007080:	f1000908 	subs	x8, x8, #0x2
    40007084:	540010a0 	b.eq	40007298 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x318>  // b.none
    40007088:	14000001 	b	4000708c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x10c>
    4000708c:	f94013e8 	ldr	x8, [sp, #32]
    40007090:	f1001108 	subs	x8, x8, #0x4
    40007094:	540011c0 	b.eq	400072cc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x34c>  // b.none
    40007098:	14000019 	b	400070fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x17c>
    4000709c:	39414fe8 	ldrb	w8, [sp, #83]
    400070a0:	f9000fe8 	str	x8, [sp, #24]
    400070a4:	340012e8 	cbz	w8, 40007300 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x380>
    400070a8:	14000001 	b	400070ac <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x12c>
    400070ac:	f9400fe8 	ldr	x8, [sp, #24]
    400070b0:	f1000908 	subs	x8, x8, #0x2
    400070b4:	54001400 	b.eq	40007334 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3b4>  // b.none
    400070b8:	14000001 	b	400070bc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x13c>
    400070bc:	f9400fe8 	ldr	x8, [sp, #24]
    400070c0:	f1001108 	subs	x8, x8, #0x4
    400070c4:	54001520 	b.eq	40007368 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3e8>  // b.none
    400070c8:	1400000d 	b	400070fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x17c>
    400070cc:	39414fe8 	ldrb	w8, [sp, #83]
    400070d0:	f9000be8 	str	x8, [sp, #16]
    400070d4:	34001648 	cbz	w8, 4000739c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x41c>
    400070d8:	14000001 	b	400070dc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x15c>
    400070dc:	f9400be8 	ldr	x8, [sp, #16]
    400070e0:	f1000908 	subs	x8, x8, #0x2
    400070e4:	54001760 	b.eq	400073d0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x450>  // b.none
    400070e8:	14000001 	b	400070ec <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x16c>
    400070ec:	f9400be8 	ldr	x8, [sp, #16]
    400070f0:	f1001108 	subs	x8, x8, #0x4
    400070f4:	54001880 	b.eq	40007404 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x484>  // b.none
    400070f8:	14000001 	b	400070fc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x17c>
    400070fc:	39414fe8 	ldrb	w8, [sp, #83]
    40007100:	71000508 	subs	w8, w8, #0x1
    40007104:	54001b60 	b.eq	40007470 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4f0>  // b.none
    40007108:	140000ed 	b	400074bc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x53c>
    4000710c:	b94047e8 	ldr	w8, [sp, #68]
    40007110:	f9401feb 	ldr	x11, [sp, #56]
    40007114:	b94043ec 	ldr	w12, [sp, #64]
            (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),
    40007118:	085ffd69 	ldaxrb	w9, [x11]
    4000711c:	6b28013f 	cmp	w9, w8, uxtb
    40007120:	54000061 	b.ne	4000712c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x1ac>  // b.any
    40007124:	080afd6c 	stlxrb	w10, w12, [x11]
    40007128:	35ffff8a 	cbnz	w10, 40007118 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x198>
    4000712c:	6b280128 	subs	w8, w9, w8, uxtb
    40007130:	1a9f17e8 	cset	w8, eq	// eq = none
    40007134:	39015be9 	strb	w9, [sp, #86]
    40007138:	39015fe8 	strb	w8, [sp, #87]
    4000713c:	1400001b 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007140:	b94047e8 	ldr	w8, [sp, #68]
    40007144:	f9401feb 	ldr	x11, [sp, #56]
    40007148:	b94043ec 	ldr	w12, [sp, #64]
            (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),
    4000714c:	085ffd69 	ldaxrb	w9, [x11]
    40007150:	6b28013f 	cmp	w9, w8, uxtb
    40007154:	54000061 	b.ne	40007160 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x1e0>  // b.any
    40007158:	080afd6c 	stlxrb	w10, w12, [x11]
    4000715c:	35ffff8a 	cbnz	w10, 4000714c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x1cc>
    40007160:	6b280128 	subs	w8, w9, w8, uxtb
    40007164:	1a9f17e8 	cset	w8, eq	// eq = none
    40007168:	39015be9 	strb	w9, [sp, #86]
    4000716c:	39015fe8 	strb	w8, [sp, #87]
    40007170:	1400000e 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007174:	b94047e8 	ldr	w8, [sp, #68]
    40007178:	f9401feb 	ldr	x11, [sp, #56]
    4000717c:	b94043ec 	ldr	w12, [sp, #64]
            (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),
    40007180:	085ffd69 	ldaxrb	w9, [x11]
    40007184:	6b28013f 	cmp	w9, w8, uxtb
    40007188:	54000061 	b.ne	40007194 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x214>  // b.any
    4000718c:	080afd6c 	stlxrb	w10, w12, [x11]
    40007190:	35ffff8a 	cbnz	w10, 40007180 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x200>
    40007194:	6b280128 	subs	w8, w9, w8, uxtb
    40007198:	1a9f17e8 	cset	w8, eq	// eq = none
    4000719c:	39015be9 	strb	w9, [sp, #86]
    400071a0:	39015fe8 	strb	w8, [sp, #87]
    400071a4:	14000001 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    let (val, ok) = unsafe {
    400071a8:	39415be8 	ldrb	w8, [sp, #86]
    400071ac:	2a0803e9 	mov	w9, w8
    400071b0:	b9000fe9 	str	w9, [sp, #12]
    400071b4:	39037be8 	strb	w8, [sp, #222]
    400071b8:	39415fe8 	ldrb	w8, [sp, #87]
    400071bc:	39037fe8 	strb	w8, [sp, #223]
    if ok { Ok(val) } else { Err(val) }
    400071c0:	37001468 	tbnz	w8, #0, 4000744c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4cc>
    400071c4:	1400009d 	b	40007438 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4b8>
    400071c8:	b94047e8 	ldr	w8, [sp, #68]
    400071cc:	f9401feb 	ldr	x11, [sp, #56]
    400071d0:	b94043ec 	ldr	w12, [sp, #64]
            (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),
    400071d4:	085ffd69 	ldaxrb	w9, [x11]
    400071d8:	6b28013f 	cmp	w9, w8, uxtb
    400071dc:	54000061 	b.ne	400071e8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x268>  // b.any
    400071e0:	080afd6c 	stlxrb	w10, w12, [x11]
    400071e4:	35ffff8a 	cbnz	w10, 400071d4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x254>
    400071e8:	6b280128 	subs	w8, w9, w8, uxtb
    400071ec:	1a9f17e8 	cset	w8, eq	// eq = none
    400071f0:	39015be9 	strb	w9, [sp, #86]
    400071f4:	39015fe8 	strb	w8, [sp, #87]
    400071f8:	17ffffec 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    400071fc:	b94047e8 	ldr	w8, [sp, #68]
    40007200:	f9401feb 	ldr	x11, [sp, #56]
    40007204:	b94043ec 	ldr	w12, [sp, #64]
            (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),
    40007208:	085ffd69 	ldaxrb	w9, [x11]
    4000720c:	6b28013f 	cmp	w9, w8, uxtb
    40007210:	54000061 	b.ne	4000721c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x29c>  // b.any
    40007214:	080afd6c 	stlxrb	w10, w12, [x11]
    40007218:	35ffff8a 	cbnz	w10, 40007208 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x288>
    4000721c:	6b280128 	subs	w8, w9, w8, uxtb
    40007220:	1a9f17e8 	cset	w8, eq	// eq = none
    40007224:	39015be9 	strb	w9, [sp, #86]
    40007228:	39015fe8 	strb	w8, [sp, #87]
    4000722c:	17ffffdf 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007230:	b94047e8 	ldr	w8, [sp, #68]
    40007234:	f9401feb 	ldr	x11, [sp, #56]
    40007238:	b94043ec 	ldr	w12, [sp, #64]
            (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),
    4000723c:	085ffd69 	ldaxrb	w9, [x11]
    40007240:	6b28013f 	cmp	w9, w8, uxtb
    40007244:	54000061 	b.ne	40007250 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x2d0>  // b.any
    40007248:	080afd6c 	stlxrb	w10, w12, [x11]
    4000724c:	35ffff8a 	cbnz	w10, 4000723c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x2bc>
    40007250:	6b280128 	subs	w8, w9, w8, uxtb
    40007254:	1a9f17e8 	cset	w8, eq	// eq = none
    40007258:	39015be9 	strb	w9, [sp, #86]
    4000725c:	39015fe8 	strb	w8, [sp, #87]
    40007260:	17ffffd2 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007264:	b94047e8 	ldr	w8, [sp, #68]
    40007268:	f9401feb 	ldr	x11, [sp, #56]
    4000726c:	b94043ec 	ldr	w12, [sp, #64]
            (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),
    40007270:	085ffd69 	ldaxrb	w9, [x11]
    40007274:	6b28013f 	cmp	w9, w8, uxtb
    40007278:	54000061 	b.ne	40007284 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x304>  // b.any
    4000727c:	080afd6c 	stlxrb	w10, w12, [x11]
    40007280:	35ffff8a 	cbnz	w10, 40007270 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x2f0>
    40007284:	6b280128 	subs	w8, w9, w8, uxtb
    40007288:	1a9f17e8 	cset	w8, eq	// eq = none
    4000728c:	39015be9 	strb	w9, [sp, #86]
    40007290:	39015fe8 	strb	w8, [sp, #87]
    40007294:	17ffffc5 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007298:	b94047e8 	ldr	w8, [sp, #68]
    4000729c:	f9401feb 	ldr	x11, [sp, #56]
    400072a0:	b94043ec 	ldr	w12, [sp, #64]
            (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),
    400072a4:	085ffd69 	ldaxrb	w9, [x11]
    400072a8:	6b28013f 	cmp	w9, w8, uxtb
    400072ac:	54000061 	b.ne	400072b8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x338>  // b.any
    400072b0:	080afd6c 	stlxrb	w10, w12, [x11]
    400072b4:	35ffff8a 	cbnz	w10, 400072a4 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x324>
    400072b8:	6b280128 	subs	w8, w9, w8, uxtb
    400072bc:	1a9f17e8 	cset	w8, eq	// eq = none
    400072c0:	39015be9 	strb	w9, [sp, #86]
    400072c4:	39015fe8 	strb	w8, [sp, #87]
    400072c8:	17ffffb8 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    400072cc:	b94047e8 	ldr	w8, [sp, #68]
    400072d0:	f9401feb 	ldr	x11, [sp, #56]
    400072d4:	b94043ec 	ldr	w12, [sp, #64]
            (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),
    400072d8:	085ffd69 	ldaxrb	w9, [x11]
    400072dc:	6b28013f 	cmp	w9, w8, uxtb
    400072e0:	54000061 	b.ne	400072ec <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x36c>  // b.any
    400072e4:	080afd6c 	stlxrb	w10, w12, [x11]
    400072e8:	35ffff8a 	cbnz	w10, 400072d8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x358>
    400072ec:	6b280128 	subs	w8, w9, w8, uxtb
    400072f0:	1a9f17e8 	cset	w8, eq	// eq = none
    400072f4:	39015be9 	strb	w9, [sp, #86]
    400072f8:	39015fe8 	strb	w8, [sp, #87]
    400072fc:	17ffffab 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007300:	b94047e8 	ldr	w8, [sp, #68]
    40007304:	f9401feb 	ldr	x11, [sp, #56]
    40007308:	b94043ec 	ldr	w12, [sp, #64]
            (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),
    4000730c:	085ffd69 	ldaxrb	w9, [x11]
    40007310:	6b28013f 	cmp	w9, w8, uxtb
    40007314:	54000061 	b.ne	40007320 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3a0>  // b.any
    40007318:	080afd6c 	stlxrb	w10, w12, [x11]
    4000731c:	35ffff8a 	cbnz	w10, 4000730c <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x38c>
    40007320:	6b280128 	subs	w8, w9, w8, uxtb
    40007324:	1a9f17e8 	cset	w8, eq	// eq = none
    40007328:	39015be9 	strb	w9, [sp, #86]
    4000732c:	39015fe8 	strb	w8, [sp, #87]
    40007330:	17ffff9e 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007334:	b94047e8 	ldr	w8, [sp, #68]
    40007338:	f9401feb 	ldr	x11, [sp, #56]
    4000733c:	b94043ec 	ldr	w12, [sp, #64]
            (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),
    40007340:	085ffd69 	ldaxrb	w9, [x11]
    40007344:	6b28013f 	cmp	w9, w8, uxtb
    40007348:	54000061 	b.ne	40007354 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3d4>  // b.any
    4000734c:	080afd6c 	stlxrb	w10, w12, [x11]
    40007350:	35ffff8a 	cbnz	w10, 40007340 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3c0>
    40007354:	6b280128 	subs	w8, w9, w8, uxtb
    40007358:	1a9f17e8 	cset	w8, eq	// eq = none
    4000735c:	39015be9 	strb	w9, [sp, #86]
    40007360:	39015fe8 	strb	w8, [sp, #87]
    40007364:	17ffff91 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007368:	b94047e8 	ldr	w8, [sp, #68]
    4000736c:	f9401feb 	ldr	x11, [sp, #56]
    40007370:	b94043ec 	ldr	w12, [sp, #64]
            (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),
    40007374:	085ffd69 	ldaxrb	w9, [x11]
    40007378:	6b28013f 	cmp	w9, w8, uxtb
    4000737c:	54000061 	b.ne	40007388 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x408>  // b.any
    40007380:	080afd6c 	stlxrb	w10, w12, [x11]
    40007384:	35ffff8a 	cbnz	w10, 40007374 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x3f4>
    40007388:	6b280128 	subs	w8, w9, w8, uxtb
    4000738c:	1a9f17e8 	cset	w8, eq	// eq = none
    40007390:	39015be9 	strb	w9, [sp, #86]
    40007394:	39015fe8 	strb	w8, [sp, #87]
    40007398:	17ffff84 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    4000739c:	b94047e8 	ldr	w8, [sp, #68]
    400073a0:	f9401feb 	ldr	x11, [sp, #56]
    400073a4:	b94043ec 	ldr	w12, [sp, #64]
            (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),
    400073a8:	085ffd69 	ldaxrb	w9, [x11]
    400073ac:	6b28013f 	cmp	w9, w8, uxtb
    400073b0:	54000061 	b.ne	400073bc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x43c>  // b.any
    400073b4:	080afd6c 	stlxrb	w10, w12, [x11]
    400073b8:	35ffff8a 	cbnz	w10, 400073a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x428>
    400073bc:	6b280128 	subs	w8, w9, w8, uxtb
    400073c0:	1a9f17e8 	cset	w8, eq	// eq = none
    400073c4:	39015be9 	strb	w9, [sp, #86]
    400073c8:	39015fe8 	strb	w8, [sp, #87]
    400073cc:	17ffff77 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    400073d0:	b94047e8 	ldr	w8, [sp, #68]
    400073d4:	f9401feb 	ldr	x11, [sp, #56]
    400073d8:	b94043ec 	ldr	w12, [sp, #64]
            (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),
    400073dc:	085ffd69 	ldaxrb	w9, [x11]
    400073e0:	6b28013f 	cmp	w9, w8, uxtb
    400073e4:	54000061 	b.ne	400073f0 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x470>  // b.any
    400073e8:	080afd6c 	stlxrb	w10, w12, [x11]
    400073ec:	35ffff8a 	cbnz	w10, 400073dc <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x45c>
    400073f0:	6b280128 	subs	w8, w9, w8, uxtb
    400073f4:	1a9f17e8 	cset	w8, eq	// eq = none
    400073f8:	39015be9 	strb	w9, [sp, #86]
    400073fc:	39015fe8 	strb	w8, [sp, #87]
    40007400:	17ffff6a 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007404:	b94047e8 	ldr	w8, [sp, #68]
    40007408:	f9401feb 	ldr	x11, [sp, #56]
    4000740c:	b94043ec 	ldr	w12, [sp, #64]
            (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),
    40007410:	085ffd69 	ldaxrb	w9, [x11]
    40007414:	6b28013f 	cmp	w9, w8, uxtb
    40007418:	54000061 	b.ne	40007424 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4a4>  // b.any
    4000741c:	080afd6c 	stlxrb	w10, w12, [x11]
    40007420:	35ffff8a 	cbnz	w10, 40007410 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x490>
    40007424:	6b280128 	subs	w8, w9, w8, uxtb
    40007428:	1a9f17e8 	cset	w8, eq	// eq = none
    4000742c:	39015be9 	strb	w9, [sp, #86]
    40007430:	39015fe8 	strb	w8, [sp, #87]
    40007434:	17ffff5d 	b	400071a8 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x228>
    40007438:	b9400fe8 	ldr	w8, [sp, #12]
    if ok { Ok(val) } else { Err(val) }
    4000743c:	390157e8 	strb	w8, [sp, #85]
    40007440:	52800028 	mov	w8, #0x1                   	// #1
    40007444:	390153e8 	strb	w8, [sp, #84]
    40007448:	14000006 	b	40007460 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4e0>
    4000744c:	b9400fe8 	ldr	w8, [sp, #12]
    40007450:	390157e8 	strb	w8, [sp, #85]
    40007454:	2a1f03e8 	mov	w8, wzr
    40007458:	390153e8 	strb	w8, [sp, #84]
    4000745c:	14000001 	b	40007460 <_ZN4core4sync6atomic28atomic_compare_exchange_weak17h0a27a0a814f68dc7E+0x4e0>
}
    40007460:	394153e0 	ldrb	w0, [sp, #84]
    40007464:	394157e1 	ldrb	w1, [sp, #85]
    40007468:	910383ff 	add	sp, sp, #0xe0
    4000746c:	d65f03c0 	ret
        Arguments { pieces, fmt: None, args: &[] }
    40007470:	d503201f 	nop
    40007474:	100228a8 	adr	x8, 4000b988 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1dc0>
    40007478:	f90047e8 	str	x8, [sp, #136]
    4000747c:	52800028 	mov	w8, #0x1                   	// #1
    40007480:	f9004be8 	str	x8, [sp, #144]
    40007484:	d503201f 	nop
    40007488:	10012a48 	adr	x8, 400099d0 <memcpy+0x1f8>
    4000748c:	f9400109 	ldr	x9, [x8]
    40007490:	f9400508 	ldr	x8, [x8, #8]
    40007494:	f90057e9 	str	x9, [sp, #168]
    40007498:	f9005be8 	str	x8, [sp, #176]
    4000749c:	52800108 	mov	w8, #0x8                   	// #8
    400074a0:	f9004fe8 	str	x8, [sp, #152]
    400074a4:	aa1f03e8 	mov	x8, xzr
    400074a8:	f90053e8 	str	x8, [sp, #160]
            (_, Release) => panic!("there is no such thing as a release failure ordering"),
    400074ac:	d503201f 	nop
    400074b0:	100238c1 	adr	x1, 4000bbc8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2000>
    400074b4:	910223e0 	add	x0, sp, #0x88
    400074b8:	940000f2 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
    400074bc:	d503201f 	nop
    400074c0:	100228c8 	adr	x8, 4000b9d8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x1e10>
    400074c4:	f9002fe8 	str	x8, [sp, #88]
    400074c8:	52800028 	mov	w8, #0x1                   	// #1
    400074cc:	f90033e8 	str	x8, [sp, #96]
    400074d0:	d503201f 	nop
    400074d4:	100127e8 	adr	x8, 400099d0 <memcpy+0x1f8>
    400074d8:	f9400109 	ldr	x9, [x8]
    400074dc:	f9400508 	ldr	x8, [x8, #8]
    400074e0:	f9003fe9 	str	x9, [sp, #120]
    400074e4:	f90043e8 	str	x8, [sp, #128]
    400074e8:	52800108 	mov	w8, #0x8                   	// #8
    400074ec:	f90037e8 	str	x8, [sp, #104]
    400074f0:	aa1f03e8 	mov	x8, xzr
    400074f4:	f9003be8 	str	x8, [sp, #112]
            (_, AcqRel) => panic!("there is no such thing as an acquire-release failure ordering"),
    400074f8:	d503201f 	nop
    400074fc:	10023721 	adr	x1, 4000bbe0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2018>
    40007500:	910163e0 	add	x0, sp, #0x58
    40007504:	940000df 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>
	...

0000000040007510 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h71dae9833ab3fe5cE>:
    pub const fn is_ok(&self) -> bool {
    40007510:	d10043ff 	sub	sp, sp, #0x10
    40007514:	f90007e0 	str	x0, [sp, #8]
        matches!(*self, Ok(_))
    40007518:	39400009 	ldrb	w9, [x0]
    4000751c:	52800028 	mov	w8, #0x1                   	// #1
#[macro_export]
#[stable(feature = "matches_macro", since = "1.42.0")]
#[cfg_attr(not(test), rustc_diagnostic_item = "matches_macro")]
macro_rules! matches {
    ($expression:expr, $pattern:pat $(if $guard:expr)? $(,)?) => {
        match $expression {
    40007520:	0a290100 	bic	w0, w8, w9
    }
    40007524:	910043ff 	add	sp, sp, #0x10
    40007528:	d65f03c0 	ret
    4000752c:	00000000 	udf	#0

0000000040007530 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h278fa29e19dedc7fE>:
}

impl RawSpinlock {
    // Can fail to lock even if the spinlock is not locked. May be more efficient than `try_lock`
    // when called in a loop.
    fn try_lock_weak(&self) -> bool {
    40007530:	d10083ff 	sub	sp, sp, #0x20
    40007534:	f9000bfe 	str	x30, [sp, #16]
    40007538:	f90007e0 	str	x0, [sp, #8]
    4000753c:	52800048 	mov	w8, #0x2                   	// #2
        // The Orderings are the same as try_lock, and are still correct here.
        self.locked
            .compare_exchange_weak(false, true, Ordering::Acquire, Ordering::Relaxed)
    40007540:	39001be8 	strb	w8, [sp, #6]
    40007544:	2a1f03e1 	mov	w1, wzr
    40007548:	39001fe1 	strb	w1, [sp, #7]
        self.locked
    4000754c:	39401fe4 	ldrb	w4, [sp, #7]
    40007550:	39401be3 	ldrb	w3, [sp, #6]
    40007554:	52800022 	mov	w2, #0x1                   	// #1
    40007558:	97fffd96 	bl	40006bb0 <_ZN4core4sync6atomic10AtomicBool21compare_exchange_weak17hdf9caa28945baf15E>
    4000755c:	12000008 	and	w8, w0, #0x1
    40007560:	390013e8 	strb	w8, [sp, #4]
    40007564:	390017e1 	strb	w1, [sp, #5]
    40007568:	910013e0 	add	x0, sp, #0x4
    4000756c:	97ffffe9 	bl	40007510 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h71dae9833ab3fe5cE>
            .is_ok()
    }
    40007570:	f9400bfe 	ldr	x30, [sp, #16]
    40007574:	910083ff 	add	sp, sp, #0x20
    40007578:	d65f03c0 	ret
    4000757c:	00000000 	udf	#0

0000000040007580 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE>:
    };

    // A spinlock guard can be sent to another thread and unlocked there
    type GuardMarker = GuardSend;

    fn lock(&self) {
    40007580:	d100c3ff 	sub	sp, sp, #0x30
    40007584:	f90013fe 	str	x30, [sp, #32]
    40007588:	f90003e0 	str	x0, [sp]
    4000758c:	f90007e0 	str	x0, [sp, #8]
        while !self.try_lock_weak() {
    40007590:	14000002 	b	40007598 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x18>
    40007594:	14000001 	b	40007598 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x18>
    40007598:	f94003e0 	ldr	x0, [sp]
    4000759c:	97ffffe5 	bl	40007530 <_ZN12spinning_top8spinlock11RawSpinlock13try_lock_weak17h278fa29e19dedc7fE>
    400075a0:	370000e0 	tbnz	w0, #0, 400075bc <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x3c>
    400075a4:	14000001 	b	400075a8 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x28>
            // Wait until the lock looks unlocked before retrying
            // Code from https://github.com/mvdnes/spin-rs/commit/d3e60d19adbde8c8e9d3199c7c51e51ee5a20bf6
            while self.is_locked() {
    400075a8:	14000001 	b	400075ac <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x2c>
    400075ac:	f94003e0 	ldr	x0, [sp]
    400075b0:	94000018 	bl	40007610 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17haade26255a4897c8E>
    400075b4:	370000a0 	tbnz	w0, #0, 400075c8 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x48>
    400075b8:	17fffff7 	b	40007594 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x14>
                // Tell the CPU that we're inside a busy-wait loop
                hint::spin_loop();
            }
        }
    }
    400075bc:	f94013fe 	ldr	x30, [sp, #32]
    400075c0:	9100c3ff 	add	sp, sp, #0x30
    400075c4:	d65f03c0 	ret
    400075c8:	91005fe8 	add	x8, sp, #0x17
    400075cc:	f9000fe8 	str	x8, [sp, #24]
    400075d0:	d5033fdf 	isb
                hint::spin_loop();
    400075d4:	17fffff6 	b	400075ac <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$4lock17h1df7fcba46cc153aE+0x2c>
	...

00000000400075e0 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$6unlock17h6cb7bfec9042e4eeE>:
        self.locked
            .compare_exchange(false, true, Ordering::Acquire, Ordering::Relaxed)
            .is_ok()
    }

    unsafe fn unlock(&self) {
    400075e0:	d10083ff 	sub	sp, sp, #0x20
    400075e4:	f9000bfe 	str	x30, [sp, #16]
    400075e8:	f90007e0 	str	x0, [sp, #8]
    400075ec:	52800028 	mov	w8, #0x1                   	// #1
        self.locked.store(false, Ordering::Release);
    400075f0:	39001fe8 	strb	w8, [sp, #7]
    400075f4:	39401fe2 	ldrb	w2, [sp, #7]
    400075f8:	2a1f03e1 	mov	w1, wzr
    400075fc:	97fffdad 	bl	40006cb0 <_ZN4core4sync6atomic10AtomicBool5store17hc8a377027172c982E>
    }
    40007600:	f9400bfe 	ldr	x30, [sp, #16]
    40007604:	910083ff 	add	sp, sp, #0x20
    40007608:	d65f03c0 	ret
    4000760c:	00000000 	udf	#0

0000000040007610 <_ZN81_$LT$spinning_top..spinlock..RawSpinlock$u20$as$u20$lock_api..mutex..RawMutex$GT$9is_locked17haade26255a4897c8E>:

    fn is_locked(&self) -> bool {
    40007610:	d10083ff 	sub	sp, sp, #0x20
    40007614:	f9000bfe 	str	x30, [sp, #16]
    40007618:	f90007e0 	str	x0, [sp, #8]
    4000761c:	2a1f03e8 	mov	w8, wzr
        // Relaxed is sufficient because this operation does not provide synchronization, only atomicity.
        self.locked.load(Ordering::Relaxed)
    40007620:	39001fe8 	strb	w8, [sp, #7]
    40007624:	39401fe1 	ldrb	w1, [sp, #7]
    40007628:	97fffd96 	bl	40006c80 <_ZN4core4sync6atomic10AtomicBool4load17hf6fa5b3dfb1f1fdfE>
    }
    4000762c:	f9400bfe 	ldr	x30, [sp, #16]
    40007630:	910083ff 	add	sp, sp, #0x20
    40007634:	d65f03c0 	ret

0000000040007638 <_ZN5alloc7raw_vec17capacity_overflow17heba1af8f3d4c70dfE>:
    40007638:	d10103ff 	sub	sp, sp, #0x40
    4000763c:	a9037bfd 	stp	x29, x30, [sp, #48]
    40007640:	9100c3fd 	add	x29, sp, #0x30
    40007644:	d503201f 	nop
    40007648:	10022e48 	adr	x8, 4000bc10 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2048>
    4000764c:	52800029 	mov	w9, #0x1                   	// #1
    40007650:	aa0003e1 	mov	x1, x0
    40007654:	a90027e8 	stp	x8, x9, [sp]
    40007658:	52800108 	mov	w8, #0x8                   	// #8
    4000765c:	910003e0 	mov	x0, sp
    40007660:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40007664:	f9000be8 	str	x8, [sp, #16]
    40007668:	94000086 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

000000004000766c <_ZN5alloc7raw_vec12handle_error17h5e3ba97a9e19fb1cE>:
    4000766c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40007670:	910003fd 	mov	x29, sp
    40007674:	b5000060 	cbnz	x0, 40007680 <_ZN5alloc7raw_vec12handle_error17h5e3ba97a9e19fb1cE+0x14>
    40007678:	aa0203e0 	mov	x0, x2
    4000767c:	97ffffef 	bl	40007638 <_ZN5alloc7raw_vec17capacity_overflow17heba1af8f3d4c70dfE>
    40007680:	94000001 	bl	40007684 <_ZN5alloc5alloc18handle_alloc_error17hc207c5312f1cdc9bE>

0000000040007684 <_ZN5alloc5alloc18handle_alloc_error17hc207c5312f1cdc9bE>:
    40007684:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40007688:	910003fd 	mov	x29, sp
    4000768c:	aa0003e8 	mov	x8, x0
    40007690:	aa0103e0 	mov	x0, x1
    40007694:	aa0803e1 	mov	x1, x8
    40007698:	97fff1fa 	bl	40003e80 <__rust_alloc_error_handler>

000000004000769c <_ZN68_$LT$core..ptr..alignment..Alignment$u20$as$u20$core..fmt..Debug$GT$3fmt17h4c8f52b811827582E>:
    4000769c:	d101c3ff 	sub	sp, sp, #0x70
    400076a0:	a9067bfd 	stp	x29, x30, [sp, #96]
    400076a4:	910183fd 	add	x29, sp, #0x60
    400076a8:	f940000a 	ldr	x10, [x0]
    400076ac:	d10043a8 	sub	x8, x29, #0x10
    400076b0:	d503201f 	nop
    400076b4:	1000b529 	adr	x9, 40008d58 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E>
    400076b8:	d10013ab 	sub	x11, x29, #0x4
    400076bc:	910003e2 	mov	x2, sp
    400076c0:	a90327e8 	stp	x8, x9, [sp, #48]
    400076c4:	dac00149 	rbit	x9, x10
    400076c8:	d503201f 	nop
    400076cc:	1000d508 	adr	x8, 4000916c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE>
    400076d0:	a9430420 	ldp	x0, x1, [x1, #48]
    400076d4:	a90423eb 	stp	x11, x8, [sp, #64]
    400076d8:	dac01128 	clz	x8, x9
    400076dc:	d503201f 	nop
    400076e0:	10022f49 	adr	x9, 4000bcc8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2100>
    400076e4:	b81fc3a8 	stur	w8, [x29, #-4]
    400076e8:	52800068 	mov	w8, #0x3                   	// #3
    400076ec:	a90023e9 	stp	x9, x8, [sp]
    400076f0:	9100c3e8 	add	x8, sp, #0x30
    400076f4:	52800049 	mov	w9, #0x2                   	// #2
    400076f8:	f81f03aa 	stur	x10, [x29, #-16]
    400076fc:	a90127e8 	stp	x8, x9, [sp, #16]
    40007700:	f90013ff 	str	xzr, [sp, #32]
    40007704:	9400023c 	bl	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>
    40007708:	a9467bfd 	ldp	x29, x30, [sp, #96]
    4000770c:	9101c3ff 	add	sp, sp, #0x70
    40007710:	d65f03c0 	ret

0000000040007714 <_ZN4core6option13expect_failed17hcf6d0b343a2b6b98E>:
    40007714:	d10183ff 	sub	sp, sp, #0x60
    40007718:	a9057bfd 	stp	x29, x30, [sp, #80]
    4000771c:	910143fd 	add	x29, sp, #0x50
    40007720:	910003e8 	mov	x8, sp
    40007724:	d503201f 	nop
    40007728:	1000f969 	adr	x9, 40009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>
    4000772c:	a93f27a8 	stp	x8, x9, [x29, #-16]
    40007730:	d0000008 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    40007734:	9126c108 	add	x8, x8, #0x9b0
    40007738:	52800029 	mov	w9, #0x1                   	// #1
    4000773c:	a90007e0 	stp	x0, x1, [sp]
    40007740:	910043e0 	add	x0, sp, #0x10
    40007744:	a90127e8 	stp	x8, x9, [sp, #16]
    40007748:	d10043a8 	sub	x8, x29, #0x10
    4000774c:	aa0203e1 	mov	x1, x2
    40007750:	a902ffe9 	stp	x9, xzr, [sp, #40]
    40007754:	f90013e8 	str	x8, [sp, #32]
    40007758:	9400004a 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

000000004000775c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE>:
    4000775c:	d10243ff 	sub	sp, sp, #0x90
    40007760:	a9067bfd 	stp	x29, x30, [sp, #96]
    40007764:	a90757f6 	stp	x22, x21, [sp, #112]
    40007768:	a9084ff4 	stp	x20, x19, [sp, #128]
    4000776c:	910183fd 	add	x29, sp, #0x60
    40007770:	a9434c34 	ldp	x20, x19, [x1, #48]
    40007774:	aa0003f5 	mov	x21, x0
    40007778:	d503201f 	nop
    4000777c:	10022ea1 	adr	x1, 4000bd50 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2188>
    40007780:	52800182 	mov	w2, #0xc                   	// #12
    40007784:	f9400e76 	ldr	x22, [x19, #24]
    40007788:	aa1403e0 	mov	x0, x20
    4000778c:	d63f02c0 	blr	x22
    40007790:	360000e0 	tbz	w0, #0, 400077ac <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE+0x50>
    40007794:	52800020 	mov	w0, #0x1                   	// #1
    40007798:	a9484ff4 	ldp	x20, x19, [sp, #128]
    4000779c:	a94757f6 	ldp	x22, x21, [sp, #112]
    400077a0:	a9467bfd 	ldp	x29, x30, [sp, #96]
    400077a4:	910243ff 	add	sp, sp, #0x90
    400077a8:	d65f03c0 	ret
    400077ac:	f94006a8 	ldr	x8, [x21, #8]
    400077b0:	d503201f 	nop
    400077b4:	1000f509 	adr	x9, 40009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>
    400077b8:	910003e2 	mov	x2, sp
    400077bc:	aa1403e0 	mov	x0, x20
    400077c0:	aa1303e1 	mov	x1, x19
    400077c4:	a90327e8 	stp	x8, x9, [sp, #48]
    400077c8:	9100410a 	add	x10, x8, #0x10
    400077cc:	d503201f 	nop
    400077d0:	1000d429 	adr	x9, 40009254 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hbceed844c93c45feE>
    400077d4:	91005108 	add	x8, x8, #0x14
    400077d8:	a90427ea 	stp	x10, x9, [sp, #64]
    400077dc:	a90527e8 	stp	x8, x9, [sp, #80]
    400077e0:	d503201f 	nop
    400077e4:	100229e8 	adr	x8, 4000bd20 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2158>
    400077e8:	52800069 	mov	w9, #0x3                   	// #3
    400077ec:	a90027e8 	stp	x8, x9, [sp]
    400077f0:	9100c3e8 	add	x8, sp, #0x30
    400077f4:	a901ffe9 	stp	x9, xzr, [sp, #24]
    400077f8:	f9000be8 	str	x8, [sp, #16]
    400077fc:	940001fe 	bl	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>
    40007800:	360000e0 	tbz	w0, #0, 4000781c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE+0xc0>
    40007804:	52800020 	mov	w0, #0x1                   	// #1
    40007808:	a9484ff4 	ldp	x20, x19, [sp, #128]
    4000780c:	a94757f6 	ldp	x22, x21, [sp, #112]
    40007810:	a9467bfd 	ldp	x29, x30, [sp, #96]
    40007814:	910243ff 	add	sp, sp, #0x90
    40007818:	d65f03c0 	ret
    4000781c:	d503201f 	nop
    40007820:	100229e1 	adr	x1, 4000bd5c <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2194>
    40007824:	aa1403e0 	mov	x0, x20
    40007828:	52800042 	mov	w2, #0x2                   	// #2
    4000782c:	d63f02c0 	blr	x22
    40007830:	360000e0 	tbz	w0, #0, 4000784c <_ZN73_$LT$core..panic..panic_info..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h57f7153a5e740a1cE+0xf0>
    40007834:	52800020 	mov	w0, #0x1                   	// #1
    40007838:	a9484ff4 	ldp	x20, x19, [sp, #128]
    4000783c:	a94757f6 	ldp	x22, x21, [sp, #112]
    40007840:	a9467bfd 	ldp	x29, x30, [sp, #96]
    40007844:	910243ff 	add	sp, sp, #0x90
    40007848:	d65f03c0 	ret
    4000784c:	f94002a1 	ldr	x1, [x21]
    40007850:	9100c3e0 	add	x0, sp, #0x30
    40007854:	52800602 	mov	w2, #0x30                  	// #48
    40007858:	940007e0 	bl	400097d8 <memcpy>
    4000785c:	9100c3e2 	add	x2, sp, #0x30
    40007860:	aa1403e0 	mov	x0, x20
    40007864:	aa1303e1 	mov	x1, x19
    40007868:	940001e3 	bl	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>
    4000786c:	a9484ff4 	ldp	x20, x19, [sp, #128]
    40007870:	a94757f6 	ldp	x22, x21, [sp, #112]
    40007874:	a9467bfd 	ldp	x29, x30, [sp, #96]
    40007878:	910243ff 	add	sp, sp, #0x90
    4000787c:	d65f03c0 	ret

0000000040007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>:
    40007880:	d100c3ff 	sub	sp, sp, #0x30
    40007884:	a9027bfd 	stp	x29, x30, [sp, #32]
    40007888:	910083fd 	add	x29, sp, #0x20
    4000788c:	52800028 	mov	w8, #0x1                   	// #1
    40007890:	a90087e0 	stp	x0, x1, [sp, #8]
    40007894:	910023e0 	add	x0, sp, #0x8
    40007898:	790033e8 	strh	w8, [sp, #24]
    4000789c:	97ffef79 	bl	40003680 <rust_begin_unwind>

00000000400078a0 <_ZN4core9panicking18panic_nounwind_fmt17he9ad42e435c32f08E>:
    400078a0:	d10203ff 	sub	sp, sp, #0x80
    400078a4:	a9057bfd 	stp	x29, x30, [sp, #80]
    400078a8:	f90033f5 	str	x21, [sp, #96]
    400078ac:	a9074ff4 	stp	x20, x19, [sp, #112]
    400078b0:	910143fd 	add	x29, sp, #0x50
    400078b4:	aa0203f3 	mov	x19, x2
    400078b8:	2a0103f4 	mov	w20, w1
    400078bc:	aa0003e1 	mov	x1, x0
    400078c0:	910023e0 	add	x0, sp, #0x8
    400078c4:	52800602 	mov	w2, #0x30                  	// #48
    400078c8:	910023f5 	add	x21, sp, #0x8
    400078cc:	940007c3 	bl	400097d8 <memcpy>
    400078d0:	d10063a0 	sub	x0, x29, #0x18
    400078d4:	a93ecfb5 	stp	x21, x19, [x29, #-24]
    400078d8:	381f83bf 	sturb	wzr, [x29, #-8]
    400078dc:	381f93b4 	sturb	w20, [x29, #-7]
    400078e0:	97ffef68 	bl	40003680 <rust_begin_unwind>

00000000400078e4 <_ZN4core9panicking5panic17h63881a74b86b2753E>:
    400078e4:	d10143ff 	sub	sp, sp, #0x50
    400078e8:	a9047bfd 	stp	x29, x30, [sp, #64]
    400078ec:	910103fd 	add	x29, sp, #0x40
    400078f0:	d10043a8 	sub	x8, x29, #0x10
    400078f4:	52800029 	mov	w9, #0x1                   	// #1
    400078f8:	a93f07a0 	stp	x0, x1, [x29, #-16]
    400078fc:	a90027e8 	stp	x8, x9, [sp]
    40007900:	52800108 	mov	w8, #0x8                   	// #8
    40007904:	910003e0 	mov	x0, sp
    40007908:	aa0203e1 	mov	x1, x2
    4000790c:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40007910:	f9000be8 	str	x8, [sp, #16]
    40007914:	97ffffdb 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040007918 <_ZN4core9panicking14panic_nounwind17hb227d2a5a34ad495E>:
    40007918:	d10143ff 	sub	sp, sp, #0x50
    4000791c:	a9047bfd 	stp	x29, x30, [sp, #64]
    40007920:	910103fd 	add	x29, sp, #0x40
    40007924:	d10043a8 	sub	x8, x29, #0x10
    40007928:	52800029 	mov	w9, #0x1                   	// #1
    4000792c:	a93f07a0 	stp	x0, x1, [x29, #-16]
    40007930:	a90027e8 	stp	x8, x9, [sp]
    40007934:	52800108 	mov	w8, #0x8                   	// #8
    40007938:	d503201f 	nop
    4000793c:	10022222 	adr	x2, 4000bd80 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x21b8>
    40007940:	910003e0 	mov	x0, sp
    40007944:	2a1f03e1 	mov	w1, wzr
    40007948:	a901ffff 	stp	xzr, xzr, [sp, #24]
    4000794c:	f9000be8 	str	x8, [sp, #16]
    40007950:	97ffffd4 	bl	400078a0 <_ZN4core9panicking18panic_nounwind_fmt17he9ad42e435c32f08E>

0000000040007954 <_ZN4core9panicking18panic_bounds_check17h18a3fb35a960f8a9E>:
    40007954:	d101c3ff 	sub	sp, sp, #0x70
    40007958:	a9067bfd 	stp	x29, x30, [sp, #96]
    4000795c:	910183fd 	add	x29, sp, #0x60
    40007960:	910023e8 	add	x8, sp, #0x8
    40007964:	d503201f 	nop
    40007968:	1000d3c9 	adr	x9, 400093e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E>
    4000796c:	a93e27a8 	stp	x8, x9, [x29, #-32]
    40007970:	910003e8 	mov	x8, sp
    40007974:	a93f27a8 	stp	x8, x9, [x29, #-16]
    40007978:	d503201f 	nop
    4000797c:	100221a8 	adr	x8, 4000bdb0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x21e8>
    40007980:	52800049 	mov	w9, #0x2                   	// #2
    40007984:	a90007e0 	stp	x0, x1, [sp]
    40007988:	910043e0 	add	x0, sp, #0x10
    4000798c:	a90127e8 	stp	x8, x9, [sp, #16]
    40007990:	d10083a8 	sub	x8, x29, #0x20
    40007994:	aa0203e1 	mov	x1, x2
    40007998:	a902ffe9 	stp	x9, xzr, [sp, #40]
    4000799c:	f90013e8 	str	x8, [sp, #32]
    400079a0:	97ffffb8 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

00000000400079a4 <_ZN4core9panicking30panic_null_pointer_dereference17h9acbe6818f596985E>:
    400079a4:	d10103ff 	sub	sp, sp, #0x40
    400079a8:	a9037bfd 	stp	x29, x30, [sp, #48]
    400079ac:	9100c3fd 	add	x29, sp, #0x30
    400079b0:	d503201f 	nop
    400079b4:	10022228 	adr	x8, 4000bdf8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2230>
    400079b8:	52800029 	mov	w9, #0x1                   	// #1
    400079bc:	aa0003e2 	mov	x2, x0
    400079c0:	a90027e8 	stp	x8, x9, [sp]
    400079c4:	52800108 	mov	w8, #0x8                   	// #8
    400079c8:	910003e0 	mov	x0, sp
    400079cc:	2a1f03e1 	mov	w1, wzr
    400079d0:	a901ffff 	stp	xzr, xzr, [sp, #24]
    400079d4:	f9000be8 	str	x8, [sp, #16]
    400079d8:	97ffffb2 	bl	400078a0 <_ZN4core9panicking18panic_nounwind_fmt17he9ad42e435c32f08E>

00000000400079dc <_ZN4core9panicking13assert_failed17h85c904e705525b01E>:
    400079dc:	d10083ff 	sub	sp, sp, #0x20
    400079e0:	a9017bfd 	stp	x29, x30, [sp, #16]
    400079e4:	910043fd 	add	x29, sp, #0x10
    400079e8:	a9000be1 	stp	x1, x2, [sp]
    400079ec:	d503201f 	nop
    400079f0:	100220c2 	adr	x2, 4000be08 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2240>
    400079f4:	9400071f 	bl	40009670 <OUTLINED_FUNCTION_0>

00000000400079f8 <_ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E>:
    400079f8:	d103c3ff 	sub	sp, sp, #0xf0
    400079fc:	a90d7bfd 	stp	x29, x30, [sp, #208]
    40007a00:	a90e4ff4 	stp	x20, x19, [sp, #224]
    40007a04:	910343fd 	add	x29, sp, #0xd0
    40007a08:	d37d1c08 	ubfiz	x8, x0, #3, #8
    40007a0c:	d503201f 	nop
    40007a10:	10023749 	adr	x9, 4000c0f8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2530>
    40007a14:	d503201f 	nop
    40007a18:	100237ca 	adr	x10, 4000c110 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2548>
    40007a1c:	aa0603f3 	mov	x19, x6
    40007a20:	f8686929 	ldr	x9, [x9, x8]
    40007a24:	f8686948 	ldr	x8, [x10, x8]
    40007a28:	f94000aa 	ldr	x10, [x5]
    40007a2c:	a9000be1 	stp	x1, x2, [sp]
    40007a30:	a90113e3 	stp	x3, x4, [sp, #16]
    40007a34:	a90223e9 	stp	x9, x8, [sp, #32]
    40007a38:	b50001ea 	cbnz	x10, 40007a74 <_ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E+0x7c>
    40007a3c:	910083e8 	add	x8, sp, #0x20
    40007a40:	d503201f 	nop
    40007a44:	1000e089 	adr	x9, 40009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>
    40007a48:	a90627e8 	stp	x8, x9, [sp, #96]
    40007a4c:	910003e8 	mov	x8, sp
    40007a50:	d503201f 	nop
    40007a54:	1000d7e9 	adr	x9, 40009550 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd41afde49ccaa8bE>
    40007a58:	a90727e8 	stp	x8, x9, [sp, #112]
    40007a5c:	910043e8 	add	x8, sp, #0x10
    40007a60:	a90827e8 	stp	x8, x9, [sp, #128]
    40007a64:	d503201f 	nop
    40007a68:	10021f88 	adr	x8, 4000be58 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2290>
    40007a6c:	52800069 	mov	w9, #0x3                   	// #3
    40007a70:	14000016 	b	40007ac8 <_ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E+0xd0>
    40007a74:	9100c3e0 	add	x0, sp, #0x30
    40007a78:	aa0503e1 	mov	x1, x5
    40007a7c:	52800602 	mov	w2, #0x30                  	// #48
    40007a80:	9100c3f4 	add	x20, sp, #0x30
    40007a84:	94000755 	bl	400097d8 <memcpy>
    40007a88:	910083e8 	add	x8, sp, #0x20
    40007a8c:	d503201f 	nop
    40007a90:	1000de29 	adr	x9, 40009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>
    40007a94:	a90627e8 	stp	x8, x9, [sp, #96]
    40007a98:	d503201f 	nop
    40007a9c:	100029e8 	adr	x8, 40007fd8 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17he73f4a00f700a4dfE>
    40007aa0:	a90723f4 	stp	x20, x8, [sp, #112]
    40007aa4:	910003e8 	mov	x8, sp
    40007aa8:	d503201f 	nop
    40007aac:	1000d529 	adr	x9, 40009550 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd41afde49ccaa8bE>
    40007ab0:	a90827e8 	stp	x8, x9, [sp, #128]
    40007ab4:	910043e8 	add	x8, sp, #0x10
    40007ab8:	a90927e8 	stp	x8, x9, [sp, #144]
    40007abc:	d503201f 	nop
    40007ac0:	10021ec8 	adr	x8, 4000be98 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x22d0>
    40007ac4:	52800089 	mov	w9, #0x4                   	// #4
    40007ac8:	a93d27a8 	stp	x8, x9, [x29, #-48]
    40007acc:	910183e8 	add	x8, sp, #0x60
    40007ad0:	d100c3a0 	sub	x0, x29, #0x30
    40007ad4:	aa1303e1 	mov	x1, x19
    40007ad8:	a93effa9 	stp	x9, xzr, [x29, #-24]
    40007adc:	f81e03a8 	stur	x8, [x29, #-32]
    40007ae0:	97ffff68 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040007ae4 <_ZN4core6result13unwrap_failed17hd6f48f9c0600905bE>:
    40007ae4:	d10203ff 	sub	sp, sp, #0x80
    40007ae8:	a9077bfd 	stp	x29, x30, [sp, #112]
    40007aec:	9101c3fd 	add	x29, sp, #0x70
    40007af0:	910003e8 	mov	x8, sp
    40007af4:	d503201f 	nop
    40007af8:	1000dae9 	adr	x9, 40009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>
    40007afc:	a93e27a8 	stp	x8, x9, [x29, #-32]
    40007b00:	910043e8 	add	x8, sp, #0x10
    40007b04:	d503201f 	nop
    40007b08:	1000d249 	adr	x9, 40009550 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd41afde49ccaa8bE>
    40007b0c:	a9008be1 	stp	x1, x2, [sp, #8]
    40007b10:	aa0403e1 	mov	x1, x4
    40007b14:	a93f27a8 	stp	x8, x9, [x29, #-16]
    40007b18:	d503201f 	nop
    40007b1c:	10021e28 	adr	x8, 4000bee0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2318>
    40007b20:	f90003e0 	str	x0, [sp]
    40007b24:	52800049 	mov	w9, #0x2                   	// #2
    40007b28:	910083e0 	add	x0, sp, #0x20
    40007b2c:	a901a3e3 	stp	x3, x8, [sp, #24]
    40007b30:	d10083a8 	sub	x8, x29, #0x20
    40007b34:	a903ffe9 	stp	x9, xzr, [sp, #56]
    40007b38:	a902a3e9 	stp	x9, x8, [sp, #40]
    40007b3c:	97ffff51 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040007b40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E>:
    40007b40:	d10203ff 	sub	sp, sp, #0x80
    40007b44:	a9027bfd 	stp	x29, x30, [sp, #32]
    40007b48:	a9036ffc 	stp	x28, x27, [sp, #48]
    40007b4c:	a90467fa 	stp	x26, x25, [sp, #64]
    40007b50:	a9055ff8 	stp	x24, x23, [sp, #80]
    40007b54:	a90657f6 	stp	x22, x21, [sp, #96]
    40007b58:	a9074ff4 	stp	x20, x19, [sp, #112]
    40007b5c:	910083fd 	add	x29, sp, #0x20
    40007b60:	f9400808 	ldr	x8, [x0, #16]
    40007b64:	b207c3f7 	mov	x23, #0x202020202020202     	// #144680345676153346
    40007b68:	b200c3f8 	mov	x24, #0x101010101010101     	// #72340172838076673
    40007b6c:	aa0203f9 	mov	x25, x2
    40007b70:	aa0103f4 	mov	x20, x1
    40007b74:	aa1f03f5 	mov	x21, xzr
    40007b78:	f81f83a8 	stur	x8, [x29, #-8]
    40007b7c:	a9402009 	ldp	x9, x8, [x0]
    40007b80:	aa1f03fa 	mov	x26, xzr
    40007b84:	2a1f03fb 	mov	w27, wzr
    40007b88:	b205c2f7 	orr	x23, x23, #0x808080808080808
    40007b8c:	f2802018 	movk	x24, #0x100
    40007b90:	b201c3f6 	mov	x22, #0x8080808080808080    	// #-9187201950435737472
    40007b94:	a900a7e8 	stp	x8, x9, [sp, #8]
    40007b98:	d1000428 	sub	x8, x1, #0x1
    40007b9c:	f90003e8 	str	x8, [sp]
    40007ba0:	1400000e 	b	40007bd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x98>
    40007ba4:	f94003e8 	ldr	x8, [sp]
    40007ba8:	38736908 	ldrb	w8, [x8, x19]
    40007bac:	7100291f 	cmp	w8, #0xa
    40007bb0:	1a9f17e8 	cset	w8, eq	// eq = none
    40007bb4:	f85f83a9 	ldur	x9, [x29, #-8]
    40007bb8:	cb1a0262 	sub	x2, x19, x26
    40007bbc:	8b1a0281 	add	x1, x20, x26
    40007bc0:	39000128 	strb	w8, [x9]
    40007bc4:	a94083e8 	ldp	x8, x0, [sp, #8]
    40007bc8:	f9400d08 	ldr	x8, [x8, #24]
    40007bcc:	d63f0100 	blr	x8
    40007bd0:	aa1c03fa 	mov	x26, x28
    40007bd4:	37000ce0 	tbnz	w0, #0, 40007d70 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x230>
    40007bd8:	37000c9b 	tbnz	w27, #0, 40007d68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x228>
    40007bdc:	eb15033f 	cmp	x25, x21
    40007be0:	540000c2 	b.cs	40007bf8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0xb8>  // b.hs, b.nlast
    40007be4:	aa1503fc 	mov	x28, x21
    40007be8:	1400004c 	b	40007d18 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d8>
    40007bec:	eb19039f 	cmp	x28, x25
    40007bf0:	aa1c03f5 	mov	x21, x28
    40007bf4:	54000928 	b.hi	40007d18 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d8>  // b.pmore
    40007bf8:	cb150328 	sub	x8, x25, x21
    40007bfc:	8b150289 	add	x9, x20, x21
    40007c00:	f1003d1f 	cmp	x8, #0xf
    40007c04:	54000168 	b.hi	40007c30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0xf0>  // b.pmore
    40007c08:	eb15033f 	cmp	x25, x21
    40007c0c:	54000840 	b.eq	40007d14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d4>  // b.none
    40007c10:	aa1f03eb 	mov	x11, xzr
    40007c14:	386b692a 	ldrb	w10, [x9, x11]
    40007c18:	7100295f 	cmp	w10, #0xa
    40007c1c:	540005e0 	b.eq	40007cd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x198>  // b.none
    40007c20:	9100056b 	add	x11, x11, #0x1
    40007c24:	eb0b011f 	cmp	x8, x11
    40007c28:	54ffff61 	b.ne	40007c14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0xd4>  // b.any
    40007c2c:	1400003a 	b	40007d14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d4>
    40007c30:	91001d2a 	add	x10, x9, #0x7
    40007c34:	927df14c 	and	x12, x10, #0xfffffffffffffff8
    40007c38:	eb09018a 	subs	x10, x12, x9
    40007c3c:	54000180 	b.eq	40007c6c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x12c>  // b.none
    40007c40:	aa1f03eb 	mov	x11, xzr
    40007c44:	386b692d 	ldrb	w13, [x9, x11]
    40007c48:	710029bf 	cmp	w13, #0xa
    40007c4c:	54000460 	b.eq	40007cd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x198>  // b.none
    40007c50:	9100056b 	add	x11, x11, #0x1
    40007c54:	eb0b015f 	cmp	x10, x11
    40007c58:	54ffff61 	b.ne	40007c44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x104>  // b.any
    40007c5c:	d100410b 	sub	x11, x8, #0x10
    40007c60:	eb0b015f 	cmp	x10, x11
    40007c64:	54000069 	b.ls	40007c70 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x130>  // b.plast
    40007c68:	14000012 	b	40007cb0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x170>
    40007c6c:	d100410b 	sub	x11, x8, #0x10
    40007c70:	5280010d 	mov	w13, #0x8                   	// #8
    40007c74:	8b0c01ac 	add	x12, x13, x12
    40007c78:	a97fb98d 	ldp	x13, x14, [x12, #-8]
    40007c7c:	ca1701af 	eor	x15, x13, x23
    40007c80:	ca1701ce 	eor	x14, x14, x23
    40007c84:	cb0f030f 	sub	x15, x24, x15
    40007c88:	cb0e0310 	sub	x16, x24, x14
    40007c8c:	aa0d01ed 	orr	x13, x15, x13
    40007c90:	aa0e020e 	orr	x14, x16, x14
    40007c94:	8a0e01ad 	and	x13, x13, x14
    40007c98:	ea2d02df 	bics	xzr, x22, x13
    40007c9c:	540000a1 	b.ne	40007cb0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x170>  // b.any
    40007ca0:	9100414a 	add	x10, x10, #0x10
    40007ca4:	9100418c 	add	x12, x12, #0x10
    40007ca8:	eb0b015f 	cmp	x10, x11
    40007cac:	54fffe69 	b.ls	40007c78 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x138>  // b.plast
    40007cb0:	eb0a011f 	cmp	x8, x10
    40007cb4:	aa0a03eb 	mov	x11, x10
    40007cb8:	540002e0 	b.eq	40007d14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d4>  // b.none
    40007cbc:	386b692a 	ldrb	w10, [x9, x11]
    40007cc0:	7100295f 	cmp	w10, #0xa
    40007cc4:	540000a0 	b.eq	40007cd8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x198>  // b.none
    40007cc8:	9100056b 	add	x11, x11, #0x1
    40007ccc:	eb0b011f 	cmp	x8, x11
    40007cd0:	54ffff61 	b.ne	40007cbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x17c>  // b.any
    40007cd4:	14000010 	b	40007d14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1d4>
    40007cd8:	8b0b02a8 	add	x8, x21, x11
    40007cdc:	eb19011f 	cmp	x8, x25
    40007ce0:	9100051c 	add	x28, x8, #0x1
    40007ce4:	54fff842 	b.cs	40007bec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0xac>  // b.hs, b.nlast
    40007ce8:	8b150288 	add	x8, x20, x21
    40007cec:	386b6908 	ldrb	w8, [x8, x11]
    40007cf0:	7100291f 	cmp	w8, #0xa
    40007cf4:	54fff7c1 	b.ne	40007bec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0xac>  // b.any
    40007cf8:	2a1f03fb 	mov	w27, wzr
    40007cfc:	aa1c03f5 	mov	x21, x28
    40007d00:	aa1c03f3 	mov	x19, x28
    40007d04:	f85f83a8 	ldur	x8, [x29, #-8]
    40007d08:	39400108 	ldrb	w8, [x8]
    40007d0c:	36000268 	tbz	w8, #0, 40007d58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x218>
    40007d10:	1400000b 	b	40007d3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x1fc>
    40007d14:	aa1903fc 	mov	x28, x25
    40007d18:	eb1a033f 	cmp	x25, x26
    40007d1c:	54000260 	b.eq	40007d68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x228>  // b.none
    40007d20:	5280003b 	mov	w27, #0x1                   	// #1
    40007d24:	aa1c03f5 	mov	x21, x28
    40007d28:	aa1a03fc 	mov	x28, x26
    40007d2c:	aa1903f3 	mov	x19, x25
    40007d30:	f85f83a8 	ldur	x8, [x29, #-8]
    40007d34:	39400108 	ldrb	w8, [x8]
    40007d38:	36000108 	tbz	w8, #0, 40007d58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x218>
    40007d3c:	a94083e8 	ldp	x8, x0, [sp, #8]
    40007d40:	d0000001 	adrp	x1, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    40007d44:	912d8821 	add	x1, x1, #0xb62
    40007d48:	52800082 	mov	w2, #0x4                   	// #4
    40007d4c:	f9400d08 	ldr	x8, [x8, #24]
    40007d50:	d63f0100 	blr	x8
    40007d54:	370000e0 	tbnz	w0, #0, 40007d70 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x230>
    40007d58:	eb1a027f 	cmp	x19, x26
    40007d5c:	54fff241 	b.ne	40007ba4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x64>  // b.any
    40007d60:	2a1f03e8 	mov	w8, wzr
    40007d64:	17ffff94 	b	40007bb4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x74>
    40007d68:	2a1f03e0 	mov	w0, wzr
    40007d6c:	14000002 	b	40007d74 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E+0x234>
    40007d70:	52800020 	mov	w0, #0x1                   	// #1
    40007d74:	a9474ff4 	ldp	x20, x19, [sp, #112]
    40007d78:	a94657f6 	ldp	x22, x21, [sp, #96]
    40007d7c:	a9455ff8 	ldp	x24, x23, [sp, #80]
    40007d80:	a94467fa 	ldp	x26, x25, [sp, #64]
    40007d84:	a9436ffc 	ldp	x28, x27, [sp, #48]
    40007d88:	a9427bfd 	ldp	x29, x30, [sp, #32]
    40007d8c:	910203ff 	add	sp, sp, #0x80
    40007d90:	d65f03c0 	ret

0000000040007d94 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$10write_char17he343687b709209fbE>:
    40007d94:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40007d98:	a90157f6 	stp	x22, x21, [sp, #16]
    40007d9c:	a9024ff4 	stp	x20, x19, [sp, #32]
    40007da0:	910003fd 	mov	x29, sp
    40007da4:	a940d015 	ldp	x21, x20, [x0, #8]
    40007da8:	f9400013 	ldr	x19, [x0]
    40007dac:	39400288 	ldrb	w8, [x20]
    40007db0:	36000208 	tbz	w8, #0, 40007df0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$10write_char17he343687b709209fbE+0x5c>
    40007db4:	f9400ea9 	ldr	x9, [x21, #24]
    40007db8:	d0000008 	adrp	x8, 40009000 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x14>
    40007dbc:	912d8908 	add	x8, x8, #0xb62
    40007dc0:	aa1303e0 	mov	x0, x19
    40007dc4:	2a0103f6 	mov	w22, w1
    40007dc8:	aa0803e1 	mov	x1, x8
    40007dcc:	52800082 	mov	w2, #0x4                   	// #4
    40007dd0:	d63f0120 	blr	x9
    40007dd4:	2a1603e1 	mov	w1, w22
    40007dd8:	340000c0 	cbz	w0, 40007df0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$10write_char17he343687b709209fbE+0x5c>
    40007ddc:	a9424ff4 	ldp	x20, x19, [sp, #32]
    40007de0:	52800020 	mov	w0, #0x1                   	// #1
    40007de4:	a94157f6 	ldp	x22, x21, [sp, #16]
    40007de8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40007dec:	d65f03c0 	ret
    40007df0:	7100283f 	cmp	w1, #0xa
    40007df4:	aa1303e0 	mov	x0, x19
    40007df8:	1a9f17e8 	cset	w8, eq	// eq = none
    40007dfc:	39000288 	strb	w8, [x20]
    40007e00:	a9424ff4 	ldp	x20, x19, [sp, #32]
    40007e04:	f94012a2 	ldr	x2, [x21, #32]
    40007e08:	a94157f6 	ldp	x22, x21, [sp, #16]
    40007e0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40007e10:	d61f0040 	br	x2

0000000040007e14 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E>:
    40007e14:	d102c3ff 	sub	sp, sp, #0xb0
    40007e18:	a9067bfd 	stp	x29, x30, [sp, #96]
    40007e1c:	f9003bf9 	str	x25, [sp, #112]
    40007e20:	a9085ff8 	stp	x24, x23, [sp, #128]
    40007e24:	a90957f6 	stp	x22, x21, [sp, #144]
    40007e28:	a90a4ff4 	stp	x20, x19, [sp, #160]
    40007e2c:	910183fd 	add	x29, sp, #0x60
    40007e30:	39402008 	ldrb	w8, [x0, #8]
    40007e34:	aa0003f3 	mov	x19, x0
    40007e38:	52800038 	mov	w24, #0x1                   	// #1
    40007e3c:	52800020 	mov	w0, #0x1                   	// #1
    40007e40:	370009c8 	tbnz	w8, #0, 40007f78 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x164>
    40007e44:	f9400275 	ldr	x21, [x19]
    40007e48:	39402668 	ldrb	w8, [x19, #9]
    40007e4c:	aa0103f7 	mov	x23, x1
    40007e50:	aa0203f6 	mov	x22, x2
    40007e54:	aa0403f9 	mov	x25, x4
    40007e58:	aa0303f4 	mov	x20, x3
    40007e5c:	394092a9 	ldrb	w9, [x21, #36]
    40007e60:	371003e9 	tbnz	w9, #2, 40007edc <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0xc8>
    40007e64:	a9432aa0 	ldp	x0, x10, [x21, #48]
    40007e68:	d503201f 	nop
    40007e6c:	10020629 	adr	x9, 4000bf30 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2368>
    40007e70:	d503201f 	nop
    40007e74:	700205eb 	adr	x11, 4000bf33 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x236b>
    40007e78:	7100011f 	cmp	w8, #0x0
    40007e7c:	52800048 	mov	w8, #0x2                   	// #2
    40007e80:	f9400d4a 	ldr	x10, [x10, #24]
    40007e84:	9a891161 	csel	x1, x11, x9, ne	// ne = any
    40007e88:	9a881502 	cinc	x2, x8, eq	// eq = none
    40007e8c:	d63f0140 	blr	x10
    40007e90:	37000720 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007e94:	a94322a0 	ldp	x0, x8, [x21, #48]
    40007e98:	aa1703e1 	mov	x1, x23
    40007e9c:	aa1603e2 	mov	x2, x22
    40007ea0:	f9400d08 	ldr	x8, [x8, #24]
    40007ea4:	d63f0100 	blr	x8
    40007ea8:	37000660 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007eac:	a94322a0 	ldp	x0, x8, [x21, #48]
    40007eb0:	d503201f 	nop
    40007eb4:	10020121 	adr	x1, 4000bed8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2310>
    40007eb8:	52800042 	mov	w2, #0x2                   	// #2
    40007ebc:	f9400d08 	ldr	x8, [x8, #24]
    40007ec0:	d63f0100 	blr	x8
    40007ec4:	37000580 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007ec8:	f9400f28 	ldr	x8, [x25, #24]
    40007ecc:	aa1403e0 	mov	x0, x20
    40007ed0:	aa1503e1 	mov	x1, x21
    40007ed4:	d63f0100 	blr	x8
    40007ed8:	14000028 	b	40007f78 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x164>
    40007edc:	37000108 	tbnz	w8, #0, 40007efc <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0xe8>
    40007ee0:	a94322a0 	ldp	x0, x8, [x21, #48]
    40007ee4:	d503201f 	nop
    40007ee8:	30020261 	adr	x1, 4000bf35 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x236d>
    40007eec:	52800062 	mov	w2, #0x3                   	// #3
    40007ef0:	f9400d08 	ldr	x8, [x8, #24]
    40007ef4:	d63f0100 	blr	x8
    40007ef8:	370003e0 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007efc:	a9432aa9 	ldp	x9, x10, [x21, #48]
    40007f00:	52800028 	mov	w8, #0x1                   	// #1
    40007f04:	390073a8 	strb	w8, [x29, #28]
    40007f08:	910073a8 	add	x8, x29, #0x1c
    40007f0c:	910083e0 	add	x0, sp, #0x20
    40007f10:	aa1503e1 	mov	x1, x21
    40007f14:	52800602 	mov	w2, #0x30                  	// #48
    40007f18:	f9000fe8 	str	x8, [sp, #24]
    40007f1c:	a900abe9 	stp	x9, x10, [sp, #8]
    40007f20:	9400062e 	bl	400097d8 <memcpy>
    40007f24:	910023e8 	add	x8, sp, #0x8
    40007f28:	d503201f 	nop
    40007f2c:	1001fea9 	adr	x9, 4000bf00 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2338>
    40007f30:	910023e0 	add	x0, sp, #0x8
    40007f34:	aa1703e1 	mov	x1, x23
    40007f38:	aa1603e2 	mov	x2, x22
    40007f3c:	a90527e8 	stp	x8, x9, [sp, #80]
    40007f40:	97ffff00 	bl	40007b40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E>
    40007f44:	37000180 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007f48:	d503201f 	nop
    40007f4c:	1001fc61 	adr	x1, 4000bed8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2310>
    40007f50:	910023e0 	add	x0, sp, #0x8
    40007f54:	52800042 	mov	w2, #0x2                   	// #2
    40007f58:	97fffefa 	bl	40007b40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h4977989e47e576c8E>
    40007f5c:	370000c0 	tbnz	w0, #0, 40007f74 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x160>
    40007f60:	f9400f28 	ldr	x8, [x25, #24]
    40007f64:	910083e1 	add	x1, sp, #0x20
    40007f68:	aa1403e0 	mov	x0, x20
    40007f6c:	d63f0100 	blr	x8
    40007f70:	36000180 	tbz	w0, #0, 40007fa0 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x18c>
    40007f74:	52800020 	mov	w0, #0x1                   	// #1
    40007f78:	39002260 	strb	w0, [x19, #8]
    40007f7c:	aa1303e0 	mov	x0, x19
    40007f80:	f9403bf9 	ldr	x25, [sp, #112]
    40007f84:	39002678 	strb	w24, [x19, #9]
    40007f88:	a94a4ff4 	ldp	x20, x19, [sp, #160]
    40007f8c:	a94957f6 	ldp	x22, x21, [sp, #144]
    40007f90:	a9485ff8 	ldp	x24, x23, [sp, #128]
    40007f94:	a9467bfd 	ldp	x29, x30, [sp, #96]
    40007f98:	9102c3ff 	add	sp, sp, #0xb0
    40007f9c:	d65f03c0 	ret
    40007fa0:	a94523e0 	ldp	x0, x8, [sp, #80]
    40007fa4:	d503201f 	nop
    40007fa8:	1001fc81 	adr	x1, 4000bf38 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2370>
    40007fac:	52800042 	mov	w2, #0x2                   	// #2
    40007fb0:	f9400d08 	ldr	x8, [x8, #24]
    40007fb4:	d63f0100 	blr	x8
    40007fb8:	17fffff0 	b	40007f78 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E+0x164>

0000000040007fbc <_ZN4core3fmt5Write9write_fmt17hd44058050f2fc637E>:
    40007fbc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40007fc0:	910003fd 	mov	x29, sp
    40007fc4:	aa0103e2 	mov	x2, x1
    40007fc8:	d503201f 	nop
    40007fcc:	1001f9a1 	adr	x1, 4000bf00 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2338>
    40007fd0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40007fd4:	14000008 	b	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>

0000000040007fd8 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17he73f4a00f700a4dfE>:
    40007fd8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40007fdc:	910003fd 	mov	x29, sp
    40007fe0:	a9430428 	ldp	x8, x1, [x1, #48]
    40007fe4:	aa0003e2 	mov	x2, x0
    40007fe8:	aa0803e0 	mov	x0, x8
    40007fec:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40007ff0:	14000001 	b	40007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>

0000000040007ff4 <_ZN4core3fmt5write17h732150d678a1cfffE>:
    40007ff4:	d10203ff 	sub	sp, sp, #0x80
    40007ff8:	a9047bfd 	stp	x29, x30, [sp, #64]
    40007ffc:	a9055ff8 	stp	x24, x23, [sp, #80]
    40008000:	a90657f6 	stp	x22, x21, [sp, #96]
    40008004:	a9074ff4 	stp	x20, x19, [sp, #112]
    40008008:	910103fd 	add	x29, sp, #0x40
    4000800c:	52800408 	mov	w8, #0x20                  	// #32
    40008010:	aa0203f3 	mov	x19, x2
    40008014:	f90003ff 	str	xzr, [sp]
    40008018:	f90013e8 	str	x8, [sp, #32]
    4000801c:	52800068 	mov	w8, #0x3                   	// #3
    40008020:	3900a3e8 	strb	w8, [sp, #40]
    40008024:	f9401048 	ldr	x8, [x2, #32]
    40008028:	f9000bff 	str	xzr, [sp, #16]
    4000802c:	a90307e0 	stp	x0, x1, [sp, #48]
    40008030:	b40007e8 	cbz	x8, 4000812c <_ZN4core3fmt5write17h732150d678a1cfffE+0x138>
    40008034:	f9401669 	ldr	x9, [x19, #40]
    40008038:	b4000b29 	cbz	x9, 4000819c <_ZN4core3fmt5write17h732150d678a1cfffE+0x1a8>
    4000803c:	d37ae52a 	lsl	x10, x9, #6
    40008040:	f940026b 	ldr	x11, [x19]
    40008044:	d100052c 	sub	x12, x9, #0x1
    40008048:	f9400a75 	ldr	x21, [x19, #16]
    4000804c:	9240f18c 	and	x12, x12, #0x1fffffffffffffff
    40008050:	91006118 	add	x24, x8, #0x18
    40008054:	cb090d56 	sub	x22, x10, x9, lsl #3
    40008058:	91000594 	add	x20, x12, #0x1
    4000805c:	91002177 	add	x23, x11, #0x8
    40008060:	f94002e2 	ldr	x2, [x23]
    40008064:	b40000c2 	cbz	x2, 4000807c <_ZN4core3fmt5write17h732150d678a1cfffE+0x88>
    40008068:	a94323e0 	ldp	x0, x8, [sp, #48]
    4000806c:	f85f82e1 	ldur	x1, [x23, #-8]
    40008070:	f9400d08 	ldr	x8, [x8, #24]
    40008074:	d63f0100 	blr	x8
    40008078:	37000a80 	tbnz	w0, #0, 400081c8 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1d4>
    4000807c:	39406308 	ldrb	w8, [x24, #24]
    40008080:	29422f0a 	ldp	w10, w11, [x24, #16]
    40008084:	3900a3e8 	strb	w8, [sp, #40]
    40008088:	a97fa309 	ldp	x9, x8, [x24, #-8]
    4000808c:	29042fea 	stp	w10, w11, [sp, #32]
    40008090:	b4000189 	cbz	x9, 400080c0 <_ZN4core3fmt5write17h732150d678a1cfffE+0xcc>
    40008094:	f100053f 	cmp	x9, #0x1
    40008098:	54000081 	b.ne	400080a8 <_ZN4core3fmt5write17h732150d678a1cfffE+0xb4>  // b.any
    4000809c:	8b0812a8 	add	x8, x21, x8, lsl #4
    400080a0:	f9400109 	ldr	x9, [x8]
    400080a4:	b40000c9 	cbz	x9, 400080bc <_ZN4core3fmt5write17h732150d678a1cfffE+0xc8>
    400080a8:	f85e830a 	ldur	x10, [x24, #-24]
    400080ac:	a90023ff 	stp	xzr, x8, [sp]
    400080b0:	f100095f 	cmp	x10, #0x2
    400080b4:	54000101 	b.ne	400080d4 <_ZN4core3fmt5write17h732150d678a1cfffE+0xe0>  // b.any
    400080b8:	1400000d 	b	400080ec <_ZN4core3fmt5write17h732150d678a1cfffE+0xf8>
    400080bc:	f9400508 	ldr	x8, [x8, #8]
    400080c0:	52800029 	mov	w9, #0x1                   	// #1
    400080c4:	f85e830a 	ldur	x10, [x24, #-24]
    400080c8:	a90023e9 	stp	x9, x8, [sp]
    400080cc:	f100095f 	cmp	x10, #0x2
    400080d0:	540000e0 	b.eq	400080ec <_ZN4core3fmt5write17h732150d678a1cfffE+0xf8>  // b.none
    400080d4:	f85f0308 	ldur	x8, [x24, #-16]
    400080d8:	f100055f 	cmp	x10, #0x1
    400080dc:	540000e1 	b.ne	400080f8 <_ZN4core3fmt5write17h732150d678a1cfffE+0x104>  // b.any
    400080e0:	8b0812a8 	add	x8, x21, x8, lsl #4
    400080e4:	f9400109 	ldr	x9, [x8]
    400080e8:	b4000069 	cbz	x9, 400080f4 <_ZN4core3fmt5write17h732150d678a1cfffE+0x100>
    400080ec:	aa1f03e9 	mov	x9, xzr
    400080f0:	14000003 	b	400080fc <_ZN4core3fmt5write17h732150d678a1cfffE+0x108>
    400080f4:	f9400508 	ldr	x8, [x8, #8]
    400080f8:	52800029 	mov	w9, #0x1                   	// #1
    400080fc:	f940070a 	ldr	x10, [x24, #8]
    40008100:	910003e1 	mov	x1, sp
    40008104:	a90123e9 	stp	x9, x8, [sp, #16]
    40008108:	8b0a12aa 	add	x10, x21, x10, lsl #4
    4000810c:	a9402940 	ldp	x0, x10, [x10]
    40008110:	d63f0140 	blr	x10
    40008114:	370005a0 	tbnz	w0, #0, 400081c8 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1d4>
    40008118:	f100e2d6 	subs	x22, x22, #0x38
    4000811c:	910042f7 	add	x23, x23, #0x10
    40008120:	9100e318 	add	x24, x24, #0x38
    40008124:	54fff9e1 	b.ne	40008060 <_ZN4core3fmt5write17h732150d678a1cfffE+0x6c>  // b.any
    40008128:	14000019 	b	4000818c <_ZN4core3fmt5write17h732150d678a1cfffE+0x198>
    4000812c:	f9400e68 	ldr	x8, [x19, #24]
    40008130:	b4000368 	cbz	x8, 4000819c <_ZN4core3fmt5write17h732150d678a1cfffE+0x1a8>
    40008134:	f9400a75 	ldr	x21, [x19, #16]
    40008138:	f9400269 	ldr	x9, [x19]
    4000813c:	d100050a 	sub	x10, x8, #0x1
    40008140:	8b0812b6 	add	x22, x21, x8, lsl #4
    40008144:	9240ed48 	and	x8, x10, #0xfffffffffffffff
    40008148:	91002137 	add	x23, x9, #0x8
    4000814c:	91000514 	add	x20, x8, #0x1
    40008150:	f94002e2 	ldr	x2, [x23]
    40008154:	b40000c2 	cbz	x2, 4000816c <_ZN4core3fmt5write17h732150d678a1cfffE+0x178>
    40008158:	a94323e0 	ldp	x0, x8, [sp, #48]
    4000815c:	f85f82e1 	ldur	x1, [x23, #-8]
    40008160:	f9400d08 	ldr	x8, [x8, #24]
    40008164:	d63f0100 	blr	x8
    40008168:	37000300 	tbnz	w0, #0, 400081c8 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1d4>
    4000816c:	a94022a0 	ldp	x0, x8, [x21]
    40008170:	910003e1 	mov	x1, sp
    40008174:	d63f0100 	blr	x8
    40008178:	37000280 	tbnz	w0, #0, 400081c8 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1d4>
    4000817c:	910042b5 	add	x21, x21, #0x10
    40008180:	910042f7 	add	x23, x23, #0x10
    40008184:	eb1602bf 	cmp	x21, x22
    40008188:	54fffe41 	b.ne	40008150 <_ZN4core3fmt5write17h732150d678a1cfffE+0x15c>  // b.any
    4000818c:	f9400668 	ldr	x8, [x19, #8]
    40008190:	eb08029f 	cmp	x20, x8
    40008194:	540000c3 	b.cc	400081ac <_ZN4core3fmt5write17h732150d678a1cfffE+0x1b8>  // b.lo, b.ul, b.last
    40008198:	14000013 	b	400081e4 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1f0>
    4000819c:	aa1f03f4 	mov	x20, xzr
    400081a0:	f9400668 	ldr	x8, [x19, #8]
    400081a4:	eb0803ff 	cmp	xzr, x8
    400081a8:	540001e2 	b.cs	400081e4 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1f0>  // b.hs, b.nlast
    400081ac:	f9400268 	ldr	x8, [x19]
    400081b0:	a94327e0 	ldp	x0, x9, [sp, #48]
    400081b4:	8b141108 	add	x8, x8, x20, lsl #4
    400081b8:	a9400901 	ldp	x1, x2, [x8]
    400081bc:	f9400d28 	ldr	x8, [x9, #24]
    400081c0:	d63f0100 	blr	x8
    400081c4:	36000100 	tbz	w0, #0, 400081e4 <_ZN4core3fmt5write17h732150d678a1cfffE+0x1f0>
    400081c8:	52800020 	mov	w0, #0x1                   	// #1
    400081cc:	a9474ff4 	ldp	x20, x19, [sp, #112]
    400081d0:	a94657f6 	ldp	x22, x21, [sp, #96]
    400081d4:	a9455ff8 	ldp	x24, x23, [sp, #80]
    400081d8:	a9447bfd 	ldp	x29, x30, [sp, #64]
    400081dc:	910203ff 	add	sp, sp, #0x80
    400081e0:	d65f03c0 	ret
    400081e4:	2a1f03e0 	mov	w0, wzr
    400081e8:	a9474ff4 	ldp	x20, x19, [sp, #112]
    400081ec:	a94657f6 	ldp	x22, x21, [sp, #96]
    400081f0:	a9455ff8 	ldp	x24, x23, [sp, #80]
    400081f4:	a9447bfd 	ldp	x29, x30, [sp, #64]
    400081f8:	910203ff 	add	sp, sp, #0x80
    400081fc:	d65f03c0 	ret

0000000040008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>:
    40008200:	d101c3ff 	sub	sp, sp, #0x70
    40008204:	a9017bfd 	stp	x29, x30, [sp, #16]
    40008208:	a9026ffc 	stp	x28, x27, [sp, #32]
    4000820c:	a90367fa 	stp	x26, x25, [sp, #48]
    40008210:	a9045ff8 	stp	x24, x23, [sp, #64]
    40008214:	a90557f6 	stp	x22, x21, [sp, #80]
    40008218:	a9064ff4 	stp	x20, x19, [sp, #96]
    4000821c:	910043fd 	add	x29, sp, #0x10
    40008220:	aa0503f3 	mov	x19, x5
    40008224:	aa0403f4 	mov	x20, x4
    40008228:	aa0303f5 	mov	x21, x3
    4000822c:	aa0203f6 	mov	x22, x2
    40008230:	36000241 	tbz	w1, #0, 40008278 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x78>
    40008234:	b9402418 	ldr	w24, [x0, #36]
    40008238:	52800569 	mov	w9, #0x2b                  	// #43
    4000823c:	52a0022a 	mov	w10, #0x110000              	// #1114112
    40008240:	92400308 	and	x8, x24, #0x1
    40008244:	7100011f 	cmp	w8, #0x0
    40008248:	8b080279 	add	x25, x19, x8
    4000824c:	1a890157 	csel	w23, w10, w9, eq	// eq = none
    40008250:	361001d8 	tbz	w24, #2, 40008288 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x88>
    40008254:	f10082bf 	cmp	x21, #0x20
    40008258:	54000202 	b.cs	40008298 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x98>  // b.hs, b.nlast
    4000825c:	aa1503e8 	mov	x8, x21
    40008260:	b4000615 	cbz	x21, 40008320 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x120>
    40008264:	f10006bf 	cmp	x21, #0x1
    40008268:	540002c1 	b.ne	400082c0 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0xc0>  // b.any
    4000826c:	aa1f03e8 	mov	x8, xzr
    40008270:	aa1f03e9 	mov	x9, xzr
    40008274:	14000024 	b	40008304 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x104>
    40008278:	b9402418 	ldr	w24, [x0, #36]
    4000827c:	91000679 	add	x25, x19, #0x1
    40008280:	528005b7 	mov	w23, #0x2d                  	// #45
    40008284:	3717fe98 	tbnz	w24, #2, 40008254 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x54>
    40008288:	aa1f03f6 	mov	x22, xzr
    4000828c:	b9400008 	ldr	w8, [x0]
    40008290:	36000688 	tbz	w8, #0, 40008360 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x160>
    40008294:	14000026 	b	4000832c <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x12c>
    40008298:	aa0003fa 	mov	x26, x0
    4000829c:	aa1603e0 	mov	x0, x22
    400082a0:	aa1503e1 	mov	x1, x21
    400082a4:	940001d6 	bl	400089fc <_ZN4core3str5count14do_count_chars17he54af375497cd56eE>
    400082a8:	aa0003e8 	mov	x8, x0
    400082ac:	aa1a03e0 	mov	x0, x26
    400082b0:	8b190119 	add	x25, x8, x25
    400082b4:	b9400348 	ldr	w8, [x26]
    400082b8:	370003a8 	tbnz	w8, #0, 4000832c <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x12c>
    400082bc:	14000029 	b	40008360 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x160>
    400082c0:	927f0ea9 	and	x9, x21, #0x1e
    400082c4:	aa1f03e8 	mov	x8, xzr
    400082c8:	aa1f03ea 	mov	x10, xzr
    400082cc:	910006cb 	add	x11, x22, #0x1
    400082d0:	aa0903ec 	mov	x12, x9
    400082d4:	38dff16d 	ldursb	w13, [x11, #-1]
    400082d8:	39c0016e 	ldrsb	w14, [x11]
    400082dc:	9100096b 	add	x11, x11, #0x2
    400082e0:	310105bf 	cmn	w13, #0x41
    400082e4:	9a88d508 	cinc	x8, x8, gt
    400082e8:	310105df 	cmn	w14, #0x41
    400082ec:	9a8ad54a 	cinc	x10, x10, gt
    400082f0:	f100098c 	subs	x12, x12, #0x2
    400082f4:	54ffff01 	b.ne	400082d4 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0xd4>  // b.any
    400082f8:	eb0902bf 	cmp	x21, x9
    400082fc:	8b080148 	add	x8, x10, x8
    40008300:	54000100 	b.eq	40008320 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x120>  // b.none
    40008304:	cb0902aa 	sub	x10, x21, x9
    40008308:	8b0902c9 	add	x9, x22, x9
    4000830c:	38c0152b 	ldrsb	w11, [x9], #1
    40008310:	3101057f 	cmn	w11, #0x41
    40008314:	9a88d508 	cinc	x8, x8, gt
    40008318:	f100054a 	subs	x10, x10, #0x1
    4000831c:	54ffff81 	b.ne	4000830c <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x10c>  // b.any
    40008320:	8b190119 	add	x25, x8, x25
    40008324:	b9400008 	ldr	w8, [x0]
    40008328:	360001c8 	tbz	w8, #0, 40008360 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x160>
    4000832c:	f9400408 	ldr	x8, [x0, #8]
    40008330:	eb19011b 	subs	x27, x8, x25
    40008334:	54000169 	b.ls	40008360 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x160>  // b.plast
    40008338:	371804f8 	tbnz	w24, #3, 400083d4 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x1d4>
    4000833c:	3940a008 	ldrb	w8, [x0, #40]
    40008340:	71000d1f 	cmp	w8, #0x3
    40008344:	1a9f1508 	csinc	w8, w8, wzr, ne	// ne = any
    40008348:	34000828 	cbz	w8, 4000844c <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x24c>
    4000834c:	7100051f 	cmp	w8, #0x1
    40008350:	54000781 	b.ne	40008440 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x240>  // b.any
    40008354:	aa1b03e8 	mov	x8, x27
    40008358:	aa1f03fb 	mov	x27, xzr
    4000835c:	1400003c 	b	4000844c <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x24c>
    40008360:	a9436418 	ldp	x24, x25, [x0, #48]
    40008364:	2a1703e2 	mov	w2, w23
    40008368:	aa1603e3 	mov	x3, x22
    4000836c:	aa1503e4 	mov	x4, x21
    40008370:	aa1803e0 	mov	x0, x24
    40008374:	aa1903e1 	mov	x1, x25
    40008378:	94000067 	bl	40008514 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E>
    4000837c:	36000140 	tbz	w0, #0, 400083a4 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x1a4>
    40008380:	52800020 	mov	w0, #0x1                   	// #1
    40008384:	a9464ff4 	ldp	x20, x19, [sp, #96]
    40008388:	a94557f6 	ldp	x22, x21, [sp, #80]
    4000838c:	a9445ff8 	ldp	x24, x23, [sp, #64]
    40008390:	a94367fa 	ldp	x26, x25, [sp, #48]
    40008394:	a9426ffc 	ldp	x28, x27, [sp, #32]
    40008398:	a9417bfd 	ldp	x29, x30, [sp, #16]
    4000839c:	9101c3ff 	add	sp, sp, #0x70
    400083a0:	d65f03c0 	ret
    400083a4:	f9400f23 	ldr	x3, [x25, #24]
    400083a8:	aa1803e0 	mov	x0, x24
    400083ac:	aa1403e1 	mov	x1, x20
    400083b0:	aa1303e2 	mov	x2, x19
    400083b4:	a9464ff4 	ldp	x20, x19, [sp, #96]
    400083b8:	a94557f6 	ldp	x22, x21, [sp, #80]
    400083bc:	a9445ff8 	ldp	x24, x23, [sp, #64]
    400083c0:	a94367fa 	ldp	x26, x25, [sp, #48]
    400083c4:	a9426ffc 	ldp	x28, x27, [sp, #32]
    400083c8:	a9417bfd 	ldp	x29, x30, [sp, #16]
    400083cc:	9101c3ff 	add	sp, sp, #0x70
    400083d0:	d61f0060 	br	x3
    400083d4:	b9402008 	ldr	w8, [x0, #32]
    400083d8:	a9436418 	ldp	x24, x25, [x0, #48]
    400083dc:	52800029 	mov	w9, #0x1                   	// #1
    400083e0:	3940a01c 	ldrb	w28, [x0, #40]
    400083e4:	aa0003fa 	mov	x26, x0
    400083e8:	b81fc3a8 	stur	w8, [x29, #-4]
    400083ec:	52800608 	mov	w8, #0x30                  	// #48
    400083f0:	2a1703e2 	mov	w2, w23
    400083f4:	b9002008 	str	w8, [x0, #32]
    400083f8:	aa1903e1 	mov	x1, x25
    400083fc:	aa1603e3 	mov	x3, x22
    40008400:	3900a009 	strb	w9, [x0, #40]
    40008404:	aa1803e0 	mov	x0, x24
    40008408:	aa1503e4 	mov	x4, x21
    4000840c:	94000042 	bl	40008514 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E>
    40008410:	2a0003e8 	mov	w8, w0
    40008414:	52800020 	mov	w0, #0x1                   	// #1
    40008418:	3707fb68 	tbnz	w8, #0, 40008384 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x184>
    4000841c:	91000775 	add	x21, x27, #0x1
    40008420:	f10006b5 	subs	x21, x21, #0x1
    40008424:	540005a0 	b.eq	400084d8 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x2d8>  // b.none
    40008428:	f9401328 	ldr	x8, [x25, #32]
    4000842c:	aa1803e0 	mov	x0, x24
    40008430:	52800601 	mov	w1, #0x30                  	// #48
    40008434:	d63f0100 	blr	x8
    40008438:	3607ff40 	tbz	w0, #0, 40008420 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x220>
    4000843c:	17ffffd1 	b	40008380 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x180>
    40008440:	91000769 	add	x9, x27, #0x1
    40008444:	d341ff68 	lsr	x8, x27, #1
    40008448:	d341fd3b 	lsr	x27, x9, #1
    4000844c:	a9436418 	ldp	x24, x25, [x0, #48]
    40008450:	9100051c 	add	x28, x8, #0x1
    40008454:	b940201a 	ldr	w26, [x0, #32]
    40008458:	f100079c 	subs	x28, x28, #0x1
    4000845c:	540000e0 	b.eq	40008478 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x278>  // b.none
    40008460:	f9401328 	ldr	x8, [x25, #32]
    40008464:	aa1803e0 	mov	x0, x24
    40008468:	2a1a03e1 	mov	w1, w26
    4000846c:	d63f0100 	blr	x8
    40008470:	3607ff40 	tbz	w0, #0, 40008458 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x258>
    40008474:	17ffffc3 	b	40008380 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x180>
    40008478:	aa1803e0 	mov	x0, x24
    4000847c:	aa1903e1 	mov	x1, x25
    40008480:	2a1703e2 	mov	w2, w23
    40008484:	aa1603e3 	mov	x3, x22
    40008488:	aa1503e4 	mov	x4, x21
    4000848c:	94000022 	bl	40008514 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E>
    40008490:	3707f780 	tbnz	w0, #0, 40008380 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x180>
    40008494:	f9400f28 	ldr	x8, [x25, #24]
    40008498:	aa1803e0 	mov	x0, x24
    4000849c:	aa1403e1 	mov	x1, x20
    400084a0:	aa1303e2 	mov	x2, x19
    400084a4:	d63f0100 	blr	x8
    400084a8:	3707f6c0 	tbnz	w0, #0, 40008380 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x180>
    400084ac:	aa1f03f3 	mov	x19, xzr
    400084b0:	eb13037f 	cmp	x27, x19
    400084b4:	54000280 	b.eq	40008504 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x304>  // b.none
    400084b8:	f9401328 	ldr	x8, [x25, #32]
    400084bc:	aa1803e0 	mov	x0, x24
    400084c0:	2a1a03e1 	mov	w1, w26
    400084c4:	91000673 	add	x19, x19, #0x1
    400084c8:	d63f0100 	blr	x8
    400084cc:	34ffff20 	cbz	w0, 400084b0 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x2b0>
    400084d0:	d1000668 	sub	x8, x19, #0x1
    400084d4:	1400000d 	b	40008508 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x308>
    400084d8:	f9400f28 	ldr	x8, [x25, #24]
    400084dc:	aa1803e0 	mov	x0, x24
    400084e0:	aa1403e1 	mov	x1, x20
    400084e4:	aa1303e2 	mov	x2, x19
    400084e8:	d63f0100 	blr	x8
    400084ec:	3707f4a0 	tbnz	w0, #0, 40008380 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x180>
    400084f0:	b85fc3a8 	ldur	w8, [x29, #-4]
    400084f4:	2a1f03e0 	mov	w0, wzr
    400084f8:	3900a35c 	strb	w28, [x26, #40]
    400084fc:	b9002348 	str	w8, [x26, #32]
    40008500:	17ffffa1 	b	40008384 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x184>
    40008504:	aa1b03e8 	mov	x8, x27
    40008508:	eb1b011f 	cmp	x8, x27
    4000850c:	1a9f27e0 	cset	w0, cc	// cc = lo, ul, last
    40008510:	17ffff9d 	b	40008384 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E+0x184>

0000000040008514 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E>:
    40008514:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    40008518:	a90157f6 	stp	x22, x21, [sp, #16]
    4000851c:	a9024ff4 	stp	x20, x19, [sp, #32]
    40008520:	910003fd 	mov	x29, sp
    40008524:	aa0403f3 	mov	x19, x4
    40008528:	aa0303f4 	mov	x20, x3
    4000852c:	aa0103f5 	mov	x21, x1
    40008530:	7144405f 	cmp	w2, #0x110, lsl #12
    40008534:	540001a0 	b.eq	40008568 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E+0x54>  // b.none
    40008538:	f94012a8 	ldr	x8, [x21, #32]
    4000853c:	2a0203e1 	mov	w1, w2
    40008540:	aa0003f6 	mov	x22, x0
    40008544:	d63f0100 	blr	x8
    40008548:	2a0003e8 	mov	w8, w0
    4000854c:	aa1603e0 	mov	x0, x22
    40008550:	360000c8 	tbz	w8, #0, 40008568 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E+0x54>
    40008554:	52800020 	mov	w0, #0x1                   	// #1
    40008558:	a9424ff4 	ldp	x20, x19, [sp, #32]
    4000855c:	a94157f6 	ldp	x22, x21, [sp, #16]
    40008560:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40008564:	d65f03c0 	ret
    40008568:	b4000114 	cbz	x20, 40008588 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h13444fda73910ed4E+0x74>
    4000856c:	f9400ea3 	ldr	x3, [x21, #24]
    40008570:	aa1403e1 	mov	x1, x20
    40008574:	aa1303e2 	mov	x2, x19
    40008578:	a9424ff4 	ldp	x20, x19, [sp, #32]
    4000857c:	a94157f6 	ldp	x22, x21, [sp, #16]
    40008580:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40008584:	d61f0060 	br	x3
    40008588:	2a1f03e0 	mov	w0, wzr
    4000858c:	a9424ff4 	ldp	x20, x19, [sp, #32]
    40008590:	a94157f6 	ldp	x22, x21, [sp, #16]
    40008594:	a8c37bfd 	ldp	x29, x30, [sp], #48
    40008598:	d65f03c0 	ret

000000004000859c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E>:
    4000859c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    400085a0:	f9000bf9 	str	x25, [sp, #16]
    400085a4:	a9025ff8 	stp	x24, x23, [sp, #32]
    400085a8:	a90357f6 	stp	x22, x21, [sp, #48]
    400085ac:	a9044ff4 	stp	x20, x19, [sp, #64]
    400085b0:	910003fd 	mov	x29, sp
    400085b4:	f9400015 	ldr	x21, [x0]
    400085b8:	f9400808 	ldr	x8, [x0, #16]
    400085bc:	aa0203f4 	mov	x20, x2
    400085c0:	aa0103f3 	mov	x19, x1
    400085c4:	aa0802a9 	orr	x9, x21, x8
    400085c8:	b4000769 	cbz	x9, 400086b4 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x118>
    400085cc:	36000388 	tbz	w8, #0, 4000863c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xa0>
    400085d0:	f9400c08 	ldr	x8, [x0, #24]
    400085d4:	b4000508 	cbz	x8, 40008674 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xd8>
    400085d8:	8b14026a 	add	x10, x19, x20
    400085dc:	aa0803e9 	mov	x9, x8
    400085e0:	aa1303eb 	mov	x11, x19
    400085e4:	aa1f03f4 	mov	x20, xzr
    400085e8:	14000007 	b	40008604 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x68>
    400085ec:	9100096c 	add	x12, x11, #0x2
    400085f0:	cb0b018b 	sub	x11, x12, x11
    400085f4:	f1000529 	subs	x9, x9, #0x1
    400085f8:	8b140174 	add	x20, x11, x20
    400085fc:	aa0c03eb 	mov	x11, x12
    40008600:	540003e0 	b.eq	4000867c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe0>  // b.none
    40008604:	eb0a017f 	cmp	x11, x10
    40008608:	540003a0 	b.eq	4000867c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe0>  // b.none
    4000860c:	aa0b03ec 	mov	x12, x11
    40008610:	38c0158d 	ldrsb	w13, [x12], #1
    40008614:	36fffeed 	tbz	w13, #31, 400085f0 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x54>
    40008618:	12001dac 	and	w12, w13, #0xff
    4000861c:	7103819f 	cmp	w12, #0xe0
    40008620:	54fffe63 	b.cc	400085ec <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x50>  // b.lo, b.ul, b.last
    40008624:	7103c19f 	cmp	w12, #0xf0
    40008628:	54000063 	b.cc	40008634 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x98>  // b.lo, b.ul, b.last
    4000862c:	9100116c 	add	x12, x11, #0x4
    40008630:	17fffff0 	b	400085f0 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x54>
    40008634:	91000d6c 	add	x12, x11, #0x3
    40008638:	17ffffee 	b	400085f0 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x54>
    4000863c:	f100829f 	cmp	x20, #0x20
    40008640:	540000c2 	b.cs	40008658 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xbc>  // b.hs, b.nlast
    40008644:	f100069f 	cmp	x20, #0x1
    40008648:	540004a0 	b.eq	400086dc <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x140>  // b.none
    4000864c:	b50004f4 	cbnz	x20, 400086e8 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x14c>
    40008650:	aa1403e8 	mov	x8, x20
    40008654:	1400000b 	b	40008680 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe4>
    40008658:	aa0003f6 	mov	x22, x0
    4000865c:	aa1303e0 	mov	x0, x19
    40008660:	aa1403e1 	mov	x1, x20
    40008664:	940000e6 	bl	400089fc <_ZN4core3str5count14do_count_chars17he54af375497cd56eE>
    40008668:	aa0003e8 	mov	x8, x0
    4000866c:	aa1603e0 	mov	x0, x22
    40008670:	14000004 	b	40008680 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe4>
    40008674:	aa1f03f4 	mov	x20, xzr
    40008678:	aa1f03e9 	mov	x9, xzr
    4000867c:	cb090108 	sub	x8, x8, x9
    40008680:	360001b5 	tbz	w21, #0, 400086b4 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x118>
    40008684:	f9400409 	ldr	x9, [x0, #8]
    40008688:	eb080137 	subs	x23, x9, x8
    4000868c:	54000149 	b.ls	400086b4 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x118>  // b.plast
    40008690:	3940a008 	ldrb	w8, [x0, #40]
    40008694:	71000d1f 	cmp	w8, #0x3
    40008698:	1a8803e8 	csel	w8, wzr, w8, eq	// eq = none
    4000869c:	340005c8 	cbz	w8, 40008754 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1b8>
    400086a0:	7100051f 	cmp	w8, #0x1
    400086a4:	54000521 	b.ne	40008748 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1ac>  // b.any
    400086a8:	aa1703e8 	mov	x8, x23
    400086ac:	aa1f03f7 	mov	x23, xzr
    400086b0:	14000029 	b	40008754 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1b8>
    400086b4:	a9432000 	ldp	x0, x8, [x0, #48]
    400086b8:	aa1303e1 	mov	x1, x19
    400086bc:	aa1403e2 	mov	x2, x20
    400086c0:	a9444ff4 	ldp	x20, x19, [sp, #64]
    400086c4:	a94357f6 	ldp	x22, x21, [sp, #48]
    400086c8:	f9400bf9 	ldr	x25, [sp, #16]
    400086cc:	a9425ff8 	ldp	x24, x23, [sp, #32]
    400086d0:	f9400d03 	ldr	x3, [x8, #24]
    400086d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
    400086d8:	d61f0060 	br	x3
    400086dc:	aa1f03e8 	mov	x8, xzr
    400086e0:	aa1f03e9 	mov	x9, xzr
    400086e4:	14000012 	b	4000872c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x190>
    400086e8:	927f0e89 	and	x9, x20, #0x1e
    400086ec:	aa1f03e8 	mov	x8, xzr
    400086f0:	aa1f03ea 	mov	x10, xzr
    400086f4:	9100066b 	add	x11, x19, #0x1
    400086f8:	aa0903ec 	mov	x12, x9
    400086fc:	38dff16d 	ldursb	w13, [x11, #-1]
    40008700:	39c0016e 	ldrsb	w14, [x11]
    40008704:	9100096b 	add	x11, x11, #0x2
    40008708:	310105bf 	cmn	w13, #0x41
    4000870c:	9a88d508 	cinc	x8, x8, gt
    40008710:	310105df 	cmn	w14, #0x41
    40008714:	9a8ad54a 	cinc	x10, x10, gt
    40008718:	f100098c 	subs	x12, x12, #0x2
    4000871c:	54ffff01 	b.ne	400086fc <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x160>  // b.any
    40008720:	eb09029f 	cmp	x20, x9
    40008724:	8b080148 	add	x8, x10, x8
    40008728:	54fffac0 	b.eq	40008680 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe4>  // b.none
    4000872c:	38e96a6a 	ldrsb	w10, [x19, x9]
    40008730:	91000529 	add	x9, x9, #0x1
    40008734:	3101055f 	cmn	w10, #0x41
    40008738:	9a88d508 	cinc	x8, x8, gt
    4000873c:	eb09029f 	cmp	x20, x9
    40008740:	54ffff61 	b.ne	4000872c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x190>  // b.any
    40008744:	17ffffcf 	b	40008680 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0xe4>
    40008748:	910006e9 	add	x9, x23, #0x1
    4000874c:	d341fee8 	lsr	x8, x23, #1
    40008750:	d341fd37 	lsr	x23, x9, #1
    40008754:	a9436015 	ldp	x21, x24, [x0, #48]
    40008758:	91000519 	add	x25, x8, #0x1
    4000875c:	b9402016 	ldr	w22, [x0, #32]
    40008760:	f1000739 	subs	x25, x25, #0x1
    40008764:	540000e0 	b.eq	40008780 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1e4>  // b.none
    40008768:	f9401308 	ldr	x8, [x24, #32]
    4000876c:	aa1503e0 	mov	x0, x21
    40008770:	2a1603e1 	mov	w1, w22
    40008774:	d63f0100 	blr	x8
    40008778:	3607ff40 	tbz	w0, #0, 40008760 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1c4>
    4000877c:	14000007 	b	40008798 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x1fc>
    40008780:	f9400f08 	ldr	x8, [x24, #24]
    40008784:	aa1503e0 	mov	x0, x21
    40008788:	aa1303e1 	mov	x1, x19
    4000878c:	aa1403e2 	mov	x2, x20
    40008790:	d63f0100 	blr	x8
    40008794:	36000100 	tbz	w0, #0, 400087b4 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x218>
    40008798:	52800020 	mov	w0, #0x1                   	// #1
    4000879c:	a9444ff4 	ldp	x20, x19, [sp, #64]
    400087a0:	f9400bf9 	ldr	x25, [sp, #16]
    400087a4:	a94357f6 	ldp	x22, x21, [sp, #48]
    400087a8:	a9425ff8 	ldp	x24, x23, [sp, #32]
    400087ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
    400087b0:	d65f03c0 	ret
    400087b4:	aa1f03f3 	mov	x19, xzr
    400087b8:	eb1302ff 	cmp	x23, x19
    400087bc:	54000120 	b.eq	400087e0 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x244>  // b.none
    400087c0:	f9401308 	ldr	x8, [x24, #32]
    400087c4:	aa1503e0 	mov	x0, x21
    400087c8:	2a1603e1 	mov	w1, w22
    400087cc:	91000673 	add	x19, x19, #0x1
    400087d0:	d63f0100 	blr	x8
    400087d4:	34ffff20 	cbz	w0, 400087b8 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x21c>
    400087d8:	d1000668 	sub	x8, x19, #0x1
    400087dc:	14000002 	b	400087e4 <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E+0x248>
    400087e0:	aa1703e8 	mov	x8, x23
    400087e4:	eb17011f 	cmp	x8, x23
    400087e8:	1a9f27e0 	cset	w0, cc	// cc = lo, ul, last
    400087ec:	a9444ff4 	ldp	x20, x19, [sp, #64]
    400087f0:	f9400bf9 	ldr	x25, [sp, #16]
    400087f4:	a94357f6 	ldp	x22, x21, [sp, #48]
    400087f8:	a9425ff8 	ldp	x24, x23, [sp, #32]
    400087fc:	a8c57bfd 	ldp	x29, x30, [sp], #80
    40008800:	d65f03c0 	ret

0000000040008804 <_ZN4core3fmt9Formatter9write_str17h38ea1b56a7d26f23E>:
    40008804:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40008808:	910003fd 	mov	x29, sp
    4000880c:	a9432000 	ldp	x0, x8, [x0, #48]
    40008810:	f9400d03 	ldr	x3, [x8, #24]
    40008814:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008818:	d61f0060 	br	x3

000000004000881c <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE>:
    4000881c:	d101c3ff 	sub	sp, sp, #0x70
    40008820:	a9017bfd 	stp	x29, x30, [sp, #16]
    40008824:	f90013fb 	str	x27, [sp, #32]
    40008828:	a90367fa 	stp	x26, x25, [sp, #48]
    4000882c:	a9045ff8 	stp	x24, x23, [sp, #64]
    40008830:	a90557f6 	stp	x22, x21, [sp, #80]
    40008834:	a9064ff4 	stp	x20, x19, [sp, #96]
    40008838:	910043fd 	add	x29, sp, #0x10
    4000883c:	aa0003f6 	mov	x22, x0
    40008840:	a9432000 	ldp	x0, x8, [x0, #48]
    40008844:	a9466bb9 	ldp	x25, x26, [x29, #96]
    40008848:	aa0703f3 	mov	x19, x7
    4000884c:	f9403bbb 	ldr	x27, [x29, #112]
    40008850:	aa0603f4 	mov	x20, x6
    40008854:	aa0503f5 	mov	x21, x5
    40008858:	f9400d08 	ldr	x8, [x8, #24]
    4000885c:	aa0403f7 	mov	x23, x4
    40008860:	aa0303f8 	mov	x24, x3
    40008864:	d63f0100 	blr	x8
    40008868:	390023e0 	strb	w0, [sp, #8]
    4000886c:	910003e0 	mov	x0, sp
    40008870:	aa1803e1 	mov	x1, x24
    40008874:	aa1703e2 	mov	x2, x23
    40008878:	aa1503e3 	mov	x3, x21
    4000887c:	aa1403e4 	mov	x4, x20
    40008880:	f90003f6 	str	x22, [sp]
    40008884:	390027ff 	strb	wzr, [sp, #9]
    40008888:	97fffd63 	bl	40007e14 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E>
    4000888c:	910003e0 	mov	x0, sp
    40008890:	aa1303e1 	mov	x1, x19
    40008894:	aa1903e2 	mov	x2, x25
    40008898:	aa1a03e3 	mov	x3, x26
    4000889c:	aa1b03e4 	mov	x4, x27
    400088a0:	97fffd5d 	bl	40007e14 <_ZN4core3fmt8builders11DebugStruct5field17h2e8e53ee3897e450E>
    400088a4:	394027e9 	ldrb	w9, [sp, #9]
    400088a8:	394023e8 	ldrb	w8, [sp, #8]
    400088ac:	7100053f 	cmp	w9, #0x1
    400088b0:	2a080120 	orr	w0, w9, w8
    400088b4:	54000201 	b.ne	400088f4 <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE+0xd8>  // b.any
    400088b8:	370001e8 	tbnz	w8, #0, 400088f4 <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE+0xd8>
    400088bc:	f94003e8 	ldr	x8, [sp]
    400088c0:	39409109 	ldrb	w9, [x8, #36]
    400088c4:	371000c9 	tbnz	w9, #2, 400088dc <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE+0xc0>
    400088c8:	a9432500 	ldp	x0, x9, [x8, #48]
    400088cc:	d503201f 	nop
    400088d0:	7001b341 	adr	x1, 4000bf3b <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2373>
    400088d4:	52800042 	mov	w2, #0x2                   	// #2
    400088d8:	14000005 	b	400088ec <_ZN4core3fmt9Formatter26debug_struct_field2_finish17h092b456f38c08d4bE+0xd0>
    400088dc:	a9432500 	ldp	x0, x9, [x8, #48]
    400088e0:	d503201f 	nop
    400088e4:	5001b2a1 	adr	x1, 4000bf3a <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2372>
    400088e8:	52800022 	mov	w2, #0x1                   	// #1
    400088ec:	f9400d28 	ldr	x8, [x9, #24]
    400088f0:	d63f0100 	blr	x8
    400088f4:	a9464ff4 	ldp	x20, x19, [sp, #96]
    400088f8:	12000000 	and	w0, w0, #0x1
    400088fc:	a94557f6 	ldp	x22, x21, [sp, #80]
    40008900:	f94013fb 	ldr	x27, [sp, #32]
    40008904:	a9445ff8 	ldp	x24, x23, [sp, #64]
    40008908:	a94367fa 	ldp	x26, x25, [sp, #48]
    4000890c:	a9417bfd 	ldp	x29, x30, [sp, #16]
    40008910:	9101c3ff 	add	sp, sp, #0x70
    40008914:	d65f03c0 	ret

0000000040008918 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h90d72ec6263346ceE>:
    40008918:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4000891c:	910003fd 	mov	x29, sp
    40008920:	aa0103e8 	mov	x8, x1
    40008924:	aa0003e1 	mov	x1, x0
    40008928:	aa0203e0 	mov	x0, x2
    4000892c:	aa0803e2 	mov	x2, x8
    40008930:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008934:	17ffff1a 	b	4000859c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E>

0000000040008938 <_ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE>:
    40008938:	d102c3ff 	sub	sp, sp, #0xb0
    4000893c:	a9087bfd 	stp	x29, x30, [sp, #128]
    40008940:	a90957f6 	stp	x22, x21, [sp, #144]
    40008944:	a90a4ff4 	stp	x20, x19, [sp, #160]
    40008948:	910203fd 	add	x29, sp, #0x80
    4000894c:	b9402434 	ldr	w20, [x1, #36]
    40008950:	a9405835 	ldp	x21, x22, [x1]
    40008954:	aa0103f3 	mov	x19, x1
    40008958:	2a1403e9 	mov	w9, w20
    4000895c:	361000d4 	tbz	w20, #2, 40008974 <_ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE+0x3c>
    40008960:	321d0289 	orr	w9, w20, #0x8
    40008964:	b5000095 	cbnz	x21, 40008974 <_ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE+0x3c>
    40008968:	52800028 	mov	w8, #0x1                   	// #1
    4000896c:	5280024a 	mov	w10, #0x12                  	// #18
    40008970:	a9002a68 	stp	x8, x10, [x19]
    40008974:	321e0129 	orr	w9, w9, #0x4
    40008978:	aa1f03e8 	mov	x8, xzr
    4000897c:	b9002669 	str	w9, [x19, #36]
    40008980:	910003e9 	mov	x9, sp
    40008984:	5280060a 	mov	w10, #0x30                  	// #48
    40008988:	12000c0b 	and	w11, w0, #0xf
    4000898c:	d344fc0c 	lsr	x12, x0, #4
    40008990:	33000c0a 	bfxil	w10, w0, #0, #4
    40008994:	11015d6d 	add	w13, w11, #0x57
    40008998:	7100297f 	cmp	w11, #0xa
    4000899c:	8b08012b 	add	x11, x9, x8
    400089a0:	d1000508 	sub	x8, x8, #0x1
    400089a4:	1a8d314a 	csel	w10, w10, w13, cc	// cc = lo, ul, last
    400089a8:	f1003c1f 	cmp	x0, #0xf
    400089ac:	aa0c03e0 	mov	x0, x12
    400089b0:	3901fd6a 	strb	w10, [x11, #127]
    400089b4:	54fffe88 	b.hi	40008984 <_ZN4core3fmt17pointer_fmt_inner17hdb734b0eb41f80bfE+0x4c>  // b.pmore
    400089b8:	910003e9 	mov	x9, sp
    400089bc:	cb0803e5 	neg	x5, x8
    400089c0:	d503201f 	nop
    400089c4:	3001abc2 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    400089c8:	8b080129 	add	x9, x9, x8
    400089cc:	aa1303e0 	mov	x0, x19
    400089d0:	91020124 	add	x4, x9, #0x80
    400089d4:	52800021 	mov	w1, #0x1                   	// #1
    400089d8:	52800043 	mov	w3, #0x2                   	// #2
    400089dc:	97fffe09 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    400089e0:	a9005a75 	stp	x21, x22, [x19]
    400089e4:	a94957f6 	ldp	x22, x21, [sp, #144]
    400089e8:	b9002674 	str	w20, [x19, #36]
    400089ec:	a94a4ff4 	ldp	x20, x19, [sp, #160]
    400089f0:	a9487bfd 	ldp	x29, x30, [sp, #128]
    400089f4:	9102c3ff 	add	sp, sp, #0xb0
    400089f8:	d65f03c0 	ret

00000000400089fc <_ZN4core3str5count14do_count_chars17he54af375497cd56eE>:
    400089fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40008a00:	910003fd 	mov	x29, sp
    40008a04:	91001c08 	add	x8, x0, #0x7
    40008a08:	927df108 	and	x8, x8, #0xfffffffffffffff8
    40008a0c:	cb00010c 	sub	x12, x8, x0
    40008a10:	eb0c002b 	subs	x11, x1, x12
    40008a14:	54000102 	b.cs	40008a34 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x38>  // b.hs, b.nlast
    40008a18:	b4000261 	cbz	x1, 40008a64 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x68>
    40008a1c:	f100043f 	cmp	x1, #0x1
    40008a20:	54000281 	b.ne	40008a70 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x74>  // b.any
    40008a24:	aa0003e8 	mov	x8, x0
    40008a28:	aa1f03e0 	mov	x0, xzr
    40008a2c:	aa1f03e9 	mov	x9, xzr
    40008a30:	14000022 	b	40008ab8 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xbc>
    40008a34:	f100217f 	cmp	x11, #0x8
    40008a38:	54ffff03 	b.cc	40008a18 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1c>  // b.lo, b.ul, b.last
    40008a3c:	eb00011f 	cmp	x8, x0
    40008a40:	92400969 	and	x9, x11, #0x7
    40008a44:	54000061 	b.ne	40008a50 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x54>  // b.any
    40008a48:	aa1f03ea 	mov	x10, xzr
    40008a4c:	1400003d 	b	40008b40 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x144>
    40008a50:	f100099f 	cmp	x12, #0x2
    40008a54:	54000442 	b.cs	40008adc <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xe0>  // b.hs, b.nlast
    40008a58:	aa1f03ea 	mov	x10, xzr
    40008a5c:	aa1f03ed 	mov	x13, xzr
    40008a60:	14000030 	b	40008b20 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x124>
    40008a64:	aa0103e0 	mov	x0, x1
    40008a68:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008a6c:	d65f03c0 	ret
    40008a70:	927ff829 	and	x9, x1, #0xfffffffffffffffe
    40008a74:	aa1f03ea 	mov	x10, xzr
    40008a78:	aa1f03eb 	mov	x11, xzr
    40008a7c:	aa0003e8 	mov	x8, x0
    40008a80:	9100040c 	add	x12, x0, #0x1
    40008a84:	aa0903ed 	mov	x13, x9
    40008a88:	38dff18e 	ldursb	w14, [x12, #-1]
    40008a8c:	39c0018f 	ldrsb	w15, [x12]
    40008a90:	9100098c 	add	x12, x12, #0x2
    40008a94:	310105df 	cmn	w14, #0x41
    40008a98:	9a8ad54a 	cinc	x10, x10, gt
    40008a9c:	310105ff 	cmn	w15, #0x41
    40008aa0:	9a8bd56b 	cinc	x11, x11, gt
    40008aa4:	f10009ad 	subs	x13, x13, #0x2
    40008aa8:	54ffff01 	b.ne	40008a88 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x8c>  // b.any
    40008aac:	eb09003f 	cmp	x1, x9
    40008ab0:	8b0a0160 	add	x0, x11, x10
    40008ab4:	54000100 	b.eq	40008ad4 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xd8>  // b.none
    40008ab8:	cb09002a 	sub	x10, x1, x9
    40008abc:	8b090108 	add	x8, x8, x9
    40008ac0:	38c01509 	ldrsb	w9, [x8], #1
    40008ac4:	3101053f 	cmn	w9, #0x41
    40008ac8:	9a80d400 	cinc	x0, x0, gt
    40008acc:	f100054a 	subs	x10, x10, #0x1
    40008ad0:	54ffff81 	b.ne	40008ac0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xc4>  // b.any
    40008ad4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008ad8:	d65f03c0 	ret
    40008adc:	927f058d 	and	x13, x12, #0x6
    40008ae0:	aa1f03ea 	mov	x10, xzr
    40008ae4:	aa1f03ee 	mov	x14, xzr
    40008ae8:	9100040f 	add	x15, x0, #0x1
    40008aec:	aa0d03f0 	mov	x16, x13
    40008af0:	38dff1f1 	ldursb	w17, [x15, #-1]
    40008af4:	39c001f2 	ldrsb	w18, [x15]
    40008af8:	910009ef 	add	x15, x15, #0x2
    40008afc:	3101063f 	cmn	w17, #0x41
    40008b00:	9a8ad54a 	cinc	x10, x10, gt
    40008b04:	3101065f 	cmn	w18, #0x41
    40008b08:	9a8ed5ce 	cinc	x14, x14, gt
    40008b0c:	f1000a10 	subs	x16, x16, #0x2
    40008b10:	54ffff01 	b.ne	40008af0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xf4>  // b.any
    40008b14:	eb0d019f 	cmp	x12, x13
    40008b18:	8b0a01ca 	add	x10, x14, x10
    40008b1c:	54000120 	b.eq	40008b40 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x144>  // b.none
    40008b20:	cb0d0108 	sub	x8, x8, x13
    40008b24:	8b0d000d 	add	x13, x0, x13
    40008b28:	cb000108 	sub	x8, x8, x0
    40008b2c:	38c015ae 	ldrsb	w14, [x13], #1
    40008b30:	310105df 	cmn	w14, #0x41
    40008b34:	9a8ad54a 	cinc	x10, x10, gt
    40008b38:	f1000508 	subs	x8, x8, #0x1
    40008b3c:	54ffff81 	b.ne	40008b2c <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x130>  // b.any
    40008b40:	d343fd68 	lsr	x8, x11, #3
    40008b44:	8b0c000d 	add	x13, x0, x12
    40008b48:	b40004a9 	cbz	x9, 40008bdc <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e0>
    40008b4c:	927df16b 	and	x11, x11, #0xfffffffffffffff8
    40008b50:	8b0b01ac 	add	x12, x13, x11
    40008b54:	39c0018b 	ldrsb	w11, [x12]
    40008b58:	3101057f 	cmn	w11, #0x41
    40008b5c:	1a9fd7eb 	cset	w11, gt
    40008b60:	f100053f 	cmp	x9, #0x1
    40008b64:	540003e0 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008b68:	39c0058e 	ldrsb	w14, [x12, #1]
    40008b6c:	310105df 	cmn	w14, #0x41
    40008b70:	9a8bd56b 	cinc	x11, x11, gt
    40008b74:	f100093f 	cmp	x9, #0x2
    40008b78:	54000340 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008b7c:	39c0098e 	ldrsb	w14, [x12, #2]
    40008b80:	310105df 	cmn	w14, #0x41
    40008b84:	9a8bd56b 	cinc	x11, x11, gt
    40008b88:	f1000d3f 	cmp	x9, #0x3
    40008b8c:	540002a0 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008b90:	39c00d8e 	ldrsb	w14, [x12, #3]
    40008b94:	310105df 	cmn	w14, #0x41
    40008b98:	9a8bd56b 	cinc	x11, x11, gt
    40008b9c:	f100113f 	cmp	x9, #0x4
    40008ba0:	54000200 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008ba4:	39c0118e 	ldrsb	w14, [x12, #4]
    40008ba8:	310105df 	cmn	w14, #0x41
    40008bac:	9a8bd56b 	cinc	x11, x11, gt
    40008bb0:	f100153f 	cmp	x9, #0x5
    40008bb4:	54000160 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008bb8:	39c0158e 	ldrsb	w14, [x12, #5]
    40008bbc:	310105df 	cmn	w14, #0x41
    40008bc0:	9a8bd56b 	cinc	x11, x11, gt
    40008bc4:	f100193f 	cmp	x9, #0x6
    40008bc8:	540000c0 	b.eq	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>  // b.none
    40008bcc:	39c01989 	ldrsb	w9, [x12, #6]
    40008bd0:	3101053f 	cmn	w9, #0x41
    40008bd4:	9a8bd56b 	cinc	x11, x11, gt
    40008bd8:	14000002 	b	40008be0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1e4>
    40008bdc:	aa1f03eb 	mov	x11, xzr
    40008be0:	8b0a0160 	add	x0, x11, x10
    40008be4:	52801809 	mov	w9, #0xc0                  	// #192
    40008be8:	b20083ea 	mov	x10, #0x1000100010001       	// #281479271743489
    40008bec:	1400000b 	b	40008c18 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x21c>
    40008bf0:	d348fdcf 	lsr	x15, x14, #8
    40008bf4:	92009dce 	and	x14, x14, #0xff00ff00ff00ff
    40008bf8:	8b0d016d 	add	x13, x11, x13
    40008bfc:	cb0c0108 	sub	x8, x8, x12
    40008c00:	92009def 	and	x15, x15, #0xff00ff00ff00ff
    40008c04:	8b0e01ee 	add	x14, x15, x14
    40008c08:	9b0a7dcf 	mul	x15, x14, x10
    40008c0c:	9240058e 	and	x14, x12, #0x3
    40008c10:	8b4fc000 	add	x0, x0, x15, lsr #48
    40008c14:	b50004ce 	cbnz	x14, 40008cac <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x2b0>
    40008c18:	b4fff5e8 	cbz	x8, 40008ad4 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0xd8>
    40008c1c:	f103011f 	cmp	x8, #0xc0
    40008c20:	aa0d03eb 	mov	x11, x13
    40008c24:	aa1f03ee 	mov	x14, xzr
    40008c28:	9a89310c 	csel	x12, x8, x9, cc	// cc = lo, ul, last
    40008c2c:	f100111f 	cmp	x8, #0x4
    40008c30:	d37df18d 	lsl	x13, x12, #3
    40008c34:	54fffde3 	b.cc	40008bf0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1f4>  // b.lo, b.ul, b.last
    40008c38:	927b15af 	and	x15, x13, #0x7e0
    40008c3c:	aa0b03f0 	mov	x16, x11
    40008c40:	8b0f016f 	add	x15, x11, x15
    40008c44:	a9404a11 	ldp	x17, x18, [x16]
    40008c48:	a9410a01 	ldp	x1, x2, [x16, #16]
    40008c4c:	91008210 	add	x16, x16, #0x20
    40008c50:	eb0f021f 	cmp	x16, x15
    40008c54:	aa3103e3 	mvn	x3, x17
    40008c58:	aa3203e4 	mvn	x4, x18
    40008c5c:	aa2103e5 	mvn	x5, x1
    40008c60:	d347fc63 	lsr	x3, x3, #7
    40008c64:	d347fc84 	lsr	x4, x4, #7
    40008c68:	d347fca5 	lsr	x5, x5, #7
    40008c6c:	aa2203e6 	mvn	x6, x2
    40008c70:	d347fcc6 	lsr	x6, x6, #7
    40008c74:	aa511871 	orr	x17, x3, x17, lsr #6
    40008c78:	aa521892 	orr	x18, x4, x18, lsr #6
    40008c7c:	aa4118a1 	orr	x1, x5, x1, lsr #6
    40008c80:	aa4218c2 	orr	x2, x6, x2, lsr #6
    40008c84:	9200c231 	and	x17, x17, #0x101010101010101
    40008c88:	9200c252 	and	x18, x18, #0x101010101010101
    40008c8c:	9200c021 	and	x1, x1, #0x101010101010101
    40008c90:	8b0e022e 	add	x14, x17, x14
    40008c94:	8b120031 	add	x17, x1, x18
    40008c98:	8b0e022e 	add	x14, x17, x14
    40008c9c:	9200c051 	and	x17, x2, #0x101010101010101
    40008ca0:	8b0e022e 	add	x14, x17, x14
    40008ca4:	54fffd01 	b.ne	40008c44 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x248>  // b.any
    40008ca8:	17ffffd2 	b	40008bf0 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x1f4>
    40008cac:	927e1588 	and	x8, x12, #0xfc
    40008cb0:	f10005df 	cmp	x14, #0x1
    40008cb4:	8b080d69 	add	x9, x11, x8, lsl #3
    40008cb8:	f9400128 	ldr	x8, [x9]
    40008cbc:	aa2803ea 	mvn	x10, x8
    40008cc0:	d347fd4a 	lsr	x10, x10, #7
    40008cc4:	aa481948 	orr	x8, x10, x8, lsr #6
    40008cc8:	9200c108 	and	x8, x8, #0x101010101010101
    40008ccc:	540001e0 	b.eq	40008d08 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x30c>  // b.none
    40008cd0:	f940052a 	ldr	x10, [x9, #8]
    40008cd4:	f10009df 	cmp	x14, #0x2
    40008cd8:	aa2a03eb 	mvn	x11, x10
    40008cdc:	d347fd6b 	lsr	x11, x11, #7
    40008ce0:	aa4a196a 	orr	x10, x11, x10, lsr #6
    40008ce4:	9200c14a 	and	x10, x10, #0x101010101010101
    40008ce8:	8b080148 	add	x8, x10, x8
    40008cec:	540000e0 	b.eq	40008d08 <_ZN4core3str5count14do_count_chars17he54af375497cd56eE+0x30c>  // b.none
    40008cf0:	f9400929 	ldr	x9, [x9, #16]
    40008cf4:	aa2903ea 	mvn	x10, x9
    40008cf8:	d347fd4a 	lsr	x10, x10, #7
    40008cfc:	aa491949 	orr	x9, x10, x9, lsr #6
    40008d00:	9200c129 	and	x9, x9, #0x101010101010101
    40008d04:	8b080128 	add	x8, x9, x8
    40008d08:	d348fd09 	lsr	x9, x8, #8
    40008d0c:	92009d08 	and	x8, x8, #0xff00ff00ff00ff
    40008d10:	92009d29 	and	x9, x9, #0xff00ff00ff00ff
    40008d14:	8b080128 	add	x8, x9, x8
    40008d18:	b20083e9 	mov	x9, #0x1000100010001       	// #281479271743489
    40008d1c:	9b097d08 	mul	x8, x8, x9
    40008d20:	8b48c000 	add	x0, x0, x8, lsr #48
    40008d24:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008d28:	d65f03c0 	ret

0000000040008d2c <_ZN4core5alloc6layout6Layout19is_size_align_valid17h02649c7e20481f71E>:
    40008d2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40008d30:	910003fd 	mov	x29, sp
    40008d34:	d1000429 	sub	x9, x1, #0x1
    40008d38:	d2f00008 	mov	x8, #0x8000000000000000    	// #-9223372036854775808
    40008d3c:	ca09002a 	eor	x10, x1, x9
    40008d40:	cb010108 	sub	x8, x8, x1
    40008d44:	eb09015f 	cmp	x10, x9
    40008d48:	fa488002 	ccmp	x0, x8, #0x2, hi	// hi = pmore
    40008d4c:	1a9f87e0 	cset	w0, ls	// ls = plast
    40008d50:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40008d54:	d65f03c0 	ret

0000000040008d58 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E>:
    40008d58:	d10243ff 	sub	sp, sp, #0x90
    40008d5c:	a9087bfd 	stp	x29, x30, [sp, #128]
    40008d60:	910203fd 	add	x29, sp, #0x80
    40008d64:	b9402428 	ldr	w8, [x1, #36]
    40008d68:	f9400000 	ldr	x0, [x0]
    40008d6c:	372000e8 	tbnz	w8, #4, 40008d88 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E+0x30>
    40008d70:	372802c8 	tbnz	w8, #5, 40008dc8 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E+0x70>
    40008d74:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40008d78:	aa0103e2 	mov	x2, x1
    40008d7c:	52800021 	mov	w1, #0x1                   	// #1
    40008d80:	910243ff 	add	sp, sp, #0x90
    40008d84:	1400019e 	b	400093fc <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E>
    40008d88:	aa1f03e8 	mov	x8, xzr
    40008d8c:	910003e9 	mov	x9, sp
    40008d90:	5280060a 	mov	w10, #0x30                  	// #48
    40008d94:	12000c0b 	and	w11, w0, #0xf
    40008d98:	d344fc0c 	lsr	x12, x0, #4
    40008d9c:	33000c0a 	bfxil	w10, w0, #0, #4
    40008da0:	11015d6d 	add	w13, w11, #0x57
    40008da4:	7100297f 	cmp	w11, #0xa
    40008da8:	8b08012b 	add	x11, x9, x8
    40008dac:	d1000508 	sub	x8, x8, #0x1
    40008db0:	1a8d314a 	csel	w10, w10, w13, cc	// cc = lo, ul, last
    40008db4:	f1003c1f 	cmp	x0, #0xf
    40008db8:	aa0c03e0 	mov	x0, x12
    40008dbc:	3901fd6a 	strb	w10, [x11, #127]
    40008dc0:	54fffe88 	b.hi	40008d90 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E+0x38>  // b.pmore
    40008dc4:	14000010 	b	40008e04 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E+0xac>
    40008dc8:	aa1f03e8 	mov	x8, xzr
    40008dcc:	910003e9 	mov	x9, sp
    40008dd0:	5280060a 	mov	w10, #0x30                  	// #48
    40008dd4:	12000c0b 	and	w11, w0, #0xf
    40008dd8:	d344fc0c 	lsr	x12, x0, #4
    40008ddc:	33000c0a 	bfxil	w10, w0, #0, #4
    40008de0:	1100dd6d 	add	w13, w11, #0x37
    40008de4:	7100297f 	cmp	w11, #0xa
    40008de8:	8b08012b 	add	x11, x9, x8
    40008dec:	d1000508 	sub	x8, x8, #0x1
    40008df0:	1a8d314a 	csel	w10, w10, w13, cc	// cc = lo, ul, last
    40008df4:	f1003c1f 	cmp	x0, #0xf
    40008df8:	aa0c03e0 	mov	x0, x12
    40008dfc:	3901fd6a 	strb	w10, [x11, #127]
    40008e00:	54fffe88 	b.hi	40008dd0 <_ZN73_$LT$core..num..nonzero..NonZero$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbb4ab84c75ce02b4E+0x78>  // b.pmore
    40008e04:	910003e9 	mov	x9, sp
    40008e08:	cb0803e5 	neg	x5, x8
    40008e0c:	d503201f 	nop
    40008e10:	30018962 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    40008e14:	8b080129 	add	x9, x9, x8
    40008e18:	aa0103e0 	mov	x0, x1
    40008e1c:	91020124 	add	x4, x9, #0x80
    40008e20:	52800021 	mov	w1, #0x1                   	// #1
    40008e24:	52800043 	mov	w3, #0x2                   	// #2
    40008e28:	97fffcf6 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40008e2c:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40008e30:	910243ff 	add	sp, sp, #0x90
    40008e34:	d65f03c0 	ret

0000000040008e38 <_ZN4core4char7methods15encode_utf8_raw8do_panic7runtime17h0a2e29c13556ce17E>:
    40008e38:	d10503ff 	sub	sp, sp, #0x140
    40008e3c:	a9137bfd 	stp	x29, x30, [sp, #304]
    40008e40:	9104c3fd 	add	x29, sp, #0x130
    40008e44:	910043e8 	add	x8, sp, #0x10
    40008e48:	d503201f 	nop
    40008e4c:	10002ca9 	adr	x9, 400093e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E>
    40008e50:	a90527e8 	stp	x8, x9, [sp, #80]
    40008e54:	910033e8 	add	x8, sp, #0xc
    40008e58:	d503201f 	nop
    40008e5c:	10000c8a 	adr	x10, 40008fec <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E>
    40008e60:	5280006b 	mov	w11, #0x3                   	// #3
    40008e64:	5280008c 	mov	w12, #0x4                   	// #4
    40008e68:	a9062be8 	stp	x8, x10, [sp, #96]
    40008e6c:	910063e8 	add	x8, sp, #0x18
    40008e70:	5280040a 	mov	w10, #0x20                  	// #32
    40008e74:	a90727e8 	stp	x8, x9, [sp, #112]
    40008e78:	52800048 	mov	w8, #0x2                   	// #2
    40008e7c:	910203e9 	add	x9, sp, #0x80
    40008e80:	f90043e8 	str	x8, [sp, #128]
    40008e84:	d280040d 	mov	x13, #0x20                  	// #32
    40008e88:	f9000928 	str	x8, [x9, #16]
    40008e8c:	f2c0010d 	movk	x13, #0x8, lsl #32
    40008e90:	f9001d28 	str	x8, [x9, #56]
    40008e94:	f9003928 	str	x8, [x9, #112]
    40008e98:	f9004128 	str	x8, [x9, #128]
    40008e9c:	a9092928 	stp	x8, x10, [x9, #144]
    40008ea0:	d503201f 	nop
    40008ea4:	10018d28 	adr	x8, 4000c048 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2480>
    40008ea8:	a9010be1 	stp	x1, x2, [sp, #16]
    40008eac:	aa0303e1 	mov	x1, x3
    40008eb0:	b9000fe0 	str	w0, [sp, #12]
    40008eb4:	910083e0 	add	x0, sp, #0x20
    40008eb8:	a904b13f 	stp	xzr, x12, [x9, #72]
    40008ebc:	5280002c 	mov	w12, #0x1                   	// #1
    40008ec0:	a9022fe8 	stp	x8, x11, [sp, #32]
    40008ec4:	910143e8 	add	x8, sp, #0x50
    40008ec8:	a902293f 	stp	xzr, x10, [x9, #32]
    40008ecc:	3902c3eb 	strb	w11, [sp, #176]
    40008ed0:	a905b52c 	stp	x12, x13, [x9, #88]
    40008ed4:	3903a3eb 	strb	w11, [sp, #232]
    40008ed8:	390483eb 	strb	w11, [sp, #288]
    40008edc:	a9042fe9 	stp	x9, x11, [sp, #64]
    40008ee0:	a9032fe8 	stp	x8, x11, [sp, #48]
    40008ee4:	97fffa67 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008ee8 <_ZN4core9panicking11panic_const24panic_const_add_overflow17hc65cb22bbb6f08fcE>:
    40008ee8:	d10103ff 	sub	sp, sp, #0x40
    40008eec:	a9037bfd 	stp	x29, x30, [sp, #48]
    40008ef0:	9100c3fd 	add	x29, sp, #0x30
    40008ef4:	d503201f 	nop
    40008ef8:	10016a48 	adr	x8, 4000bc40 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2078>
    40008efc:	52800029 	mov	w9, #0x1                   	// #1
    40008f00:	aa0003e1 	mov	x1, x0
    40008f04:	a90027e8 	stp	x8, x9, [sp]
    40008f08:	52800108 	mov	w8, #0x8                   	// #8
    40008f0c:	910003e0 	mov	x0, sp
    40008f10:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40008f14:	f9000be8 	str	x8, [sp, #16]
    40008f18:	97fffa5a 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008f1c <_ZN4core9panicking11panic_const24panic_const_sub_overflow17h6e17671f17407a34E>:
    40008f1c:	d10103ff 	sub	sp, sp, #0x40
    40008f20:	a9037bfd 	stp	x29, x30, [sp, #48]
    40008f24:	9100c3fd 	add	x29, sp, #0x30
    40008f28:	d503201f 	nop
    40008f2c:	10016a68 	adr	x8, 4000bc78 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x20b0>
    40008f30:	52800029 	mov	w9, #0x1                   	// #1
    40008f34:	aa0003e1 	mov	x1, x0
    40008f38:	a90027e8 	stp	x8, x9, [sp]
    40008f3c:	52800108 	mov	w8, #0x8                   	// #8
    40008f40:	910003e0 	mov	x0, sp
    40008f44:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40008f48:	f9000be8 	str	x8, [sp, #16]
    40008f4c:	97fffa4d 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008f50 <_ZN4core9panicking11panic_const24panic_const_mul_overflow17h1f122e531ebb3929E>:
    40008f50:	d10103ff 	sub	sp, sp, #0x40
    40008f54:	a9037bfd 	stp	x29, x30, [sp, #48]
    40008f58:	9100c3fd 	add	x29, sp, #0x30
    40008f5c:	d503201f 	nop
    40008f60:	10016a88 	adr	x8, 4000bcb0 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x20e8>
    40008f64:	52800029 	mov	w9, #0x1                   	// #1
    40008f68:	aa0003e1 	mov	x1, x0
    40008f6c:	a90027e8 	stp	x8, x9, [sp]
    40008f70:	52800108 	mov	w8, #0x8                   	// #8
    40008f74:	910003e0 	mov	x0, sp
    40008f78:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40008f7c:	f9000be8 	str	x8, [sp, #16]
    40008f80:	97fffa40 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008f84 <_ZN4core9panicking11panic_const23panic_const_div_by_zero17h4c23f62e2c0638e8E>:
    40008f84:	d10103ff 	sub	sp, sp, #0x40
    40008f88:	a9037bfd 	stp	x29, x30, [sp, #48]
    40008f8c:	9100c3fd 	add	x29, sp, #0x30
    40008f90:	d503201f 	nop
    40008f94:	10018828 	adr	x8, 4000c098 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x24d0>
    40008f98:	52800029 	mov	w9, #0x1                   	// #1
    40008f9c:	aa0003e1 	mov	x1, x0
    40008fa0:	a90027e8 	stp	x8, x9, [sp]
    40008fa4:	52800108 	mov	w8, #0x8                   	// #8
    40008fa8:	910003e0 	mov	x0, sp
    40008fac:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40008fb0:	f9000be8 	str	x8, [sp, #16]
    40008fb4:	97fffa33 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008fb8 <_ZN4core9panicking11panic_const23panic_const_rem_by_zero17h6ee5e17f2ceffb65E>:
    40008fb8:	d10103ff 	sub	sp, sp, #0x40
    40008fbc:	a9037bfd 	stp	x29, x30, [sp, #48]
    40008fc0:	9100c3fd 	add	x29, sp, #0x30
    40008fc4:	d503201f 	nop
    40008fc8:	10018908 	adr	x8, 4000c0e8 <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2520>
    40008fcc:	52800029 	mov	w9, #0x1                   	// #1
    40008fd0:	aa0003e1 	mov	x1, x0
    40008fd4:	a90027e8 	stp	x8, x9, [sp]
    40008fd8:	52800108 	mov	w8, #0x8                   	// #8
    40008fdc:	910003e0 	mov	x0, sp
    40008fe0:	a901ffff 	stp	xzr, xzr, [sp, #24]
    40008fe4:	f9000be8 	str	x8, [sp, #16]
    40008fe8:	97fffa26 	bl	40007880 <_ZN4core9panicking9panic_fmt17h98665796be963f83E>

0000000040008fec <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E>:
    40008fec:	d10243ff 	sub	sp, sp, #0x90
    40008ff0:	a9087bfd 	stp	x29, x30, [sp, #128]
    40008ff4:	910203fd 	add	x29, sp, #0x80
    40008ff8:	b940000a 	ldr	w10, [x0]
    40008ffc:	aa1f03e8 	mov	x8, xzr
    40009000:	910003e9 	mov	x9, sp
    40009004:	5280060b 	mov	w11, #0x30                  	// #48
    40009008:	12000d4c 	and	w12, w10, #0xf
    4000900c:	53047d4d 	lsr	w13, w10, #4
    40009010:	33000d4b 	bfxil	w11, w10, #0, #4
    40009014:	1100dd8e 	add	w14, w12, #0x37
    40009018:	7100299f 	cmp	w12, #0xa
    4000901c:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    40009020:	71003d5f 	cmp	w10, #0xf
    40009024:	8b08012a 	add	x10, x9, x8
    40009028:	3901fd4b 	strb	w11, [x10, #127]
    4000902c:	d1000508 	sub	x8, x8, #0x1
    40009030:	2a0d03ea 	mov	w10, w13
    40009034:	54fffe88 	b.hi	40009004 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h6d06b71b3391e691E+0x18>  // b.pmore
    40009038:	910003e9 	mov	x9, sp
    4000903c:	cb0803e5 	neg	x5, x8
    40009040:	d503201f 	nop
    40009044:	300177c2 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    40009048:	8b080129 	add	x9, x9, x8
    4000904c:	aa0103e0 	mov	x0, x1
    40009050:	91020124 	add	x4, x9, #0x80
    40009054:	52800021 	mov	w1, #0x1                   	// #1
    40009058:	52800043 	mov	w3, #0x2                   	// #2
    4000905c:	97fffc69 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40009060:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40009064:	910243ff 	add	sp, sp, #0x90
    40009068:	d65f03c0 	ret

000000004000906c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17hd274927b8a819bfbE>:
    4000906c:	d10243ff 	sub	sp, sp, #0x90
    40009070:	a9087bfd 	stp	x29, x30, [sp, #128]
    40009074:	910203fd 	add	x29, sp, #0x80
    40009078:	f940000a 	ldr	x10, [x0]
    4000907c:	aa1f03e8 	mov	x8, xzr
    40009080:	910003e9 	mov	x9, sp
    40009084:	5280060b 	mov	w11, #0x30                  	// #48
    40009088:	12000d4c 	and	w12, w10, #0xf
    4000908c:	d344fd4d 	lsr	x13, x10, #4
    40009090:	33000d4b 	bfxil	w11, w10, #0, #4
    40009094:	11015d8e 	add	w14, w12, #0x57
    40009098:	7100299f 	cmp	w12, #0xa
    4000909c:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    400090a0:	f1003d5f 	cmp	x10, #0xf
    400090a4:	8b08012a 	add	x10, x9, x8
    400090a8:	3901fd4b 	strb	w11, [x10, #127]
    400090ac:	d1000508 	sub	x8, x8, #0x1
    400090b0:	aa0d03ea 	mov	x10, x13
    400090b4:	54fffe88 	b.hi	40009084 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17hd274927b8a819bfbE+0x18>  // b.pmore
    400090b8:	910003e9 	mov	x9, sp
    400090bc:	cb0803e5 	neg	x5, x8
    400090c0:	d503201f 	nop
    400090c4:	300173c2 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    400090c8:	8b080129 	add	x9, x9, x8
    400090cc:	aa0103e0 	mov	x0, x1
    400090d0:	91020124 	add	x4, x9, #0x80
    400090d4:	52800021 	mov	w1, #0x1                   	// #1
    400090d8:	52800043 	mov	w3, #0x2                   	// #2
    400090dc:	97fffc49 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    400090e0:	a9487bfd 	ldp	x29, x30, [sp, #128]
    400090e4:	910243ff 	add	sp, sp, #0x90
    400090e8:	d65f03c0 	ret

00000000400090ec <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hc92360be9e83b966E>:
    400090ec:	d10243ff 	sub	sp, sp, #0x90
    400090f0:	a9087bfd 	stp	x29, x30, [sp, #128]
    400090f4:	910203fd 	add	x29, sp, #0x80
    400090f8:	f940000a 	ldr	x10, [x0]
    400090fc:	aa1f03e8 	mov	x8, xzr
    40009100:	910003e9 	mov	x9, sp
    40009104:	5280060b 	mov	w11, #0x30                  	// #48
    40009108:	12000d4c 	and	w12, w10, #0xf
    4000910c:	d344fd4d 	lsr	x13, x10, #4
    40009110:	33000d4b 	bfxil	w11, w10, #0, #4
    40009114:	1100dd8e 	add	w14, w12, #0x37
    40009118:	7100299f 	cmp	w12, #0xa
    4000911c:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    40009120:	f1003d5f 	cmp	x10, #0xf
    40009124:	8b08012a 	add	x10, x9, x8
    40009128:	3901fd4b 	strb	w11, [x10, #127]
    4000912c:	d1000508 	sub	x8, x8, #0x1
    40009130:	aa0d03ea 	mov	x10, x13
    40009134:	54fffe88 	b.hi	40009104 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hc92360be9e83b966E+0x18>  // b.pmore
    40009138:	910003e9 	mov	x9, sp
    4000913c:	cb0803e5 	neg	x5, x8
    40009140:	d503201f 	nop
    40009144:	30016fc2 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    40009148:	8b080129 	add	x9, x9, x8
    4000914c:	aa0103e0 	mov	x0, x1
    40009150:	91020124 	add	x4, x9, #0x80
    40009154:	52800021 	mov	w1, #0x1                   	// #1
    40009158:	52800043 	mov	w3, #0x2                   	// #2
    4000915c:	97fffc29 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40009160:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40009164:	910243ff 	add	sp, sp, #0x90
    40009168:	d65f03c0 	ret

000000004000916c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE>:
    4000916c:	d10243ff 	sub	sp, sp, #0x90
    40009170:	a9087bfd 	stp	x29, x30, [sp, #128]
    40009174:	910203fd 	add	x29, sp, #0x80
    40009178:	b9402428 	ldr	w8, [x1, #36]
    4000917c:	37200108 	tbnz	w8, #4, 4000919c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE+0x30>
    40009180:	37280308 	tbnz	w8, #5, 400091e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE+0x74>
    40009184:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40009188:	aa0103e2 	mov	x2, x1
    4000918c:	b9400000 	ldr	w0, [x0]
    40009190:	52800021 	mov	w1, #0x1                   	// #1
    40009194:	910243ff 	add	sp, sp, #0x90
    40009198:	14000040 	b	40009298 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE>
    4000919c:	b940000a 	ldr	w10, [x0]
    400091a0:	aa1f03e8 	mov	x8, xzr
    400091a4:	910003e9 	mov	x9, sp
    400091a8:	5280060b 	mov	w11, #0x30                  	// #48
    400091ac:	12000d4c 	and	w12, w10, #0xf
    400091b0:	53047d4d 	lsr	w13, w10, #4
    400091b4:	33000d4b 	bfxil	w11, w10, #0, #4
    400091b8:	11015d8e 	add	w14, w12, #0x57
    400091bc:	7100299f 	cmp	w12, #0xa
    400091c0:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    400091c4:	71003d5f 	cmp	w10, #0xf
    400091c8:	8b08012a 	add	x10, x9, x8
    400091cc:	3901fd4b 	strb	w11, [x10, #127]
    400091d0:	d1000508 	sub	x8, x8, #0x1
    400091d4:	2a0d03ea 	mov	w10, w13
    400091d8:	54fffe88 	b.hi	400091a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE+0x3c>  // b.pmore
    400091dc:	14000011 	b	40009220 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE+0xb4>
    400091e0:	b940000a 	ldr	w10, [x0]
    400091e4:	aa1f03e8 	mov	x8, xzr
    400091e8:	910003e9 	mov	x9, sp
    400091ec:	5280060b 	mov	w11, #0x30                  	// #48
    400091f0:	12000d4c 	and	w12, w10, #0xf
    400091f4:	53047d4d 	lsr	w13, w10, #4
    400091f8:	33000d4b 	bfxil	w11, w10, #0, #4
    400091fc:	1100dd8e 	add	w14, w12, #0x37
    40009200:	7100299f 	cmp	w12, #0xa
    40009204:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    40009208:	71003d5f 	cmp	w10, #0xf
    4000920c:	8b08012a 	add	x10, x9, x8
    40009210:	3901fd4b 	strb	w11, [x10, #127]
    40009214:	d1000508 	sub	x8, x8, #0x1
    40009218:	2a0d03ea 	mov	w10, w13
    4000921c:	54fffe88 	b.hi	400091ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h6f9948b9fb441d5dE+0x80>  // b.pmore
    40009220:	910003e9 	mov	x9, sp
    40009224:	cb0803e5 	neg	x5, x8
    40009228:	d503201f 	nop
    4000922c:	30016882 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    40009230:	8b080129 	add	x9, x9, x8
    40009234:	aa0103e0 	mov	x0, x1
    40009238:	91020124 	add	x4, x9, #0x80
    4000923c:	52800021 	mov	w1, #0x1                   	// #1
    40009240:	52800043 	mov	w3, #0x2                   	// #2
    40009244:	97fffbef 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40009248:	a9487bfd 	ldp	x29, x30, [sp, #128]
    4000924c:	910243ff 	add	sp, sp, #0x90
    40009250:	d65f03c0 	ret

0000000040009254 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hbceed844c93c45feE>:
    40009254:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40009258:	910003fd 	mov	x29, sp
    4000925c:	b9400000 	ldr	w0, [x0]
    40009260:	aa0103e2 	mov	x2, x1
    40009264:	52800021 	mov	w1, #0x1                   	// #1
    40009268:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000926c:	1400000b 	b	40009298 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE>

0000000040009270 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b2bf2790a30e268E>:
    40009270:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40009274:	910003fd 	mov	x29, sp
    40009278:	b9400008 	ldr	w8, [x0]
    4000927c:	aa0103e2 	mov	x2, x1
    40009280:	2a2803e9 	mvn	w9, w8
    40009284:	7100011f 	cmp	w8, #0x0
    40009288:	531f7d21 	lsr	w1, w9, #31
    4000928c:	5a885500 	cneg	w0, w8, mi	// mi = first
    40009290:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40009294:	14000001 	b	40009298 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE>

0000000040009298 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE>:
    40009298:	d10083ff 	sub	sp, sp, #0x20
    4000929c:	a9017bfd 	stp	x29, x30, [sp, #16]
    400092a0:	910043fd 	add	x29, sp, #0x10
    400092a4:	710fa01f 	cmp	w0, #0x3e8
    400092a8:	d503201f 	nop
    400092ac:	70016488 	adr	x8, 4000bf3f <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2377>
    400092b0:	540004a3 	b.cc	40009344 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0xac>  // b.lo, b.ul, b.last
    400092b4:	5282eb2b 	mov	w11, #0x1759                	// #5977
    400092b8:	5292cff0 	mov	w16, #0x967f                	// #38527
    400092bc:	aa1f03e9 	mov	x9, xzr
    400092c0:	72ba36eb 	movk	w11, #0xd1b7, lsl #16
    400092c4:	5284e20c 	mov	w12, #0x2710                	// #10000
    400092c8:	52828f6d 	mov	w13, #0x147b                	// #5243
    400092cc:	52800c8e 	mov	w14, #0x64                  	// #100
    400092d0:	91001bef 	add	x15, sp, #0x6
    400092d4:	72a01310 	movk	w16, #0x98, lsl #16
    400092d8:	2a0003ea 	mov	w10, w0
    400092dc:	2a0a03f1 	mov	w17, w10
    400092e0:	9bab7d4a 	umull	x10, w10, w11
    400092e4:	8b0901e5 	add	x5, x15, x9
    400092e8:	6b10023f 	cmp	w17, w16
    400092ec:	d1001129 	sub	x9, x9, #0x4
    400092f0:	d36dfd4a 	lsr	x10, x10, #45
    400092f4:	1b0cc552 	msub	w18, w10, w12, w17
    400092f8:	53023e43 	ubfx	w3, w18, #2, #14
    400092fc:	1b0d7c63 	mul	w3, w3, w13
    40009300:	53117c63 	lsr	w3, w3, #17
    40009304:	1b0ec872 	msub	w18, w3, w14, w18
    40009308:	8b234503 	add	x3, x8, w3, uxtw #1
    4000930c:	39400064 	ldrb	w4, [x3]
    40009310:	39400463 	ldrb	w3, [x3, #1]
    40009314:	8b322512 	add	x18, x8, w18, uxth #1
    40009318:	390018a4 	strb	w4, [x5, #6]
    4000931c:	39400244 	ldrb	w4, [x18]
    40009320:	39400652 	ldrb	w18, [x18, #1]
    40009324:	39001ca3 	strb	w3, [x5, #7]
    40009328:	390020a4 	strb	w4, [x5, #8]
    4000932c:	390024b2 	strb	w18, [x5, #9]
    40009330:	54fffd68 	b.hi	400092dc <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0x44>  // b.pmore
    40009334:	91002929 	add	x9, x9, #0xa
    40009338:	7100255f 	cmp	w10, #0x9
    4000933c:	540000c8 	b.hi	40009354 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0xbc>  // b.pmore
    40009340:	14000015 	b	40009394 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0xfc>
    40009344:	52800149 	mov	w9, #0xa                   	// #10
    40009348:	2a0003ea 	mov	w10, w0
    4000934c:	7100255f 	cmp	w10, #0x9
    40009350:	54000229 	b.ls	40009394 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0xfc>  // b.plast
    40009354:	53023d4b 	ubfx	w11, w10, #2, #14
    40009358:	52828f6c 	mov	w12, #0x147b                	// #5243
    4000935c:	91001bee 	add	x14, sp, #0x6
    40009360:	1b0c7d6b 	mul	w11, w11, w12
    40009364:	52800c8c 	mov	w12, #0x64                  	// #100
    40009368:	53117d6b 	lsr	w11, w11, #17
    4000936c:	1b0ca96a 	msub	w10, w11, w12, w10
    40009370:	d100092c 	sub	x12, x9, #0x2
    40009374:	8b0901c9 	add	x9, x14, x9
    40009378:	8b2a250a 	add	x10, x8, w10, uxth #1
    4000937c:	3940014d 	ldrb	w13, [x10]
    40009380:	3940054a 	ldrb	w10, [x10, #1]
    40009384:	382c69cd 	strb	w13, [x14, x12]
    40009388:	381ff12a 	sturb	w10, [x9, #-1]
    4000938c:	aa0c03e9 	mov	x9, x12
    40009390:	2a0b03ea 	mov	w10, w11
    40009394:	34000040 	cbz	w0, 4000939c <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0x104>
    40009398:	340000ea 	cbz	w10, 400093b4 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17h7bd50d24afcc7f2dE+0x11c>
    4000939c:	531f0d4a 	ubfiz	w10, w10, #1, #4
    400093a0:	d1000529 	sub	x9, x9, #0x1
    400093a4:	8b0a0108 	add	x8, x8, x10
    400093a8:	91001bea 	add	x10, sp, #0x6
    400093ac:	39400508 	ldrb	w8, [x8, #1]
    400093b0:	38296948 	strb	w8, [x10, x9]
    400093b4:	52800148 	mov	w8, #0xa                   	// #10
    400093b8:	aa0203e0 	mov	x0, x2
    400093bc:	52800022 	mov	w2, #0x1                   	// #1
    400093c0:	cb090105 	sub	x5, x8, x9
    400093c4:	91001be8 	add	x8, sp, #0x6
    400093c8:	aa1f03e3 	mov	x3, xzr
    400093cc:	8b090104 	add	x4, x8, x9
    400093d0:	97fffb8c 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    400093d4:	a9417bfd 	ldp	x29, x30, [sp, #16]
    400093d8:	910083ff 	add	sp, sp, #0x20
    400093dc:	d65f03c0 	ret

00000000400093e0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h49ea3f3af3399221E>:
    400093e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    400093e4:	910003fd 	mov	x29, sp
    400093e8:	f9400000 	ldr	x0, [x0]
    400093ec:	aa0103e2 	mov	x2, x1
    400093f0:	52800021 	mov	w1, #0x1                   	// #1
    400093f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
    400093f8:	14000001 	b	400093fc <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E>

00000000400093fc <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E>:
    400093fc:	d100c3ff 	sub	sp, sp, #0x30
    40009400:	a9027bfd 	stp	x29, x30, [sp, #32]
    40009404:	910083fd 	add	x29, sp, #0x20
    40009408:	f10fa01f 	cmp	x0, #0x3e8
    4000940c:	d503201f 	nop
    40009410:	70015968 	adr	x8, 4000bf3f <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2377>
    40009414:	54000943 	b.cc	4000953c <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0x140>  // b.lo, b.ul, b.last
    40009418:	d28b296b 	mov	x11, #0x594b                	// #22859
    4000941c:	910033e9 	add	x9, sp, #0xc
    40009420:	5292cff0 	mov	w16, #0x967f                	// #38527
    40009424:	f2a710cb 	movk	x11, #0x3886, lsl #16
    40009428:	52800291 	mov	w17, #0x14                  	// #20
    4000942c:	5284e20c 	mov	w12, #0x2710                	// #10000
    40009430:	f2d8bacb 	movk	x11, #0xc5d6, lsl #32
    40009434:	52828f6d 	mov	w13, #0x147b                	// #5243
    40009438:	91004d2e 	add	x14, x9, #0x13
    4000943c:	f2e68dab 	movk	x11, #0x346d, lsl #48
    40009440:	52800c8f 	mov	w15, #0x64                  	// #100
    40009444:	72a01310 	movk	w16, #0x98, lsl #16
    40009448:	aa0003f2 	mov	x18, x0
    4000944c:	9bcb7e49 	umulh	x9, x18, x11
    40009450:	8b1101c5 	add	x5, x14, x17
    40009454:	eb10025f 	cmp	x18, x16
    40009458:	d34bfd2a 	lsr	x10, x9, #11
    4000945c:	1b0cc949 	msub	w9, w10, w12, w18
    40009460:	aa0a03f2 	mov	x18, x10
    40009464:	53023d23 	ubfx	w3, w9, #2, #14
    40009468:	1b0d7c63 	mul	w3, w3, w13
    4000946c:	53117c63 	lsr	w3, w3, #17
    40009470:	1b0fa469 	msub	w9, w3, w15, w9
    40009474:	8b234503 	add	x3, x8, w3, uxtw #1
    40009478:	39400064 	ldrb	w4, [x3]
    4000947c:	39400463 	ldrb	w3, [x3, #1]
    40009480:	8b292509 	add	x9, x8, w9, uxth #1
    40009484:	381e90a4 	sturb	w4, [x5, #-23]
    40009488:	39400124 	ldrb	w4, [x9]
    4000948c:	381ea0a3 	sturb	w3, [x5, #-22]
    40009490:	39400523 	ldrb	w3, [x9, #1]
    40009494:	d1001229 	sub	x9, x17, #0x4
    40009498:	aa0903f1 	mov	x17, x9
    4000949c:	381eb0a4 	sturb	w4, [x5, #-21]
    400094a0:	381ec0a3 	sturb	w3, [x5, #-20]
    400094a4:	54fffd48 	b.hi	4000944c <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0x50>  // b.pmore
    400094a8:	f100255f 	cmp	x10, #0x9
    400094ac:	54000229 	b.ls	400094f0 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0xf4>  // b.plast
    400094b0:	53023d4b 	ubfx	w11, w10, #2, #14
    400094b4:	52828f6c 	mov	w12, #0x147b                	// #5243
    400094b8:	910033ee 	add	x14, sp, #0xc
    400094bc:	1b0c7d6b 	mul	w11, w11, w12
    400094c0:	52800c8c 	mov	w12, #0x64                  	// #100
    400094c4:	53117d6b 	lsr	w11, w11, #17
    400094c8:	1b0ca96a 	msub	w10, w11, w12, w10
    400094cc:	d100092c 	sub	x12, x9, #0x2
    400094d0:	8b0901c9 	add	x9, x14, x9
    400094d4:	8b2a250a 	add	x10, x8, w10, uxth #1
    400094d8:	3940014d 	ldrb	w13, [x10]
    400094dc:	3940054a 	ldrb	w10, [x10, #1]
    400094e0:	382c69cd 	strb	w13, [x14, x12]
    400094e4:	381ff12a 	sturb	w10, [x9, #-1]
    400094e8:	aa0c03e9 	mov	x9, x12
    400094ec:	aa0b03ea 	mov	x10, x11
    400094f0:	b4000040 	cbz	x0, 400094f8 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0xfc>
    400094f4:	b40000ea 	cbz	x10, 40009510 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0x114>
    400094f8:	d37f0d4a 	ubfiz	x10, x10, #1, #4
    400094fc:	d1000529 	sub	x9, x9, #0x1
    40009500:	8b0a0108 	add	x8, x8, x10
    40009504:	910033ea 	add	x10, sp, #0xc
    40009508:	39400508 	ldrb	w8, [x8, #1]
    4000950c:	38296948 	strb	w8, [x10, x9]
    40009510:	52800288 	mov	w8, #0x14                  	// #20
    40009514:	aa0203e0 	mov	x0, x2
    40009518:	52800022 	mov	w2, #0x1                   	// #1
    4000951c:	cb090105 	sub	x5, x8, x9
    40009520:	910033e8 	add	x8, sp, #0xc
    40009524:	aa1f03e3 	mov	x3, xzr
    40009528:	8b090104 	add	x4, x8, x9
    4000952c:	97fffb35 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40009530:	a9427bfd 	ldp	x29, x30, [sp, #32]
    40009534:	9100c3ff 	add	sp, sp, #0x30
    40009538:	d65f03c0 	ret
    4000953c:	52800289 	mov	w9, #0x14                  	// #20
    40009540:	aa0003ea 	mov	x10, x0
    40009544:	f100241f 	cmp	x0, #0x9
    40009548:	54fffb48 	b.hi	400094b0 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0xb4>  // b.pmore
    4000954c:	17ffffe9 	b	400094f0 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E+0xf4>

0000000040009550 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hbd41afde49ccaa8bE>:
    40009550:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40009554:	910003fd 	mov	x29, sp
    40009558:	a9402000 	ldp	x0, x8, [x0]
    4000955c:	f9400d02 	ldr	x2, [x8, #24]
    40009560:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40009564:	d61f0040 	br	x2

0000000040009568 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE>:
    40009568:	d10243ff 	sub	sp, sp, #0x90
    4000956c:	a9087bfd 	stp	x29, x30, [sp, #128]
    40009570:	910203fd 	add	x29, sp, #0x80
    40009574:	b9402428 	ldr	w8, [x1, #36]
    40009578:	f9400009 	ldr	x9, [x0]
    4000957c:	37200108 	tbnz	w8, #4, 4000959c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE+0x34>
    40009580:	37280308 	tbnz	w8, #5, 400095e0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE+0x78>
    40009584:	a9487bfd 	ldp	x29, x30, [sp, #128]
    40009588:	aa0103e2 	mov	x2, x1
    4000958c:	f9400120 	ldr	x0, [x9]
    40009590:	52800021 	mov	w1, #0x1                   	// #1
    40009594:	910243ff 	add	sp, sp, #0x90
    40009598:	17ffff99 	b	400093fc <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h55eaafacebf5a750E>
    4000959c:	f940012a 	ldr	x10, [x9]
    400095a0:	aa1f03e8 	mov	x8, xzr
    400095a4:	910003e9 	mov	x9, sp
    400095a8:	5280060b 	mov	w11, #0x30                  	// #48
    400095ac:	12000d4c 	and	w12, w10, #0xf
    400095b0:	d344fd4d 	lsr	x13, x10, #4
    400095b4:	33000d4b 	bfxil	w11, w10, #0, #4
    400095b8:	11015d8e 	add	w14, w12, #0x57
    400095bc:	7100299f 	cmp	w12, #0xa
    400095c0:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    400095c4:	f1003d5f 	cmp	x10, #0xf
    400095c8:	8b08012a 	add	x10, x9, x8
    400095cc:	3901fd4b 	strb	w11, [x10, #127]
    400095d0:	d1000508 	sub	x8, x8, #0x1
    400095d4:	aa0d03ea 	mov	x10, x13
    400095d8:	54fffe88 	b.hi	400095a8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE+0x40>  // b.pmore
    400095dc:	14000011 	b	40009620 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE+0xb8>
    400095e0:	f940012a 	ldr	x10, [x9]
    400095e4:	aa1f03e8 	mov	x8, xzr
    400095e8:	910003e9 	mov	x9, sp
    400095ec:	5280060b 	mov	w11, #0x30                  	// #48
    400095f0:	12000d4c 	and	w12, w10, #0xf
    400095f4:	d344fd4d 	lsr	x13, x10, #4
    400095f8:	33000d4b 	bfxil	w11, w10, #0, #4
    400095fc:	1100dd8e 	add	w14, w12, #0x37
    40009600:	7100299f 	cmp	w12, #0xa
    40009604:	1a8e316b 	csel	w11, w11, w14, cc	// cc = lo, ul, last
    40009608:	f1003d5f 	cmp	x10, #0xf
    4000960c:	8b08012a 	add	x10, x9, x8
    40009610:	3901fd4b 	strb	w11, [x10, #127]
    40009614:	d1000508 	sub	x8, x8, #0x1
    40009618:	aa0d03ea 	mov	x10, x13
    4000961c:	54fffe88 	b.hi	400095ec <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he46f9c1b946db70aE+0x84>  // b.pmore
    40009620:	910003e9 	mov	x9, sp
    40009624:	cb0803e5 	neg	x5, x8
    40009628:	d503201f 	nop
    4000962c:	30014882 	adr	x2, 4000bf3d <_ZN11arm_rstiny24uart4UART17h8af717bfcb976a72E+0x2375>
    40009630:	8b080129 	add	x9, x9, x8
    40009634:	aa0103e0 	mov	x0, x1
    40009638:	91020124 	add	x4, x9, #0x80
    4000963c:	52800021 	mov	w1, #0x1                   	// #1
    40009640:	52800043 	mov	w3, #0x2                   	// #2
    40009644:	97fffaef 	bl	40008200 <_ZN4core3fmt9Formatter12pad_integral17h8cbda9349fa2d662E>
    40009648:	a9487bfd 	ldp	x29, x30, [sp, #128]
    4000964c:	910243ff 	add	sp, sp, #0x90
    40009650:	d65f03c0 	ret

0000000040009654 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hc0580fec1e2b952bE>:
    40009654:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    40009658:	910003fd 	mov	x29, sp
    4000965c:	a9400808 	ldp	x8, x2, [x0]
    40009660:	aa0103e0 	mov	x0, x1
    40009664:	aa0803e1 	mov	x1, x8
    40009668:	a8c17bfd 	ldp	x29, x30, [sp], #16
    4000966c:	17fffbcc 	b	4000859c <_ZN4core3fmt9Formatter3pad17h3fecaa179419bbe9E>

0000000040009670 <OUTLINED_FUNCTION_0>:
    40009670:	aa0403e6 	mov	x6, x4
    40009674:	aa0303e5 	mov	x5, x3
    40009678:	910003e1 	mov	x1, sp
    4000967c:	910023e3 	add	x3, sp, #0x8
    40009680:	aa0203e4 	mov	x4, x2
    40009684:	17fff8dd 	b	400079f8 <_ZN4core9panicking19assert_failed_inner17h5650ccf7974b3c17E>

0000000040009688 <memset>:
    40009688:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    4000968c:	910003fd 	mov	x29, sp
    40009690:	f100405f 	cmp	x2, #0x10
    40009694:	54000983 	b.cc	400097c4 <memset+0x13c>  // b.lo, b.ul, b.last
    40009698:	cb0003eb 	neg	x11, x0
    4000969c:	92400968 	and	x8, x11, #0x7
    400096a0:	8b080009 	add	x9, x0, x8
    400096a4:	eb09001f 	cmp	x0, x9
    400096a8:	54000222 	b.cs	400096ec <memset+0x64>  // b.hs, b.nlast
    400096ac:	f100091f 	cmp	x8, #0x2
    400096b0:	aa0003ea 	mov	x10, x0
    400096b4:	54000163 	b.cc	400096e0 <memset+0x58>  // b.lo, b.ul, b.last
    400096b8:	927f056b 	and	x11, x11, #0x6
    400096bc:	9100040c 	add	x12, x0, #0x1
    400096c0:	8b0b000a 	add	x10, x0, x11
    400096c4:	aa0b03ed 	mov	x13, x11
    400096c8:	f10009ad 	subs	x13, x13, #0x2
    400096cc:	381ff181 	sturb	w1, [x12, #-1]
    400096d0:	38002581 	strb	w1, [x12], #2
    400096d4:	54ffffa1 	b.ne	400096c8 <memset+0x40>  // b.any
    400096d8:	eb0b011f 	cmp	x8, x11
    400096dc:	54000080 	b.eq	400096ec <memset+0x64>  // b.none
    400096e0:	38001541 	strb	w1, [x10], #1
    400096e4:	eb09015f 	cmp	x10, x9
    400096e8:	54ffffc1 	b.ne	400096e0 <memset+0x58>  // b.any
    400096ec:	cb08004a 	sub	x10, x2, x8
    400096f0:	927df148 	and	x8, x10, #0xfffffffffffffff8
    400096f4:	8b080128 	add	x8, x9, x8
    400096f8:	eb08013f 	cmp	x9, x8
    400096fc:	54000102 	b.cs	4000971c <memset+0x94>  // b.hs, b.nlast
    40009700:	12001c2b 	and	w11, w1, #0xff
    40009704:	3200c3ec 	mov	w12, #0x1010101             	// #16843009
    40009708:	1b0c7d6b 	mul	w11, w11, w12
    4000970c:	aa0b816b 	orr	x11, x11, x11, lsl #32
    40009710:	f800852b 	str	x11, [x9], #8
    40009714:	eb08013f 	cmp	x9, x8
    40009718:	54ffffc3 	b.cc	40009710 <memset+0x88>  // b.lo, b.ul, b.last
    4000971c:	92400942 	and	x2, x10, #0x7
    40009720:	8b020109 	add	x9, x8, x2
    40009724:	eb09011f 	cmp	x8, x9
    40009728:	540004a2 	b.cs	400097bc <memset+0x134>  // b.hs, b.nlast
    4000972c:	f100085f 	cmp	x2, #0x2
    40009730:	54000403 	b.cc	400097b0 <memset+0x128>  // b.lo, b.ul, b.last
    40009734:	927f084a 	and	x10, x2, #0xe
    40009738:	39000101 	strb	w1, [x8]
    4000973c:	f100095f 	cmp	x10, #0x2
    40009740:	8b0a010b 	add	x11, x8, x10
    40009744:	39000501 	strb	w1, [x8, #1]
    40009748:	540002e0 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000974c:	f100115f 	cmp	x10, #0x4
    40009750:	39000901 	strb	w1, [x8, #2]
    40009754:	39000d01 	strb	w1, [x8, #3]
    40009758:	54000260 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000975c:	f100195f 	cmp	x10, #0x6
    40009760:	39001101 	strb	w1, [x8, #4]
    40009764:	39001501 	strb	w1, [x8, #5]
    40009768:	540001e0 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000976c:	f100215f 	cmp	x10, #0x8
    40009770:	39001901 	strb	w1, [x8, #6]
    40009774:	39001d01 	strb	w1, [x8, #7]
    40009778:	54000160 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000977c:	f100295f 	cmp	x10, #0xa
    40009780:	39002101 	strb	w1, [x8, #8]
    40009784:	39002501 	strb	w1, [x8, #9]
    40009788:	540000e0 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000978c:	f100315f 	cmp	x10, #0xc
    40009790:	39002901 	strb	w1, [x8, #10]
    40009794:	39002d01 	strb	w1, [x8, #11]
    40009798:	54000060 	b.eq	400097a4 <memset+0x11c>  // b.none
    4000979c:	39003101 	strb	w1, [x8, #12]
    400097a0:	39003501 	strb	w1, [x8, #13]
    400097a4:	eb0a005f 	cmp	x2, x10
    400097a8:	aa0b03e8 	mov	x8, x11
    400097ac:	54000080 	b.eq	400097bc <memset+0x134>  // b.none
    400097b0:	38001501 	strb	w1, [x8], #1
    400097b4:	eb09011f 	cmp	x8, x9
    400097b8:	54ffffc1 	b.ne	400097b0 <memset+0x128>  // b.any
    400097bc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    400097c0:	d65f03c0 	ret
    400097c4:	aa0003e8 	mov	x8, x0
    400097c8:	8b020009 	add	x9, x0, x2
    400097cc:	eb09001f 	cmp	x0, x9
    400097d0:	54fffae3 	b.cc	4000972c <memset+0xa4>  // b.lo, b.ul, b.last
    400097d4:	17fffffa 	b	400097bc <memset+0x134>

00000000400097d8 <memcpy>:
    400097d8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    400097dc:	910003fd 	mov	x29, sp
    400097e0:	f100405f 	cmp	x2, #0x10
    400097e4:	54000403 	b.cc	40009864 <memcpy+0x8c>  // b.lo, b.ul, b.last
    400097e8:	4b0003e8 	neg	w8, w0
    400097ec:	92400908 	and	x8, x8, #0x7
    400097f0:	8b080009 	add	x9, x0, x8
    400097f4:	eb09001f 	cmp	x0, x9
    400097f8:	54000102 	b.cs	40009818 <memcpy+0x40>  // b.hs, b.nlast
    400097fc:	aa0803ea 	mov	x10, x8
    40009800:	aa0003eb 	mov	x11, x0
    40009804:	aa0103ec 	mov	x12, x1
    40009808:	3840158d 	ldrb	w13, [x12], #1
    4000980c:	f100054a 	subs	x10, x10, #0x1
    40009810:	3800156d 	strb	w13, [x11], #1
    40009814:	54ffffa1 	b.ne	40009808 <memcpy+0x30>  // b.any
    40009818:	cb08004b 	sub	x11, x2, x8
    4000981c:	8b08002a 	add	x10, x1, x8
    40009820:	927df16c 	and	x12, x11, #0xfffffffffffffff8
    40009824:	f240095f 	tst	x10, #0x7
    40009828:	8b0c0128 	add	x8, x9, x12
    4000982c:	54000301 	b.ne	4000988c <memcpy+0xb4>  // b.any
    40009830:	eb08013f 	cmp	x9, x8
    40009834:	540000c2 	b.cs	4000984c <memcpy+0x74>  // b.hs, b.nlast
    40009838:	aa0a03ed 	mov	x13, x10
    4000983c:	f84085ae 	ldr	x14, [x13], #8
    40009840:	f800852e 	str	x14, [x9], #8
    40009844:	eb08013f 	cmp	x9, x8
    40009848:	54ffffa3 	b.cc	4000983c <memcpy+0x64>  // b.lo, b.ul, b.last
    4000984c:	8b0c0141 	add	x1, x10, x12
    40009850:	92400962 	and	x2, x11, #0x7
    40009854:	8b020109 	add	x9, x8, x2
    40009858:	eb09011f 	cmp	x8, x9
    4000985c:	540000c3 	b.cc	40009874 <memcpy+0x9c>  // b.lo, b.ul, b.last
    40009860:	14000009 	b	40009884 <memcpy+0xac>
    40009864:	aa0003e8 	mov	x8, x0
    40009868:	8b020009 	add	x9, x0, x2
    4000986c:	eb09001f 	cmp	x0, x9
    40009870:	540000a2 	b.cs	40009884 <memcpy+0xac>  // b.hs, b.nlast
    40009874:	38401429 	ldrb	w9, [x1], #1
    40009878:	f1000442 	subs	x2, x2, #0x1
    4000987c:	38001509 	strb	w9, [x8], #1
    40009880:	54ffffa1 	b.ne	40009874 <memcpy+0x9c>  // b.any
    40009884:	a8c17bfd 	ldp	x29, x30, [sp], #16
    40009888:	d65f03c0 	ret
    4000988c:	eb08013f 	cmp	x9, x8
    40009890:	54fffde2 	b.cs	4000984c <memcpy+0x74>  // b.hs, b.nlast
    40009894:	aa0a03ed 	mov	x13, x10
    40009898:	aa0d03f0 	mov	x16, x13
    4000989c:	394009af 	ldrb	w15, [x13, #2]
    400098a0:	394005ae 	ldrb	w14, [x13, #1]
    400098a4:	38404e11 	ldrb	w17, [x16, #4]!
    400098a8:	39400a12 	ldrb	w18, [x16, #2]
    400098ac:	394001a1 	ldrb	w1, [x13]
    400098b0:	39400da2 	ldrb	w2, [x13, #3]
    400098b4:	d370bdef 	lsl	x15, x15, #16
    400098b8:	394015a3 	ldrb	w3, [x13, #5]
    400098bc:	39400e10 	ldrb	w16, [x16, #3]
    400098c0:	53103e52 	lsl	w18, w18, #16
    400098c4:	aa0e202e 	orr	x14, x1, x14, lsl #8
    400098c8:	aa0261ef 	orr	x15, x15, x2, lsl #24
    400098cc:	910021ad 	add	x13, x13, #0x8
    400098d0:	2a032231 	orr	w17, w17, w3, lsl #8
    400098d4:	2a106250 	orr	w16, w18, w16, lsl #24
    400098d8:	aa0e01ee 	orr	x14, x15, x14
    400098dc:	2a11020f 	orr	w15, w16, w17
    400098e0:	aa0f81ce 	orr	x14, x14, x15, lsl #32
    400098e4:	f800852e 	str	x14, [x9], #8
    400098e8:	eb08013f 	cmp	x9, x8
    400098ec:	54fffd63 	b.cc	40009898 <memcpy+0xc0>  // b.lo, b.ul, b.last
    400098f0:	17ffffd7 	b	4000984c <memcpy+0x74>
